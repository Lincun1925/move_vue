{"ast":null,"code":"import { defineComponent, inject, ref, unref, nextTick, computed, provide, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true\n    },\n    active: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n  setup(props, {\n    emit\n  }) {\n    const {\n      currentTabbedId,\n      loop,\n      onItemFocus,\n      onItemShiftTab\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);\n    const {\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const id = useId();\n    const rovingFocusGroupItemRef = ref(null);\n    const handleMousedown = composeEventHandlers(e => {\n      emit(\"mousedown\", e);\n    }, e => {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    const handleFocus = composeEventHandlers(e => {\n      emit(\"focus\", e);\n    }, () => {\n      onItemFocus(unref(id));\n    });\n    const handleKeydown = composeEventHandlers(e => {\n      emit(\"keydown\", e);\n    }, e => {\n      const {\n        key,\n        shiftKey,\n        target,\n        currentTarget\n      } = e;\n      if (key === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n      if (target !== currentTarget) return;\n      const focusIntent = getFocusIntent(e);\n      if (focusIntent) {\n        e.preventDefault();\n        const items = getItems().filter(item => item.focusable);\n        let elements = items.map(item => item.ref);\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n              const currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n          default:\n            {\n              break;\n            }\n        }\n        nextTick(() => {\n          focusFirst(elements);\n        });\n      }\n    });\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id));\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => unref(isCurrentTab) ? 0 : -1),\n      handleMousedown,\n      handleFocus,\n      handleKeydown\n    });\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue\"]]);\nexport { ElRovingFocusItem as default };","map":{"version":3,"mappings":";;;;;;;;;;;AAiCA,MAAKA,YAAaC,eAAa;EAC7BC,UAAY;IAAAC,6BACVA;EAAA,CACF;EACAC,KAAO;IACLC,SAAW;MACTC,IAAM;MACNC,OAAS;IAAA,CACX;IACAC,MAAQ;MACNF,IAAM;MACNC,OAAS;IAAA;EACX,CACF;EACAE,KAAO,GAAC,WAAa,WAAS,SAAS;EACvCC,MAAMN,KAAO;IAAEO;EAAQ;IACrB,MAAM;MAAEC,eAAiB;MAAAC;MAAMC;MAAaC;IAAmB,WAC7DC,kCACA,KACF;IAEA,MAAM;MAAEC;IAAA,IAAaC,MACnB,2BACA,KACF;IAEA,MAAMC,KAAKC,KAAM;IACX,gCAA0BC,IAAwB,IAAI;IAEtD,wBAAkBC,oBACtB,CAACC,CAAa;MACZZ,KAAK,aAAaY,CAAC;IAAA,CACrB,EACCA,CAAM;MACD,KAACnB,MAAMC,SAAW;QACpBkB,EAAEC,cAAe;MAAA,CACZ;QACOV,kBAAMK,EAAE,CAAC;MAAA;IACvB,CAEJ;IAEM,oBAAcG,oBAClB,CAACC,CAAa;MACZZ,KAAK,SAASY,CAAC;IAAA,GAEjB,MAAM;MACQT,kBAAMK,EAAE,CAAC;IAAA,CAEzB;IAEM,sBAAgBG,oBACpB,CAACC,CAAa;MACZZ,KAAK,WAAWY,CAAC;IAAA,CACnB,EACCA,CAAM;MACL,MAAM;QAAEE;QAAKC,QAAU;QAAAC;QAAQC;MAAkB;MAC7C,YAAQC,UAAW,QAAOH,QAAU;QACvBX;QACf;MAAA;MAEF,IAAIY,MAAW,oBAAe;MACxB,oBAAcG,eAAeP,CAAkB;MAErD,IAAIQ,WAAa;QACfR,EAAEC,cAAe;QACjB,MAAMQ,QAAQf,QAAuB,GAAEgB,OACpCC,QAASA,KAAK7B,SACjB;QAEA,IAAI8B,WAAWH,KAAM,KAAKE,QAASA,KAAKb,GAAI;QAEpC;UAAA,KACD,MAAQ;YAAA;cACXc,SAASC,OAAQ;cACjB;YAAA;UAEG;UAAA,KACA,MAAQ;YAAA;cACX,IAAIL,gBAAgB,MAAQ;gBAC1BI,SAASC,OAAQ;cAAA;cAEb,mBAAaD,QAAS,SAAQP,aAA4B;cACrDO,gBAAKE,KACZ,gBAAaF,QAAU,eAAa,CAAC,CACrC,YAASG,KAAM,cAAa,CAAC;cACjC;YAAA;UAEO;YAAA;cACP;YAAA;QACF;QAGFC,SAAS,MAAM;UACbC,WAAWL,QAAQ;QAAA,CACpB;MAAA;IACH,CAEJ;IAEA,MAAMM,eAAeC,QAAS,OAAM9B,gBAAgByB,KAAU,WAAMlB,EAAE,CAAC;IAEvEwB,QAAQC,qCAAuC;MAC7CC;MACAC,UAAUJ,QAAS,OAAOK,MAAMN,YAAY,IAAI,IAAI,CAAG;MACvDO;MACAC;MACAC;IAAA,CACD;IAEM;MACL/B;MACA+B;MACAD;MACAD;IAAA,CACF;EAAA;AAEJ,CAAC;;;sBArJCG,WAMkC;IAL/BhC,EAAI;IACJd,SAAW;IACXG,MAAQ;EAAA;qBAET,MAAQ,CAAR4C,UAAQ","names":["_sfc_main","defineComponent","components","ElRovingFocusCollectionItem","props","focusable","type","default","active","emits","setup","emit","currentTabbedId","loop","onItemFocus","onItemShiftTab","ROVING_FOCUS_GROUP_INJECTION_KEY","getItems","inject","id","useId","ref","composeEventHandlers","e","preventDefault","key","shiftKey","target","currentTarget","EVENT_CODE","getFocusIntent","focusIntent","items","filter","item","elements","reverse","value","slice","nextTick","focusFirst","isCurrentTab","computed","provide","ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY","rovingFocusGroupItemRef","tabIndex","unref","handleMousedown","handleFocus","handleKeydown","_createBlock","_renderSlot"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-item.vue"],"sourcesContent":["<template>\n  <el-roving-focus-collection-item\n    :id=\"id\"\n    :focusable=\"focusable\"\n    :active=\"active\"\n  >\n    <slot />\n  </el-roving-focus-collection-item>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  unref,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ElCollectionItem as ElRovingFocusCollectionItem,\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n} from './roving-focus-group'\nimport {\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY,\n} from './tokens'\nimport { focusFirst, getFocusIntent, reorderArray } from './utils'\n\nexport default defineComponent({\n  components: {\n    ElRovingFocusCollectionItem,\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true,\n    },\n    active: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['mousedown', 'focus', 'keydown'],\n  setup(props, { emit }) {\n    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(\n      ROVING_FOCUS_GROUP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const id = useId()\n    const rovingFocusGroupItemRef = ref<HTMLElement | null>(null)\n\n    const handleMousedown = composeEventHandlers(\n      (e: Event) => {\n        emit('mousedown', e)\n      },\n      (e) => {\n        if (!props.focusable) {\n          e.preventDefault()\n        } else {\n          onItemFocus(unref(id))\n        }\n      }\n    )\n\n    const handleFocus = composeEventHandlers(\n      (e: Event) => {\n        emit('focus', e)\n      },\n      () => {\n        onItemFocus(unref(id))\n      }\n    )\n\n    const handleKeydown = composeEventHandlers(\n      (e: Event) => {\n        emit('keydown', e)\n      },\n      (e) => {\n        const { key, shiftKey, target, currentTarget } = e as KeyboardEvent\n        if (key === EVENT_CODE.tab && shiftKey) {\n          onItemShiftTab()\n          return\n        }\n        if (target !== currentTarget) return\n        const focusIntent = getFocusIntent(e as KeyboardEvent)\n\n        if (focusIntent) {\n          e.preventDefault()\n          const items = getItems<typeof props>().filter(\n            (item) => item.focusable\n          )\n\n          let elements = items.map((item) => item.ref!)\n\n          switch (focusIntent) {\n            case 'last': {\n              elements.reverse()\n              break\n            }\n            case 'prev':\n            case 'next': {\n              if (focusIntent === 'prev') {\n                elements.reverse()\n              }\n              const currentIdx = elements.indexOf(currentTarget as HTMLElement)\n              elements = loop.value\n                ? reorderArray(elements, currentIdx + 1)\n                : elements.slice(currentIdx + 1)\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          nextTick(() => {\n            focusFirst(elements)\n          })\n        }\n      }\n    )\n\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id))\n\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => (unref(isCurrentTab) ? 0 : -1)),\n      handleMousedown,\n      handleFocus,\n      handleKeydown,\n    })\n\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}