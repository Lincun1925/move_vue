{"ast":null,"code":"import { defineComponent, ref, computed, watch, onBeforeUnmount, openBlock, createBlock, unref, createSlots, renderList, withCtx, renderSlot } from 'vue';\nimport { ElStatistic } from '../../statistic/index.mjs';\nimport '../../../utils/index.mjs';\nimport { countdownProps, countdownEmits } from './countdown.mjs';\nimport { getTime, formatTime } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { cAF, rAF } from '../../../utils/raf.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCountdown\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: countdownProps,\n  emits: countdownEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    let timer;\n    const rawValue = ref(getTime(props.value) - Date.now());\n    const displayValue = computed(() => formatTime(rawValue.value, props.format));\n    const formatter = val => formatTime(val, props.format);\n    const stopTimer = () => {\n      if (timer) {\n        cAF(timer);\n        timer = void 0;\n      }\n    };\n    const startTimer = () => {\n      const timestamp = getTime(props.value);\n      const frameFunc = () => {\n        let diff = timestamp - Date.now();\n        emit(\"change\", diff);\n        if (diff <= 0) {\n          diff = 0;\n          stopTimer();\n          emit(\"finish\");\n        } else {\n          timer = rAF(frameFunc);\n        }\n        rawValue.value = diff;\n      };\n      timer = rAF(frameFunc);\n    };\n    watch(() => [props.value, props.format], () => {\n      stopTimer();\n      startTimer();\n    }, {\n      immediate: true\n    });\n    onBeforeUnmount(() => {\n      stopTimer();\n    });\n    expose({\n      displayValue\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElStatistic), {\n        value: rawValue.value,\n        title: _ctx.title,\n        prefix: _ctx.prefix,\n        suffix: _ctx.suffix,\n        \"value-style\": _ctx.valueStyle,\n        formatter\n      }, createSlots({\n        _: 2\n      }, [renderList(_ctx.$slots, (_, name) => {\n        return {\n          name,\n          fn: withCtx(() => [renderSlot(_ctx.$slots, name)])\n        };\n      })]), 1032, [\"value\", \"title\", \"prefix\", \"suffix\", \"value-style\"]);\n    };\n  }\n});\nvar Countdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/countdown/src/countdown.vue\"]]);\nexport { Countdown as default };","map":{"version":3,"mappings":";;;;;;;mCAqBc;EACZA,IAAM;AACR;;;;;;;;;;IAKI;IACE,iBAAWC,IAAIC,OAAQ,OAAMC,KAAK,CAAI,QAAKC,KAAK;IAChD,qBAAeC,SAAS,MAAMC,WAAWC,SAASJ,KAAO,QAAMK,MAAM,CAAC;IAE5E,MAAMC,YAAaC,OAAgBJ,UAAW,MAAKK,MAAMH,MAAM;IAE/D,MAAMI,YAAY,MAAM;MACtB,IAAIC,KAAO;QACTC,IAAID,KAAK;QACDA;MAAA;IACV,CACF;IAEA,MAAME,aAAa,MAAM;MACjB,kBAAYb,OAAQ,OAAMC,KAAK;MACrC,MAAMa,YAAY,MAAM;QAClB,WAAOC,SAAY,QAAKb,GAAI;QAChCc,KAAK,UAAUC,IAAI;QACnB,IAAIA,QAAQ,CAAG;UACNA;UACGP;UACVM,KAAK,QAAQ;QAAA,CACR;UACLL,QAAQO,IAAIJ,SAAS;QAAA;QAEvBT,SAASJ,KAAQ;MAAA,CACnB;MACAU,QAAQO,IAAIJ,SAAS;IAAA,CACvB;IAEAK,MACE,MAAM,CAACV,MAAMR,OAAOQ,KAAM,OAAM,GAChC,MAAM;MACMC;MACCG;IAAA,CAEb;MACEO,SAAW;IAAA,CAEf;IAEAC,gBAAgB,MAAM;MACVX;IAAA,CACX;IAEYY;MAIXC;IAAA,CACD","names":["name","ref","getTime","value","now","computed","formatTime","rawValue","format","formatter","val","props","stopTimer","timer","cAF","startTimer","frameFunc","timestamp","emit","diff","rAF","watch","immediate","onBeforeUnmount","expose","displayValue"],"sources":["../../../../../../packages/components/countdown/src/countdown.vue"],"sourcesContent":["<template>\n  <el-statistic\n    :value=\"rawValue\"\n    :title=\"title\"\n    :prefix=\"prefix\"\n    :suffix=\"suffix\"\n    :value-style=\"valueStyle\"\n    :formatter=\"formatter\"\n  >\n    <template v-for=\"(_, name) in $slots\" #[name]>\n      <slot :name=\"name\" />\n    </template>\n  </el-statistic>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, onBeforeUnmount, ref, watch } from 'vue'\nimport { ElStatistic } from '@element-plus/components/statistic'\nimport { cAF, rAF } from '@element-plus/utils'\nimport { countdownEmits, countdownProps } from './countdown'\nimport { formatTime, getTime } from './utils'\n\ndefineOptions({\n  name: 'ElCountdown',\n})\n\nconst props = defineProps(countdownProps)\nconst emit = defineEmits(countdownEmits)\n\nlet timer: ReturnType<typeof rAF> | undefined\nconst rawValue = ref(getTime(props.value) - Date.now())\nconst displayValue = computed(() => formatTime(rawValue.value, props.format))\n\nconst formatter = (val: number) => formatTime(val, props.format)\n\nconst stopTimer = () => {\n  if (timer) {\n    cAF(timer)\n    timer = undefined\n  }\n}\n\nconst startTimer = () => {\n  const timestamp = getTime(props.value)\n  const frameFunc = () => {\n    let diff = timestamp - Date.now()\n    emit('change', diff)\n    if (diff <= 0) {\n      diff = 0\n      stopTimer()\n      emit('finish')\n    } else {\n      timer = rAF(frameFunc)\n    }\n    rawValue.value = diff\n  }\n  timer = rAF(frameFunc)\n}\n\nwatch(\n  () => [props.value, props.format],\n  () => {\n    stopTimer()\n    startTimer()\n  },\n  {\n    immediate: true,\n  }\n)\n\nonBeforeUnmount(() => {\n  stopTimer()\n})\n\ndefineExpose({\n  /**\n   * @description current display value\n   */\n  displayValue,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}