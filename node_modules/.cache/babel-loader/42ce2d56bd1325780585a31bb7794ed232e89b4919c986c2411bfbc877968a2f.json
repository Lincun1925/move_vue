{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, useAttrs, ref, computed, nextTick, watch, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, vShow, renderSlot } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { isClient, useCssVar, useResizeObserver } from '@vueuse/core';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { CircleClose, ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"placeholder\", \"onKeydown\"];\nconst _hoisted_3 = [\"onClick\"];\nconst COMPONENT_NAME = \"ElCascader\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: ({\n          state\n        }) => {\n          const {\n            modifiersData,\n            placement\n          } = state;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          modifiersData.arrow.x = 35;\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    const attrs = useAttrs();\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const panel = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const cascaderStyle = computed(() => {\n      return attrs.style;\n    });\n    const isDisabled = computed(() => props.disabled || (form == null ? void 0 : form.disabled));\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const currentPlaceholder = computed(() => searchInputValue.value || presentTags.value.length > 0 || isOnComposition.value ? \"\" : inputPlaceholder.value);\n    const realSize = useSize();\n    const tagSize = computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return cloneDeep(props.modelValue);\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n        }\n      }\n    });\n    const cascaderPanelRef = computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const cascaderKls = computed(() => {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs.class];\n    });\n    const cascaderIconKls = computed(() => {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    const deleteTag = tag => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    const handleComposition = event => {\n      var _a;\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n    };\n    const syncPresentTextValue = () => {\n      const {\n        value\n      } = presentText;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    const handleSuggestionClick = node => {\n      var _a, _b;\n      const {\n        checked\n      } = node;\n      if (multiple.value) {\n        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFocus = e => {\n      emit(\"focus\", e);\n    };\n    const handleBlur = e => {\n      emit(\"blur\", e);\n    };\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    onMounted(() => {\n      const inputInner = input.value.input;\n      const inputInnerHeight = Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes,\n      cascaderPanelRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": [\"bottom-start\", \"bottom\", \"top-start\", \"top\", \"right\", \"left\"],\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: \"bottom-start\",\n        transition: `${unref(nsCascader).namespace.value}-zoom-in-top`,\n        effect: \"light\",\n        pure: \"\",\n        persistent: \"\",\n        onHide: hideSuggestionPanel\n      }, {\n        default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n          class: normalizeClass(unref(cascaderKls)),\n          style: normalizeStyle(unref(cascaderStyle)),\n          onClick: _cache[5] || (_cache[5] = () => togglePopperVisible(unref(readonly) ? void 0 : true)),\n          onKeydown: handleKeyDown,\n          onMouseenter: _cache[6] || (_cache[6] = $event => inputHover.value = true),\n          onMouseleave: _cache[7] || (_cache[7] = $event => inputHover.value = false)\n        }, [createVNode(unref(ElInput), {\n          ref_key: \"input\",\n          ref: input,\n          modelValue: inputValue.value,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => inputValue.value = $event),\n          placeholder: unref(currentPlaceholder),\n          readonly: unref(readonly),\n          disabled: unref(isDisabled),\n          \"validate-event\": false,\n          size: unref(realSize),\n          class: normalizeClass(unref(nsCascader).is(\"focus\", popperVisible.value)),\n          onCompositionstart: handleComposition,\n          onCompositionupdate: handleComposition,\n          onCompositionend: handleComposition,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onInput: handleInput\n        }, {\n          suffix: withCtx(() => [unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n            key: \"clear\",\n            class: normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n            onClick: withModifiers(handleClear, [\"stop\"])\n          }, {\n            default: withCtx(() => [createVNode(unref(CircleClose))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n            key: \"arrow-down\",\n            class: normalizeClass(unref(cascaderIconKls)),\n            onClick: _cache[0] || (_cache[0] = withModifiers($event => togglePopperVisible(), [\"stop\"]))\n          }, {\n            default: withCtx(() => [createVNode(unref(ArrowDown))]),\n            _: 1\n          }, 8, [\"class\"]))]),\n          _: 1\n        }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\"]), unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          ref_key: \"tagWrapper\",\n          ref: tagWrapper,\n          class: normalizeClass(unref(nsCascader).e(\"tags\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, tag => {\n          return openBlock(), createBlock(unref(ElTag), {\n            key: tag.key,\n            type: _ctx.tagType,\n            size: unref(tagSize),\n            hit: tag.hitState,\n            closable: tag.closable,\n            \"disable-transitions\": \"\",\n            onClose: $event => deleteTag(tag)\n          }, {\n            default: withCtx(() => [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n              key: 1,\n              disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n              \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n              placement: \"bottom\",\n              effect: \"light\"\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n              content: withCtx(() => [createElementVNode(\"div\", {\n                class: normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n              }, [(openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(1), (tag2, idx) => {\n                return openBlock(), createElementBlock(\"div\", {\n                  key: idx,\n                  class: normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                }, [(openBlock(), createBlock(unref(ElTag), {\n                  key: tag2.key,\n                  class: \"in-tooltip\",\n                  type: _ctx.tagType,\n                  size: unref(tagSize),\n                  hit: tag2.hitState,\n                  closable: tag2.closable,\n                  \"disable-transitions\": \"\",\n                  onClose: $event => deleteTag(tag2)\n                }, {\n                  default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)]),\n                  _: 2\n                }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]))], 2);\n              }), 128))], 2)]),\n              _: 2\n            }, 1032, [\"disabled\"]))]),\n            _: 2\n          }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]);\n        }), 128)), _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n          key: 0,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => searchInputValue.value = $event),\n          type: \"text\",\n          class: normalizeClass(unref(nsCascader).e(\"search-input\")),\n          placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n          onInput: _cache[3] || (_cache[3] = e => handleInput(searchInputValue.value, e)),\n          onClick: _cache[4] || (_cache[4] = withModifiers($event => togglePopperVisible(true), [\"stop\"])),\n          onKeydown: withKeys(handleDelete, [\"delete\"]),\n          onCompositionstart: handleComposition,\n          onCompositionupdate: handleComposition,\n          onCompositionend: handleComposition\n        }, null, 42, _hoisted_2)), [[vModelText, searchInputValue.value]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 38)), [[unref(ClickOutside), () => togglePopperVisible(false), unref(cascaderPanelRef)]])]),\n        content: withCtx(() => [withDirectives(createVNode(unref(_CascaderPanel), {\n          ref_key: \"panel\",\n          ref: panel,\n          modelValue: unref(checkedValue),\n          \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => isRef(checkedValue) ? checkedValue.value = $event : null),\n          options: _ctx.options,\n          props: props.props,\n          border: false,\n          \"render-label\": _ctx.$slots.default,\n          onExpandChange: handleExpandChange,\n          onClose: _cache[9] || (_cache[9] = $event => _ctx.$nextTick(() => togglePopperVisible(false)))\n        }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\"]), [[vShow, !filtering.value]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n          key: 0,\n          ref_key: \"suggestionPanel\",\n          ref: suggestionPanel,\n          tag: \"ul\",\n          class: normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n          \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n          onKeydown: handleSuggestionKeyDown\n        }, {\n          default: withCtx(() => [suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, {\n            key: 0\n          }, renderList(suggestions.value, item => {\n            return openBlock(), createElementBlock(\"li\", {\n              key: item.uid,\n              class: normalizeClass([unref(nsCascader).e(\"suggestion-item\"), unref(nsCascader).is(\"checked\", item.checked)]),\n              tabindex: -1,\n              onClick: $event => handleSuggestionClick(item)\n            }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(unref(ElIcon), {\n              key: 0\n            }, {\n              default: withCtx(() => [createVNode(unref(Check))]),\n              _: 1\n            })) : createCommentVNode(\"v-if\", true)], 10, _hoisted_3);\n          }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n            key: 1\n          }, () => [createElementVNode(\"li\", {\n            class: normalizeClass(unref(nsCascader).e(\"empty-text\"))\n          }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)])]),\n          _: 3\n        }, 8, [\"class\", \"view-class\"])), [[vShow, filtering.value]]) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader/src/cascader.vue\"]]);\nexport { Cascader as default };","map":{"version":3,"mappings":"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","names":["name","popperOptions","modifiers","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","attrs","useAttrs","inputInitialHeight","pressDeleteCount","useNamespace","t","useLocale","form","formItem","useFormItem","ref","computed","isDisabled","props","inputPlaceholder","placeholder","currentPlaceholder","searchInputValue","value","realSize","useSize","multiple","readonly","inputValue","checkedNodes","panel","_a","showAllLevels","separator","nodes","get","set","emit","cascaderKls","nsCascader","cascaderIconKls","nsInput","visible","popperVisible","updatePopperPosition","nextTick","syncPresentTextValue","filtering","genTag","node","key","text","hitState","closable","isCollapseTag","deleteTag","allTags","allPresentTags","restCount","tags","rest","presentTags","calculateSuggestions","filterMethod","tag","suggestions","res","firstNode","suggestionPanelEl","suggestionList","inputInner","offsetHeight","handleComposition","isOnComposition","e","togglePopperVisible","EVENT_CODE","esc","filterable","checked","code","focusNode","target","lastTag","debounce","searchKeyword","passed","hideSuggestionPanel","val","watch"],"sources":["../../../../../../packages/components/cascader/src/cascader.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"[\n      'bottom-start',\n      'bottom',\n      'top-start',\n      'top',\n      'right',\n      'left',\n    ]\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    placement=\"bottom-start\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    persistent\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[cascaderPanelRef]=\"() => togglePopperVisible(false)\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"nsCascader.is('focus', popperVisible)\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" :class=\"nsCascader.e('tags')\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags.slice(1)\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"panel\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\">\n              <check />\n            </el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { isClient, useCssVar, useResizeObserver } from '@vueuse/core'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport {\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { debugWarn, focusNode, getSibling, isKorean } from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type {\n  CascaderNode,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\ntype cascaderPanelType = InstanceType<typeof ElCascaderPanel>\ntype tooltipType = InstanceType<typeof ElTooltip>\ntype inputType = InstanceType<typeof ElInput>\ntype suggestionPanelType = InstanceType<typeof ElScrollbar>\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { form, formItem } = useFormItem()\n\nconst tooltipRef: Ref<tooltipType | null> = ref(null)\nconst input: Ref<inputType | null> = ref(null)\nconst tagWrapper = ref(null)\nconst panel: Ref<cascaderPanelType | null> = ref(null)\nconst suggestionPanel: Ref<suggestionPanelType | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\nconst isOnComposition = ref(false)\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst isDisabled = computed(() => props.disabled || form?.disabled)\nconst inputPlaceholder = computed(\n  () => props.placeholder || t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value ||\n  presentTags.value.length > 0 ||\n  isOnComposition.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useSize()\nconst tagSize = computed(() =>\n  ['small'].includes(realSize.value) ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => panel.value?.checkedNodes || []\n)\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    !inputHover.value\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(CHANGE_EVENT, val)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderPanelRef = computed(() => {\n  return tooltipRef.value?.popperRef?.contentRef\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(panel.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\n\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  panel.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = checkedNodes.value\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    const [first, ...rest] = nodes\n    const restCount = rest.length\n\n    tags.push(genTag(first))\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = panel.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = panel.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = input.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return panel.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleComposition = (event: CompositionEvent) => {\n  const text = (event.target as HTMLInputElement)?.value\n  if (event.type === 'compositionend') {\n    isOnComposition.value = false\n    nextTick(() => handleInput(text))\n  } else {\n    const lastCharacter = text[text.length - 1] || ''\n    isOnComposition.value = !isKorean(lastCharacter)\n  }\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isOnComposition.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  panel.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    panel.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && panel.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFocus = (e: FocusEvent) => {\n  emit('focus', e)\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  emit('blur', e)\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nwatch(filtering, updatePopperPosition)\n\nwatch([checkedNodes, isDisabled], calculatePresentTags)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = input.value!.input!\n\n  const inputInnerHeight =\n    Number.parseFloat(\n      useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n    ) - 2\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}