{"ast":null,"code":"import { defineComponent, ref, computed, watch, nextTick, provide, reactive, onMounted, onUpdated, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, normalizeStyle, createBlock, resolveDynamicComponent, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport { isNumber, useResizeObserver, useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { GAP } from './util.mjs';\nimport Bar from './bar2.mjs';\nimport { scrollbarProps, scrollbarEmits } from './scrollbar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { isObject } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\nconst COMPONENT_NAME = \"ElScrollbar\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"scrollbar\");\n    let stopResizeObserver = void 0;\n    let stopResizeListener = void 0;\n    const scrollbarRef = ref();\n    const wrapRef = ref();\n    const resizeRef = ref();\n    const sizeWidth = ref(\"0\");\n    const sizeHeight = ref(\"0\");\n    const barRef = ref();\n    const ratioY = ref(1);\n    const ratioX = ref(1);\n    const style = computed(() => {\n      const style2 = {};\n      if (props.height) style2.height = addUnit(props.height);\n      if (props.maxHeight) style2.maxHeight = addUnit(props.maxHeight);\n      return [props.wrapStyle, style2];\n    });\n    const wrapKls = computed(() => {\n      return [props.wrapClass, ns.e(\"wrap\"), {\n        [ns.em(\"wrap\", \"hidden-default\")]: !props.native\n      }];\n    });\n    const resizeKls = computed(() => {\n      return [ns.e(\"view\"), props.viewClass];\n    });\n    const handleScroll = () => {\n      var _a;\n      if (wrapRef.value) {\n        (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrapRef.value);\n        emit(\"scroll\", {\n          scrollTop: wrapRef.value.scrollTop,\n          scrollLeft: wrapRef.value.scrollLeft\n        });\n      }\n    };\n    function scrollTo(arg1, arg2) {\n      if (isObject(arg1)) {\n        wrapRef.value.scrollTo(arg1);\n      } else if (isNumber(arg1) && isNumber(arg2)) {\n        wrapRef.value.scrollTo(arg1, arg2);\n      }\n    }\n    const setScrollTop = value => {\n      if (!isNumber(value)) {\n        debugWarn(COMPONENT_NAME, \"value must be a number\");\n        return;\n      }\n      wrapRef.value.scrollTop = value;\n    };\n    const setScrollLeft = value => {\n      if (!isNumber(value)) {\n        debugWarn(COMPONENT_NAME, \"value must be a number\");\n        return;\n      }\n      wrapRef.value.scrollLeft = value;\n    };\n    const update = () => {\n      if (!wrapRef.value) return;\n      const offsetHeight = wrapRef.value.offsetHeight - GAP;\n      const offsetWidth = wrapRef.value.offsetWidth - GAP;\n      const originalHeight = offsetHeight ** 2 / wrapRef.value.scrollHeight;\n      const originalWidth = offsetWidth ** 2 / wrapRef.value.scrollWidth;\n      const height = Math.max(originalHeight, props.minSize);\n      const width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : \"\";\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : \"\";\n    };\n    watch(() => props.noresize, noresize => {\n      if (noresize) {\n        stopResizeObserver == null ? void 0 : stopResizeObserver();\n        stopResizeListener == null ? void 0 : stopResizeListener();\n      } else {\n        ;\n        ({\n          stop: stopResizeObserver\n        } = useResizeObserver(resizeRef, update));\n        stopResizeListener = useEventListener(\"resize\", update);\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => [props.maxHeight, props.height], () => {\n      if (!props.native) nextTick(() => {\n        var _a;\n        update();\n        if (wrapRef.value) {\n          (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrapRef.value);\n        }\n      });\n    });\n    provide(scrollbarContextKey, reactive({\n      scrollbarElement: scrollbarRef,\n      wrapElement: wrapRef\n    }));\n    onMounted(() => {\n      if (!props.native) nextTick(() => {\n        update();\n      });\n    });\n    onUpdated(() => update());\n    expose({\n      wrapRef,\n      update,\n      scrollTo,\n      setScrollTop,\n      setScrollLeft,\n      handleScroll\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"scrollbarRef\",\n        ref: scrollbarRef,\n        class: normalizeClass(unref(ns).b())\n      }, [createElementVNode(\"div\", {\n        ref_key: \"wrapRef\",\n        ref: wrapRef,\n        class: normalizeClass(unref(wrapKls)),\n        style: normalizeStyle(unref(style)),\n        onScroll: handleScroll\n      }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        ref_key: \"resizeRef\",\n        ref: resizeRef,\n        class: normalizeClass(unref(resizeKls)),\n        style: normalizeStyle(_ctx.viewStyle)\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"class\", \"style\"]))], 38), !_ctx.native ? (openBlock(), createBlock(Bar, {\n        key: 0,\n        ref_key: \"barRef\",\n        ref: barRef,\n        height: sizeHeight.value,\n        width: sizeWidth.value,\n        always: _ctx.always,\n        \"ratio-x\": ratioX.value,\n        \"ratio-y\": ratioY.value\n      }, null, 8, [\"height\", \"width\", \"always\", \"ratio-x\", \"ratio-y\"])) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar Scrollbar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/scrollbar.vue\"]]);\nexport { Scrollbar as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;mCA+Cc;EACZA,IAAM;AACR;;;;;;;;;;IAKM,WAAKC,aAAa,WAAW;IAEnC,IAAIC,kBAA+C;IACnD,IAAIC,kBAA+C;IAEnD,MAAMC,eAAeC,GAAoB;IACzC,MAAMC,UAAUD,GAAoB;IACpC,MAAME,YAAYF,GAAiB;IAE7B,kBAAYA,IAAI,GAAG;IACnB,mBAAaA,IAAI,GAAG;IAC1B,MAAMG,SAASH,GAAiB;IAC1B,eAASA,IAAI,CAAC;IACd,eAASA,IAAI,CAAC;IAEd,cAAQI,SAAqB,MAAM;MACvC,MAAMC,SAAuB,EAAC;MAC9B,IAAIC,KAAM,SAAcD,gBAASE,OAAQ,OAAMC,MAAM;MACrD,IAAIF,KAAM,YAAiBD,mBAAYE,OAAQ,OAAME,SAAS;MACvD,QAACH,KAAM,YAAWD,MAAK;IAAA,CAC/B;IAEK,gBAAUD,SAAS,MAAM;MACtB,QACLE,KAAM,YACNI,GAAGC,EAAE,MAAM,GACX;QAAE,CAACD,EAAG,IAAG,QAAQ,gBAAgB,IAAI,CAACJ,MAAMM;MAAO,EACrD;IAAA,CACD;IAEK,kBAAYR,SAAS,MAAM;MAC/B,OAAO,CAACM,EAAG,GAAE,MAAM,GAAGJ,MAAMO,SAAS;IAAA,CACtC;IAED,MAAMC,eAAe,MAAM;MACzB,IAAIC;MACK,iBAAoB;QAE3B,MAAeZ;QACba,aAAW;UACXC,wBAA0B;UAC3BC;QAAA,CACH;MAAA;IAOF;IACM,sBAAgB;MACV;QAAoBjB,aACV,SAAI,CAAKkB;MAC3B,CAAQ,kBAAgB,kBAAU;QACpClB;MAAA;IAGF;IACM,kBAAU,GAAQmB;MACpB;QACAC;QACF;MACA;MACFpB;IAEA,CAAM;IACA,mBAAU,GAAQmB;MACpB;QACAC;QACF;MACA;MACFpB;IAEA;IACE,MAAIqB,MAAS;MAAO,oBACd;MACA,qBAAsBrB,aAAM,CAAcsB;MAEhD,MAAMC,WAAiB,4BAAoB,MAAQ;MACnD,MAAMC,cAAgB,mBAAmB,WAAc;MACvD,MAAMC,aAAS,GAASF,0BAA6B;MACrD,MAAMhB,MAAQ,OAAK,CAAImB,kBAAe,OAAa;MAEnD,WACE,yBACgB;MAElBC,OAAOR,KACL,qBACeG,8BACd,UAAuB;MAE1BM,YAAmB,gBAAS,IAAML,2BAA+B;MACjEM,UAAU,CAAQV,iBAAcW,kBAAc,GAAe;MAC/DC;IAEA;IAGIC,MAAI,MAAU3B;MACS;QACAT;QAChBC;MACL;QAAE;QACmB;UAAAoC;QAAA,qBAAiC;QACxDpC;MAAA;IAKJ;MAAAqC,SACS;IAAA;IAELF,MAAI,MAAO;MACT,WAASrB,MAAM,EACNwB;QACP,IAAIrB;QACKO;QACT;UACD;QAAA;MAIP;IAEW,EACP;IAAkBe,OACL;MAEjBC;MAEAC,WAAgB;IACd;IACEC,gBAAe;MACN,mBACTJ,QAAC;QACJd;MACD,CAAU;IAEV,CAAa;IAEXmB;IAEAC;MAEAzC;MAEAqB;MAEAqB;MAEAC;MACDC","names":["name","useNamespace","stopResizeObserver","stopResizeListener","scrollbarRef","ref","wrapRef","resizeRef","barRef","computed","style2","props","addUnit","height","maxHeight","ns","e","native","viewClass","handleScroll","_a","emit","scrollTop","scrollLeft","arg1","value","debugWarn","update","offsetHeight","offsetWidth","originalHeight","originalWidth","max","ratioY","ratioX","sizeHeight","GAP","sizeWidth","watch","stop","immediate","nextTick","provide","scrollbarElement","wrapElement","onMounted","onUpdated","expose","scrollTo","setScrollTop","setScrollLeft"],"sources":["../../../../../../packages/components/scrollbar/src/scrollbar.vue"],"sourcesContent":["<template>\n  <div ref=\"scrollbarRef\" :class=\"ns.b()\">\n    <div ref=\"wrapRef\" :class=\"wrapKls\" :style=\"style\" @scroll=\"handleScroll\">\n      <component\n        :is=\"tag\"\n        ref=\"resizeRef\"\n        :class=\"resizeKls\"\n        :style=\"viewStyle\"\n      >\n        <slot />\n      </component>\n    </div>\n    <template v-if=\"!native\">\n      <bar\n        ref=\"barRef\"\n        :height=\"sizeHeight\"\n        :width=\"sizeWidth\"\n        :always=\"always\"\n        :ratio-x=\"ratioX\"\n        :ratio-y=\"ratioY\"\n      />\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  onUpdated,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { useEventListener, useResizeObserver } from '@vueuse/core'\nimport { addUnit, debugWarn, isNumber, isObject } from '@element-plus/utils'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { GAP } from './util'\nimport Bar from './bar.vue'\nimport { scrollbarEmits, scrollbarProps } from './scrollbar'\nimport type { BarInstance } from './bar'\nimport type { CSSProperties, StyleValue } from 'vue'\n\nconst COMPONENT_NAME = 'ElScrollbar'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(scrollbarProps)\nconst emit = defineEmits(scrollbarEmits)\n\nconst ns = useNamespace('scrollbar')\n\nlet stopResizeObserver: (() => void) | undefined = undefined\nlet stopResizeListener: (() => void) | undefined = undefined\n\nconst scrollbarRef = ref<HTMLDivElement>()\nconst wrapRef = ref<HTMLDivElement>()\nconst resizeRef = ref<HTMLElement>()\n\nconst sizeWidth = ref('0')\nconst sizeHeight = ref('0')\nconst barRef = ref<BarInstance>()\nconst ratioY = ref(1)\nconst ratioX = ref(1)\n\nconst style = computed<StyleValue>(() => {\n  const style: CSSProperties = {}\n  if (props.height) style.height = addUnit(props.height)\n  if (props.maxHeight) style.maxHeight = addUnit(props.maxHeight)\n  return [props.wrapStyle, style]\n})\n\nconst wrapKls = computed(() => {\n  return [\n    props.wrapClass,\n    ns.e('wrap'),\n    { [ns.em('wrap', 'hidden-default')]: !props.native },\n  ]\n})\n\nconst resizeKls = computed(() => {\n  return [ns.e('view'), props.viewClass]\n})\n\nconst handleScroll = () => {\n  if (wrapRef.value) {\n    barRef.value?.handleScroll(wrapRef.value)\n\n    emit('scroll', {\n      scrollTop: wrapRef.value.scrollTop,\n      scrollLeft: wrapRef.value.scrollLeft,\n    })\n  }\n}\n\n// TODO: refactor method overrides, due to script setup dts\n// @ts-nocheck\nfunction scrollTo(xCord: number, yCord?: number): void\nfunction scrollTo(options: ScrollToOptions): void\nfunction scrollTo(arg1: unknown, arg2?: number) {\n  if (isObject(arg1)) {\n    wrapRef.value!.scrollTo(arg1)\n  } else if (isNumber(arg1) && isNumber(arg2)) {\n    wrapRef.value!.scrollTo(arg1, arg2)\n  }\n}\n\nconst setScrollTop = (value: number) => {\n  if (!isNumber(value)) {\n    debugWarn(COMPONENT_NAME, 'value must be a number')\n    return\n  }\n  wrapRef.value!.scrollTop = value\n}\n\nconst setScrollLeft = (value: number) => {\n  if (!isNumber(value)) {\n    debugWarn(COMPONENT_NAME, 'value must be a number')\n    return\n  }\n  wrapRef.value!.scrollLeft = value\n}\n\nconst update = () => {\n  if (!wrapRef.value) return\n  const offsetHeight = wrapRef.value.offsetHeight - GAP\n  const offsetWidth = wrapRef.value.offsetWidth - GAP\n\n  const originalHeight = offsetHeight ** 2 / wrapRef.value.scrollHeight\n  const originalWidth = offsetWidth ** 2 / wrapRef.value.scrollWidth\n  const height = Math.max(originalHeight, props.minSize)\n  const width = Math.max(originalWidth, props.minSize)\n\n  ratioY.value =\n    originalHeight /\n    (offsetHeight - originalHeight) /\n    (height / (offsetHeight - height))\n  ratioX.value =\n    originalWidth /\n    (offsetWidth - originalWidth) /\n    (width / (offsetWidth - width))\n\n  sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : ''\n  sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : ''\n}\n\nwatch(\n  () => props.noresize,\n  (noresize) => {\n    if (noresize) {\n      stopResizeObserver?.()\n      stopResizeListener?.()\n    } else {\n      ;({ stop: stopResizeObserver } = useResizeObserver(resizeRef, update))\n      stopResizeListener = useEventListener('resize', update)\n    }\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => [props.maxHeight, props.height],\n  () => {\n    if (!props.native)\n      nextTick(() => {\n        update()\n        if (wrapRef.value) {\n          barRef.value?.handleScroll(wrapRef.value)\n        }\n      })\n  }\n)\n\nprovide(\n  scrollbarContextKey,\n  reactive({\n    scrollbarElement: scrollbarRef,\n    wrapElement: wrapRef,\n  })\n)\n\nonMounted(() => {\n  if (!props.native)\n    nextTick(() => {\n      update()\n    })\n})\nonUpdated(() => update())\n\ndefineExpose({\n  /** @description scrollbar wrap ref */\n  wrapRef,\n  /** @description update scrollbar state manually */\n  update,\n  /** @description scrolls to a particular set of coordinates */\n  scrollTo,\n  /** @description set distance to scroll top */\n  setScrollTop,\n  /** @description set distance to scroll left */\n  setScrollLeft,\n  /** @description handle scroll event */\n  handleScroll,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}