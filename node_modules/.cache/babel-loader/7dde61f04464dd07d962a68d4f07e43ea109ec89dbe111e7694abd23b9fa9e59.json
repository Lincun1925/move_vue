{"ast":null,"code":"import { defineComponent, inject, watch, onBeforeUnmount, openBlock, createBlock, unref, withCtx, renderSlot, createElementBlock, mergeProps } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport ForwardRef from './forward-ref.mjs';\nimport { tooltipV2TriggerProps } from './trigger.mjs';\nimport { tooltipV2CommonProps } from './common.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tooltipV2RootKey } from '../../../tokens/tooltip-v2.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nconst __default__ = defineComponent({\n  name: \"ElTooltipV2Trigger\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: {\n    ...tooltipV2CommonProps,\n    ...tooltipV2TriggerProps\n  },\n  setup(__props) {\n    const props = __props;\n    const {\n      onClose,\n      onOpen,\n      onDelayOpen,\n      triggerRef,\n      contentId\n    } = inject(tooltipV2RootKey);\n    let isMousedown = false;\n    const setTriggerRef = el => {\n      triggerRef.value = el;\n    };\n    const onMouseup = () => {\n      isMousedown = false;\n    };\n    const onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen);\n    const onMouseleave = composeEventHandlers(props.onMouseLeave, onClose);\n    const onMousedown = composeEventHandlers(props.onMouseDown, () => {\n      onClose();\n      isMousedown = true;\n      document.addEventListener(\"mouseup\", onMouseup, {\n        once: true\n      });\n    });\n    const onFocus = composeEventHandlers(props.onFocus, () => {\n      if (!isMousedown) onOpen();\n    });\n    const onBlur = composeEventHandlers(props.onBlur, onClose);\n    const onClick = composeEventHandlers(props.onClick, e => {\n      if (e.detail === 0) onClose();\n    });\n    const events = {\n      blur: onBlur,\n      click: onClick,\n      focus: onFocus,\n      mousedown: onMousedown,\n      mouseenter: onMouseenter,\n      mouseleave: onMouseleave\n    };\n    const setEvents = (el, events2, type) => {\n      if (el) {\n        Object.entries(events2).forEach(([name, handler]) => {\n          el[type](name, handler);\n        });\n      }\n    };\n    watch(triggerRef, (triggerEl, previousTriggerEl) => {\n      setEvents(triggerEl, events, \"addEventListener\");\n      setEvents(previousTriggerEl, events, \"removeEventListener\");\n      if (triggerEl) {\n        triggerEl.setAttribute(\"aria-describedby\", contentId.value);\n      }\n    });\n    onBeforeUnmount(() => {\n      setEvents(triggerRef.value, events, \"removeEventListener\");\n      document.removeEventListener(\"mouseup\", onMouseup);\n    });\n    return (_ctx, _cache) => {\n      return _ctx.nowrap ? (openBlock(), createBlock(unref(ForwardRef), {\n        key: 0,\n        \"set-ref\": setTriggerRef,\n        \"only-child\": \"\"\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      })) : (openBlock(), createElementBlock(\"button\", mergeProps({\n        key: 1,\n        ref_key: \"triggerRef\",\n        ref: triggerRef\n      }, _ctx.$attrs), [renderSlot(_ctx.$slots, \"default\")], 16));\n    };\n  }\n});\nvar TooltipV2Trigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/trigger.vue\"]]);\nexport { TooltipV2Trigger as default };","map":{"version":3,"mappings":";;;;;;;;;mCAiBc;EACZA,IAAM;AACR;;;;;;;;;IAYA,MAAM;MAAEC,OAAS;MAAAC;MAAQC;MAAaC,UAAY;MAAAC;IAAA,IAChDC,OAAOC,gBAAgB;IAEzB,IAAIC,WAAc;IAEZ,sBAAiBC,EAA2B;MAChDL,WAAWM,KAAQ;IAAA,CACrB;IAEA,MAAMC,YAAY,MAAM;MACRH;IAAA,CAChB;IAEA,MAAMI,YAAe,wBAAqBC,KAAM,eAAcV,WAAW;IAEzE,MAAMW,YAAe,wBAAqBD,KAAM,eAAcZ,OAAO;IAErE,MAAMc,WAAc,wBAAqBF,KAAM,cAAa,MAAM;MACxDZ;MACMO;MACdQ,SAASC,iBAAiB,SAAW,aAAW;QAAEC,MAAM;MAAA,CAAM;IAAA,CAC/D;IAED,MAAMC,OAAU,wBAAqBN,KAAM,UAAS,MAAM;MACxD,IAAI,CAACL,aAAoBN;IAAA,CAC1B;IAED,MAAMkB,MAAS,wBAAqBP,KAAM,SAAQZ,OAAO;IAEzD,MAAMoB,OAAU,wBAAqBR,KAAM,UAAUS,CAAM;MACzD,IAAKA,EAAiBC,MAAW,QAAWtB;IAAA,CAC7C;IAED,MAAMuB,MAAS;MACbC,IAAM;MACNC,KAAO;MACPC,KAAO;MACPC,SAAW;MACXC,UAAY;MACZC,UAAY;IAAA,CACd;IAEA,MAAMC,SAAY,IAChBtB,EACA,WACAuB,IACG;MACH,IAAIvB,EAAI;QACNwB,OAAOC,QAAQC,OAAM,EAAEC,QAAQ,CAAC,CAACpC,MAAMqC,OAAa;UAC/C5B,SAAMT,MAAMqC,OAAO;QAAA,CACvB;MAAA;IACH,CACF;IAEMC,kBAAY,CAACC,WAAWC,iBAAsB;MACxCT,qBAAWP,QAAQ,kBAAkB;MACrCO,6BAAmBP,QAAQ,qBAAqB;MAE1D,IAAIe,SAAW;QACHA,uBAAa,kBAAoB,YAAU7B,KAAK;MAAA;IAC5D,CACD;IAED+B,gBAAgB,MAAM;MACVV,qBAAWrB,KAAO,UAAQ,qBAAqB;MAChDM,6BAAoB,WAAWL,SAAS;IAAA,CAClD","names":["name","onClose","onOpen","onDelayOpen","triggerRef","contentId","inject","tooltipV2RootKey","isMousedown","el","value","onMouseup","onMouseenter","props","onMouseleave","onMousedown","document","addEventListener","once","onFocus","onBlur","onClick","e","detail","events","blur","click","focus","mousedown","mouseenter","mouseleave","setEvents","type","Object","entries","events2","forEach","handler","watch","triggerEl","previousTriggerEl","onBeforeUnmount"],"sources":["../../../../../../packages/components/tooltip-v2/src/trigger.vue"],"sourcesContent":["<template>\n  <forward-ref v-if=\"nowrap\" :set-ref=\"setTriggerRef\" only-child>\n    <slot />\n  </forward-ref>\n  <button v-else ref=\"triggerRef\" v-bind=\"$attrs\">\n    <slot />\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, onBeforeUnmount, watch } from 'vue'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { tooltipV2RootKey } from '@element-plus/tokens'\nimport ForwardRef from './forward-ref'\nimport { tooltipV2TriggerProps } from './trigger'\nimport { tooltipV2CommonProps } from './common'\n\ndefineOptions({\n  name: 'ElTooltipV2Trigger',\n})\n\nconst props = defineProps({\n  ...tooltipV2CommonProps,\n  ...tooltipV2TriggerProps,\n})\n\n/**\n * onOpen opens the tooltip instantly, onTrigger acts a lil bit differently,\n * it will check if delayDuration is set to greater than 0 and based on that result,\n * if true, it opens the tooltip after delayDuration, otherwise it opens it instantly.\n */\nconst { onClose, onOpen, onDelayOpen, triggerRef, contentId } =\n  inject(tooltipV2RootKey)!\n\nlet isMousedown = false\n\nconst setTriggerRef = (el: HTMLElement | null) => {\n  triggerRef.value = el\n}\n\nconst onMouseup = () => {\n  isMousedown = false\n}\n\nconst onMouseenter = composeEventHandlers(props.onMouseEnter, onDelayOpen)\n\nconst onMouseleave = composeEventHandlers(props.onMouseLeave, onClose)\n\nconst onMousedown = composeEventHandlers(props.onMouseDown, () => {\n  onClose()\n  isMousedown = true\n  document.addEventListener('mouseup', onMouseup, { once: true })\n})\n\nconst onFocus = composeEventHandlers(props.onFocus, () => {\n  if (!isMousedown) onOpen()\n})\n\nconst onBlur = composeEventHandlers(props.onBlur, onClose)\n\nconst onClick = composeEventHandlers(props.onClick, (e) => {\n  if ((e as MouseEvent).detail === 0) onClose()\n})\n\nconst events = {\n  blur: onBlur,\n  click: onClick,\n  focus: onFocus,\n  mousedown: onMousedown,\n  mouseenter: onMouseenter,\n  mouseleave: onMouseleave,\n}\n\nconst setEvents = <T extends (e: Event) => void>(\n  el: HTMLElement | null | undefined,\n  events: Record<string, T>,\n  type: 'addEventListener' | 'removeEventListener'\n) => {\n  if (el) {\n    Object.entries(events).forEach(([name, handler]) => {\n      el[type](name, handler)\n    })\n  }\n}\n\nwatch(triggerRef, (triggerEl, previousTriggerEl) => {\n  setEvents(triggerEl, events, 'addEventListener')\n  setEvents(previousTriggerEl, events, 'removeEventListener')\n\n  if (triggerEl) {\n    triggerEl.setAttribute('aria-describedby', contentId.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  setEvents(triggerRef.value, events, 'removeEventListener')\n  document.removeEventListener('mouseup', onMouseup)\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}