{"ast":null,"code":"import { defineComponent, provide, reactive, toRef, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buttonGroupProps } from './button-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { buttonGroupContextKey } from '../../../tokens/button.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElButtonGroup\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: buttonGroupProps,\n  setup(__props) {\n    const props = __props;\n    provide(buttonGroupContextKey, reactive({\n      size: toRef(props, \"size\"),\n      type: toRef(props, \"type\")\n    }));\n    const ns = useNamespace(\"button\");\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(`${unref(ns).b(\"group\")}`)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nvar ButtonGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/button/src/button-group.vue\"]]);\nexport { ButtonGroup as default };","map":{"version":3,"mappings":";;;;;;;mCAWc;EACZA,IAAM;AACR;;;;;;IAEAC,QACEC,uBACAC,QAAS;MACPC,MAAMC,KAAM,QAAO,MAAM;MACzBC,MAAMD,KAAM,QAAO,MAAM;IAAA,CAC1B,CACH;IACM,WAAKE,aAAa,QAAQ","names":["name","provide","buttonGroupContextKey","reactive","size","toRef","type","useNamespace"],"sources":["../../../../../../packages/components/button/src/button-group.vue"],"sourcesContent":["<template>\n  <div :class=\"`${ns.b('group')}`\">\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { provide, reactive, toRef } from 'vue'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { buttonGroupProps } from './button-group'\n\ndefineOptions({\n  name: 'ElButtonGroup',\n})\nconst props = defineProps(buttonGroupProps)\nprovide(\n  buttonGroupContextKey,\n  reactive({\n    size: toRef(props, 'size'),\n    type: toRef(props, 'type'),\n  })\n)\nconst ns = useNamespace('button')\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}