{"ast":null,"code":"import { defineComponent, shallowRef, openBlock, createElementBlock, normalizeClass, unref, withKeys, withModifiers, createBlock, withCtx, renderSlot, createElementVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport UploadDragger from './upload-dragger2.mjs';\nimport { uploadContentProps } from './upload-content.mjs';\nimport { genFileId } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { entriesOf } from '../../../utils/objects.mjs';\nconst _hoisted_1 = [\"onKeydown\"];\nconst _hoisted_2 = [\"name\", \"multiple\", \"accept\"];\nconst __default__ = defineComponent({\n  name: \"ElUploadContent\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: uploadContentProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"upload\");\n    const disabled = useDisabled();\n    const requests = shallowRef({});\n    const inputRef = shallowRef();\n    const uploadFiles = files => {\n      if (files.length === 0) return;\n      const {\n        autoUpload,\n        limit,\n        fileList,\n        multiple,\n        onStart,\n        onExceed\n      } = props;\n      if (limit && fileList.length + files.length > limit) {\n        onExceed(files, fileList);\n        return;\n      }\n      if (!multiple) {\n        files = files.slice(0, 1);\n      }\n      for (const file of files) {\n        const rawFile = file;\n        rawFile.uid = genFileId();\n        onStart(rawFile);\n        if (autoUpload) upload(rawFile);\n      }\n    };\n    const upload = async rawFile => {\n      inputRef.value.value = \"\";\n      if (!props.beforeUpload) {\n        return doUpload(rawFile);\n      }\n      let hookResult;\n      try {\n        hookResult = await props.beforeUpload(rawFile);\n      } catch (e) {\n        hookResult = false;\n      }\n      if (hookResult === false) {\n        props.onRemove(rawFile);\n        return;\n      }\n      let file = rawFile;\n      if (hookResult instanceof Blob) {\n        if (hookResult instanceof File) {\n          file = hookResult;\n        } else {\n          file = new File([hookResult], rawFile.name, {\n            type: rawFile.type\n          });\n        }\n      }\n      doUpload(Object.assign(file, {\n        uid: rawFile.uid\n      }));\n    };\n    const doUpload = rawFile => {\n      const {\n        headers,\n        data,\n        method,\n        withCredentials,\n        name: filename,\n        action,\n        onProgress,\n        onSuccess,\n        onError,\n        httpRequest\n      } = props;\n      const {\n        uid\n      } = rawFile;\n      const options = {\n        headers: headers || {},\n        withCredentials,\n        file: rawFile,\n        data,\n        method,\n        filename,\n        action,\n        onProgress: evt => {\n          onProgress(evt, rawFile);\n        },\n        onSuccess: res => {\n          onSuccess(res, rawFile);\n          delete requests.value[uid];\n        },\n        onError: err => {\n          onError(err, rawFile);\n          delete requests.value[uid];\n        }\n      };\n      const request = httpRequest(options);\n      requests.value[uid] = request;\n      if (request instanceof Promise) {\n        request.then(options.onSuccess, options.onError);\n      }\n    };\n    const handleChange = e => {\n      const files = e.target.files;\n      if (!files) return;\n      uploadFiles(Array.from(files));\n    };\n    const handleClick = () => {\n      if (!disabled.value) {\n        inputRef.value.value = \"\";\n        inputRef.value.click();\n      }\n    };\n    const handleKeydown = () => {\n      handleClick();\n    };\n    const abort = file => {\n      const _reqs = entriesOf(requests.value).filter(file ? ([uid]) => String(file.uid) === uid : () => true);\n      _reqs.forEach(([uid, req]) => {\n        if (req instanceof XMLHttpRequest) req.abort();\n        delete requests.value[uid];\n      });\n    };\n    expose({\n      abort,\n      upload\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(_ctx.listType), unref(ns).is(\"drag\", _ctx.drag)]),\n        tabindex: \"0\",\n        onClick: handleClick,\n        onKeydown: withKeys(withModifiers(handleKeydown, [\"self\"]), [\"enter\", \"space\"])\n      }, [_ctx.drag ? (openBlock(), createBlock(UploadDragger, {\n        key: 0,\n        disabled: unref(disabled),\n        onFile: uploadFiles\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"disabled\"])) : renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      }), createElementVNode(\"input\", {\n        ref_key: \"inputRef\",\n        ref: inputRef,\n        class: normalizeClass(unref(ns).e(\"input\")),\n        name: _ctx.name,\n        multiple: _ctx.multiple,\n        accept: _ctx.accept,\n        type: \"file\",\n        onChange: handleChange,\n        onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n      }, null, 42, _hoisted_2)], 42, _hoisted_1);\n    };\n  }\n});\nvar UploadContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-content.vue\"]]);\nexport { UploadContent as default };","map":{"version":3,"mappings":"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","names":["name","inheritAttrs","useNamespace","disabled","useDisabled","shallowRef","inputRef","files","length","autoUpload","limit","fileList","multiple","onStart","onExceed","slice","file","rawFile","uid","genFileId","upload","value","props","beforeUpload","doUpload","hookResult","onRemove","Blob","File","type","assign","headers","data","method","withCredentials","action","onProgress","onSuccess","onError","httpRequest","options","filename","evt","res","requests","err","request","Promise","then","e","target","uploadFiles","from","handleClick","click","handleKeydown","_reqs","entriesOf","filter","String","forEach","req","abort","expose"],"sources":["../../../../../../packages/components/upload/src/upload-content.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), ns.m(listType), ns.is('drag', drag)]\"\n    tabindex=\"0\"\n    @click=\"handleClick\"\n    @keydown.self.enter.space=\"handleKeydown\"\n  >\n    <template v-if=\"drag\">\n      <upload-dragger :disabled=\"disabled\" @file=\"uploadFiles\">\n        <slot />\n      </upload-dragger>\n    </template>\n    <template v-else>\n      <slot />\n    </template>\n    <input\n      ref=\"inputRef\"\n      :class=\"ns.e('input')\"\n      :name=\"name\"\n      :multiple=\"multiple\"\n      :accept=\"accept\"\n      type=\"file\"\n      @change=\"handleChange\"\n      @click.stop\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { shallowRef } from 'vue'\nimport { useDisabled, useNamespace } from '@element-plus/hooks'\nimport { entriesOf } from '@element-plus/utils'\nimport UploadDragger from './upload-dragger.vue'\nimport { uploadContentProps } from './upload-content'\nimport { genFileId } from './upload'\n\nimport type {\n  UploadFile,\n  UploadHooks,\n  UploadRawFile,\n  UploadRequestOptions,\n} from './upload'\n\ndefineOptions({\n  name: 'ElUploadContent',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(uploadContentProps)\nconst ns = useNamespace('upload')\nconst disabled = useDisabled()\n\nconst requests = shallowRef<Record<string, XMLHttpRequest | Promise<unknown>>>(\n  {}\n)\nconst inputRef = shallowRef<HTMLInputElement>()\n\nconst uploadFiles = (files: File[]) => {\n  if (files.length === 0) return\n\n  const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props\n\n  if (limit && fileList.length + files.length > limit) {\n    onExceed(files, fileList)\n    return\n  }\n\n  if (!multiple) {\n    files = files.slice(0, 1)\n  }\n\n  for (const file of files) {\n    const rawFile = file as UploadRawFile\n    rawFile.uid = genFileId()\n    onStart(rawFile)\n    if (autoUpload) upload(rawFile)\n  }\n}\n\nconst upload = async (rawFile: UploadRawFile) => {\n  inputRef.value!.value = ''\n\n  if (!props.beforeUpload) {\n    return doUpload(rawFile)\n  }\n\n  let hookResult: Exclude<ReturnType<UploadHooks['beforeUpload']>, Promise<any>>\n  try {\n    hookResult = await props.beforeUpload(rawFile)\n  } catch {\n    hookResult = false\n  }\n\n  if (hookResult === false) {\n    props.onRemove(rawFile)\n    return\n  }\n\n  let file: File = rawFile\n  if (hookResult instanceof Blob) {\n    if (hookResult instanceof File) {\n      file = hookResult\n    } else {\n      file = new File([hookResult], rawFile.name, {\n        type: rawFile.type,\n      })\n    }\n  }\n\n  doUpload(\n    Object.assign(file, {\n      uid: rawFile.uid,\n    })\n  )\n}\n\nconst doUpload = (rawFile: UploadRawFile) => {\n  const {\n    headers,\n    data,\n    method,\n    withCredentials,\n    name: filename,\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    httpRequest,\n  } = props\n\n  const { uid } = rawFile\n  const options: UploadRequestOptions = {\n    headers: headers || {},\n    withCredentials,\n    file: rawFile,\n    data,\n    method,\n    filename,\n    action,\n    onProgress: (evt) => {\n      onProgress(evt, rawFile)\n    },\n    onSuccess: (res) => {\n      onSuccess(res, rawFile)\n      delete requests.value[uid]\n    },\n    onError: (err) => {\n      onError(err, rawFile)\n      delete requests.value[uid]\n    },\n  }\n  const request = httpRequest(options)\n  requests.value[uid] = request\n  if (request instanceof Promise) {\n    request.then(options.onSuccess, options.onError)\n  }\n}\n\nconst handleChange = (e: Event) => {\n  const files = (e.target as HTMLInputElement).files\n  if (!files) return\n  uploadFiles(Array.from(files))\n}\n\nconst handleClick = () => {\n  if (!disabled.value) {\n    inputRef.value!.value = ''\n    inputRef.value!.click()\n  }\n}\n\nconst handleKeydown = () => {\n  handleClick()\n}\n\nconst abort = (file?: UploadFile) => {\n  const _reqs = entriesOf(requests.value).filter(\n    file ? ([uid]) => String(file.uid) === uid : () => true\n  )\n  _reqs.forEach(([uid, req]) => {\n    if (req instanceof XMLHttpRequest) req.abort()\n    delete requests.value[uid]\n  })\n}\n\ndefineExpose({\n  abort,\n  upload,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}