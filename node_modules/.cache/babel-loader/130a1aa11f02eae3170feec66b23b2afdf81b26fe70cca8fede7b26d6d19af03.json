{"ast":null,"code":"import { defineComponent, ref, computed, unref, nextTick, onMounted, watch, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport '../../../../hooks/index.mjs';\nimport { timeUnits } from '../constants.mjs';\nimport { buildTimeList } from '../utils.mjs';\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner.mjs';\nimport { getTimeLists } from '../composables/use-time-picker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { vRepeatClick } from '../../../../directives/repeat-click/index.mjs';\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"time\");\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    let isScrolling = false;\n    const currentScrollbar = ref();\n    const listHoursRef = ref();\n    const listMinutesRef = ref();\n    const listSecondsRef = ref();\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = computed(() => {\n      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);\n    });\n    const timePartials = computed(() => {\n      const {\n        spinnerDate\n      } = props;\n      const hours = spinnerDate.hour();\n      const minutes = spinnerDate.minute();\n      const seconds = spinnerDate.second();\n      return {\n        hours,\n        minutes,\n        seconds\n      };\n    });\n    const timeList = computed(() => {\n      const {\n        hours,\n        minutes\n      } = unref(timePartials);\n      return {\n        hours: getHoursList(props.role),\n        minutes: getMinutesList(hours, props.role),\n        seconds: getSecondsList(hours, minutes, props.role)\n      };\n    });\n    const arrowControlTimeList = computed(() => {\n      const {\n        hours,\n        minutes,\n        seconds\n      } = unref(timePartials);\n      return {\n        hours: buildTimeList(hours, 23),\n        minutes: buildTimeList(minutes, 59),\n        seconds: buildTimeList(seconds, 59)\n      };\n    });\n    const debouncedResetScroll = debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n    const emitSelectRange = type => {\n      let range;\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n        case \"minutes\":\n          range = [3, 5];\n          break;\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n      const [left, right] = range;\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, unref(timePartials)[type]);\n    };\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n    const getScrollbarElement = el => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const scrollbar = unref(listRefsMap[type]);\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n    const typeItemHeight = type => {\n      const scrollbar = unref(listRefsMap[type]);\n      return (scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\").offsetHeight) || 0;\n    };\n    const onIncrement = () => {\n      scrollDown(1);\n    };\n    const onDecrement = () => {\n      scrollDown(-1);\n    };\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n      const label = currentScrollbar.value;\n      const now = unref(timePartials)[label];\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      const next = findNextUnDisabled(label, now, step, total);\n      modifyDateField(label, next);\n      adjustSpinner(label, next);\n      nextTick(() => emitSelectRange(label));\n    };\n    const findNextUnDisabled = (type, now, step, total) => {\n      let next = (now + step + total) % total;\n      const list = unref(timeList)[type];\n      while (list[next] && next !== now) {\n        next = (next + step + total) % total;\n      }\n      return next;\n    };\n    const modifyDateField = (type, value) => {\n      const list = unref(timeList)[type];\n      const isDisabled = list[value];\n      if (isDisabled) return;\n      const {\n        hours,\n        minutes,\n        seconds\n      } = unref(timePartials);\n      let changeTo;\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n      emit(\"change\", changeTo);\n    };\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((getScrollbarElement(unref(listRefsMap[type]).$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n    const scrollBarHeight = type => {\n      return unref(listRefsMap[type]).$el.offsetHeight;\n    };\n    const bindScrollEvent = () => {\n      const bindFunction = type => {\n        const scrollbar = unref(listRefsMap[type]);\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type].value = scrollbar;\n    };\n    emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(unref(spinnerItems), item => {\n        return openBlock(), createBlock(unref(ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: scrollbar => setRef(scrollbar, item),\n          class: normalizeClass(unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: $event => emitSelectRange(item),\n          onMousemove: $event => adjustCurrentSpinner(item)\n        }, {\n          default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], (disabled, key) => {\n            return openBlock(), createElementBlock(\"li\", {\n              key,\n              class: normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", key === unref(timePartials)[item]), unref(ns).is(\"disabled\", disabled)]),\n              onClick: $event => handleClick(item, {\n                value: key,\n                disabled\n              })\n            }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n              key: 0\n            }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n              key: 1\n            }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, _hoisted_1);\n          }), 128))]),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(unref(spinnerItems), item => {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item,\n          class: normalizeClass([unref(ns).be(\"spinner\", \"wrapper\"), unref(ns).is(\"arrow\")]),\n          onMouseenter: $event => emitSelectRange(item)\n        }, [withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          class: normalizeClass([\"arrow-up\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowUp))]),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onDecrement]]), withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          class: normalizeClass([\"arrow-down\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"])), [[unref(vRepeatClick), onIncrement]]), createElementVNode(\"ul\", {\n          class: normalizeClass(unref(ns).be(\"spinner\", \"list\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], (time, key) => {\n          return openBlock(), createElementBlock(\"li\", {\n            key,\n            class: normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", time === unref(timePartials)[item]), unref(ns).is(\"disabled\", unref(timeList)[item][time])])\n          }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, _hoisted_2);\n      }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\nexport { TimeSpinner as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAoGM,WAAKA,aAAa,MAAM;IAExB;MAAEC,YAAc;MAAAC;MAAgBC;IAAmB,iBACvDC,MAAMC,aACN,QAAMC,eACN,QAAMC,eACR;IAGA,IAAIC,WAAc;IAElB,MAAMC,mBAAmBC,GAAc;IACvC,MAAMC,eAAeD,GAAuB;IAC5C,MAAME,iBAAiBF,GAAuB;IAC9C,MAAMG,iBAAiBH,GAAuB;IAC9C,MAAMI,WAAoE;MACxEC,KAAO;MACPC,OAAS;MACTC,OAAS;IAAA,CACX;IAGM,qBAAeC,SAAS,MAAM;MAClC,OAAOd,MAAMe,WAAc,eAAYC,SAAU,OAAM,GAAG,CAAC;IAAA,CAC5D;IAEK,qBAAeF,SAAmC,MAAM;MAC5D,MAAM;QAAEG;MAAgB;MAClB,cAAQA,YAAYC,IAAK;MACzB,gBAAUD,YAAYE,MAAO;MAC7B,gBAAUF,YAAYG,MAAO;MAC5B;QAAET,KAAO;QAAAC;QAASC;MAAQ;IAAA,CAClC;IAEK,iBAAWC,SAAS,MAAM;MAC9B,MAAM;QAAEH;QAAOC;MAAY,UAAMS,YAAY;MACtC;QACLV,OAAOd,YAAa,OAAMyB,IAAI;QAC9BV,OAAS,iBAAeD,KAAO,QAAMW,IAAI;QACzCT,OAAS,iBAAeF,KAAO,WAASX,MAAMsB,IAAI;MAAA,CACpD;IAAA,CACD;IAEK,6BAAuBR,SAAqC,MAAM;MACtE,MAAM;QAAEH;QAAOC,OAAS;QAAAC;MAAA,IAAYU,MAAMF,YAAY;MAE/C;QACLV,OAAOa,aAAc,QAAO,EAAE;QAC9BZ,SAASY,aAAc,UAAS,EAAE;QAClCX,SAASW,aAAc,UAAS,EAAE;MAAA,CACpC;IAAA,CACD;IAEK,6BAAuBC,QAAS,CAACC,IAAS;MAChCtB;MACduB,qBAAqBD,IAAI;IAAA,GACxB,GAAG;IAEA,oBAAeR,IAAiB;MAC9B,uBAAiB,CAAC,CAAClB,KAAM;MAC/B,IAAI,CAAC4B,gBAAuB;MACtB,kBAAY5B,MAAM6B,QAAa;MAEjC,cAAUX,IAAO,QAAK,KAAQ;MAC9B,eAAWY,UAAUA,QAAQC,WAAY;MACtC;IAAA,CACT;IAEM,wBAAmBL,IAAmB;MACtC;MAEI;QACD;UACKM,SAAC,GAAG,CAAC;UACb;QACG;UACKA,SAAC,GAAG,CAAC;UACb;QACG;UACKA,SAAC,GAAG,CAAC;UACb;MAAA;MAEE,OAACC,MAAMC,KAAS;MAEjBC,qBAAgBF,MAAMC,KAAK;MAChC7B,iBAAiB+B,KAAQ;IAAA,CAC3B;IAEM,6BAAwBV,IAAmB;MAC/CW,cAAcX,IAAM,QAAML,YAAY,EAAEK,IAAK;IAAA,CAC/C;IAEA,MAAMY,iBAAiB,MAAM;MAC3BX,qBAAqB,OAAO;MAC5BA,qBAAqB,SAAS;MAC9BA,qBAAqB,SAAS;IAAA,CAChC;IAEM,4BAAuBY,EAC3B,OAAGC,cAAkB,OAAGC,UAAUL,KAAuB;IAErD,sBAAgB,CAACV,MAAgBU,KAAkB;MACvD,IAAIpC,KAAM,eAAc;MAClB,kBAAYuB,KAAM,aAAYG,IAAK;MACrC,iBAAagB,UAAUC,GAAK;QACVC,8BAAUD,GAAG,EAAEE,SAAY,QAAKC,IAClD,CACA,UAAQC,cAAe,KAAI,CAC7B;MAAA;IACF,CACF;IAEM,uBAAkBrB,IAA2B;MAC3C,kBAAYH,KAAM,aAAYG,IAAK;MACzC,OAAO,CAAWgB,iBAAkB,qBAAsB;IAAA,CAC5D;IAEA,MAAMM,cAAc,MAAM;MACxBC,WAAW,CAAC;IAAA,CACd;IAEA,MAAMC,cAAc,MAAM;MACxBD,WAAW,CAAE;IAAA,CACf;IAEM,mBAAcE,IAAiB;MAC/B,KAAC9C,iBAAiB+B,KAAO;QAC3BgB,gBAAgB,OAAO;MAAA;MAGzB,MAAMC,QAAQhD,gBAAiB;MACzB,YAAMkB,KAAM,aAAY,CAAE;MAChC,MAAM+B,KAAQ,oBAAiBlB,KAAU,eAAU,EAAK;MACxD,MAAMmB,IAAO,sBAAmBF,KAAO,OAAKF,MAAMG,KAAK;MAEvDE,gBAAgBH,OAAOE,IAAI;MAC3BlB,cAAcgB,OAAOE,IAAI;MAChBE,eAAML,eAAgB,MAAK,CAAC;IAAA,CACvC;IAEA,MAAMM,kBAAqB,IACzBhC,IACA,OACAyB,MACAG,KACG;MACC,WAAQ,CAAMK,aAAOL,KAAS;MAC5B,aAAO/B,KAAM,SAAQ,CAAE;MACtB,YAAKgC,IAAS,cAASI,GAAK;QACzBJ,eAAOJ,OAAOG,KAAS;MAAA;MAE1B;IAAA,CACT;IAEM,wBAAkB,CAAC5B,MAAgBU,KAAkB;MACnD,aAAOb,KAAM,SAAQ,CAAE;MAC7B,MAAMqC,aAAaC,IAAK;MACpB,gBAAY;MAEhB,MAAM;QAAElD;QAAOC,OAAS;QAAAC;MAAA,IAAYU,MAAMF,YAAY;MAElD;MACI;QACD;UACQyC,iBAAM7C,YAAYC,IAAK,MAAK,EAAEC,MAAO,QAAO,CAAE,QAAON,OAAO;UACvE;QACG;UACQiD,iBAAM7C,YAAYC,IAAK,MAAK,EAAEC,MAAO,MAAK,CAAE,QAAON,OAAO;UACrE;QACG;UACQiD,iBAAM7C,YAAYC,IAAK,MAAK,EAAEC,MAAO,QAAO,CAAE,QAAOiB,KAAK;UACrE;MAAA;MAEJD,KAAK,UAAU2B,QAAQ;IAAA,CACzB;IAEA,MAAMC,WAAc,IAClBrC,IACA;MAAEU;MAAO4B;IACN;MACH,IAAI,CAACA,QAAU;QACbR,gBAAgB9B,MAAMU,KAAK;QAC3BgB,gBAAgB1B,IAAI;QACpBW,cAAcX,MAAMU,KAAK;MAAA;IAC3B,CACF;IAEM,qBAAgBV,IAAmB;MACzBtB;MACd6D,qBAAqBvC,IAAI;MACzB,MAAMU,KAAQ,QAAK8B,GACjB,MAAKC,KACF,sBAAoB5C,KAAM,aAAYG,IAAK,GAAGiB,GAAG,EAAEE,SACjD,oBAAgBnB,IAAI,IAAI,GAAM,SAAMqB,cAAe,KAAI,CACxD,QACAA,cAAe,KAAI,CACvB,GACArB,IAAS,eAAU,KAAK,EAC1B;MACA8B,gBAAgB9B,MAAMU,KAAK;IAAA,CAC7B;IAEM,wBAAmBV,IAAmB;MAC1C,OAAOH,KAAM,aAAYG,IAAK,GAAGiB,GAAI;IAAA,CACvC;IAEA,MAAMyB,kBAAkB,MAAM;MACtB,qBAAgB1C,IAAmB;QACjC,kBAAYH,KAAM,aAAYG,IAAK;QACrC,iBAAagB,UAAUC,GAAK;UAC9BC,oBAAoBF,SAAU,IAAG,CAAE,YAAW,MAAM;YAGlD2B,aAAa3C,IAAI;UAAA,CACnB;QAAA;MACF,CACF;MACA4C,aAAa,OAAO;MACpBA,aAAa,SAAS;MACtBA,aAAa,SAAS;IAAA,CACxB;IAEAC,UAAU,MAAM;MACdd,SAAS,MAAM;QACZ,OAAMe,gBAAgBJ,eAAgB;QACxB9B;QAEf,IAAItC,MAAMsB,IAAS,cAAS8B,gBAAgB,OAAO;MAAA,CACpD;IAAA,CACF;IAEK,eAAS,CAACV,WAA8BhB,IAAmB;MAC/DhB,YAAYgB,MAAMU,KAAQ;IAAA,CAC5B;IAEAD,KAAK,cAAc,CAAC,GAAGnC,KAAM,oBAAmBiD,UAAU,CAAC;IAC3Dd,KAAK,cAAc,CAAC,GAAGnC,KAAM,yBAAwBoD,eAAe,CAAC;IAGnEqB,YAAMzE,KAAM,cACZ,MAAM;MACA,iBAAa;MACFsC;IAAA,CAEnB","names":["useNamespace","getHoursList","getMinutesList","getSecondsList","props","disabledHours","disabledMinutes","disabledSeconds","isScrolling","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","computed","showSeconds","timeUnits","spinnerDate","hour","minute","second","timePartials","role","unref","buildTimeList","debounce","type","adjustCurrentSpinner","shouldShowAmPm","amPmMode","content","toUpperCase","range","left","right","emit","value","adjustSpinner","adjustSpinners","el","querySelector","namespace","scrollbar","$el","getScrollbarElement","scrollTop","max","typeItemHeight","onIncrement","scrollDown","onDecrement","step","emitSelectRange","label","total","next","modifyDateField","nextTick","findNextUnDisabled","now","isDisabled","list","changeTo","handleClick","disabled","debouncedResetScroll","min","round","bindScrollEvent","handleScroll","bindFunction","onMounted","arrowControl","watch"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scrollbar: unknown) => setRef(scrollbar as any, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in timeList[item]\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartials[item]),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecrement\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncrement\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowControlTimeList[item]\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartials[item]),\n              ns.is('disabled', timeList[item][time!]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, unref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { vRepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { timeUnits } from '../constants'\nimport { buildTimeList } from '../utils'\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner'\nimport { getTimeLists } from '../composables/use-time-picker'\n\nimport type { Ref } from 'vue'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type { TimeUnit } from '../constants'\nimport type { TimeList } from '../utils'\n\nconst props = defineProps(basicTimeSpinnerProps)\nconst emit = defineEmits(['change', 'select-range', 'set-option'])\n\nconst ns = useNamespace('time')\n\nconst { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n  props.disabledHours,\n  props.disabledMinutes,\n  props.disabledSeconds\n)\n\n// data\nlet isScrolling = false\n\nconst currentScrollbar = ref<TimeUnit>()\nconst listHoursRef = ref<ScrollbarInstance>()\nconst listMinutesRef = ref<ScrollbarInstance>()\nconst listSecondsRef = ref<ScrollbarInstance>()\nconst listRefsMap: Record<TimeUnit, Ref<ScrollbarInstance | undefined>> = {\n  hours: listHoursRef,\n  minutes: listMinutesRef,\n  seconds: listSecondsRef,\n}\n\n// computed\nconst spinnerItems = computed(() => {\n  return props.showSeconds ? timeUnits : timeUnits.slice(0, 2)\n})\n\nconst timePartials = computed<Record<TimeUnit, number>>(() => {\n  const { spinnerDate } = props\n  const hours = spinnerDate.hour()\n  const minutes = spinnerDate.minute()\n  const seconds = spinnerDate.second()\n  return { hours, minutes, seconds }\n})\n\nconst timeList = computed(() => {\n  const { hours, minutes } = unref(timePartials)\n  return {\n    hours: getHoursList(props.role),\n    minutes: getMinutesList(hours, props.role),\n    seconds: getSecondsList(hours, minutes, props.role),\n  }\n})\n\nconst arrowControlTimeList = computed<Record<TimeUnit, TimeList>>(() => {\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  return {\n    hours: buildTimeList(hours, 23),\n    minutes: buildTimeList(minutes, 59),\n    seconds: buildTimeList(seconds, 59),\n  }\n})\n\nconst debouncedResetScroll = debounce((type) => {\n  isScrolling = false\n  adjustCurrentSpinner(type)\n}, 200)\n\nconst getAmPmFlag = (hour: number) => {\n  const shouldShowAmPm = !!props.amPmMode\n  if (!shouldShowAmPm) return ''\n  const isCapital = props.amPmMode === 'A'\n  // todo locale\n  let content = hour < 12 ? ' am' : ' pm'\n  if (isCapital) content = content.toUpperCase()\n  return content\n}\n\nconst emitSelectRange = (type: TimeUnit) => {\n  let range\n\n  switch (type) {\n    case 'hours':\n      range = [0, 2]\n      break\n    case 'minutes':\n      range = [3, 5]\n      break\n    case 'seconds':\n      range = [6, 8]\n      break\n  }\n  const [left, right] = range\n\n  emit('select-range', left, right)\n  currentScrollbar.value = type\n}\n\nconst adjustCurrentSpinner = (type: TimeUnit) => {\n  adjustSpinner(type, unref(timePartials)[type])\n}\n\nconst adjustSpinners = () => {\n  adjustCurrentSpinner('hours')\n  adjustCurrentSpinner('minutes')\n  adjustCurrentSpinner('seconds')\n}\n\nconst getScrollbarElement = (el: HTMLElement) =>\n  el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\nconst adjustSpinner = (type: TimeUnit, value: number) => {\n  if (props.arrowControl) return\n  const scrollbar = unref(listRefsMap[type])\n  if (scrollbar && scrollbar.$el) {\n    getScrollbarElement(scrollbar.$el).scrollTop = Math.max(\n      0,\n      value * typeItemHeight(type)\n    )\n  }\n}\n\nconst typeItemHeight = (type: TimeUnit): number => {\n  const scrollbar = unref(listRefsMap[type])\n  return scrollbar?.$el.querySelector('li').offsetHeight || 0\n}\n\nconst onIncrement = () => {\n  scrollDown(1)\n}\n\nconst onDecrement = () => {\n  scrollDown(-1)\n}\n\nconst scrollDown = (step: number) => {\n  if (!currentScrollbar.value) {\n    emitSelectRange('hours')\n  }\n\n  const label = currentScrollbar.value!\n  const now = unref(timePartials)[label]\n  const total = currentScrollbar.value === 'hours' ? 24 : 60\n  const next = findNextUnDisabled(label, now, step, total)\n\n  modifyDateField(label, next)\n  adjustSpinner(label, next)\n  nextTick(() => emitSelectRange(label))\n}\n\nconst findNextUnDisabled = (\n  type: TimeUnit,\n  now: number,\n  step: number,\n  total: number\n) => {\n  let next = (now + step + total) % total\n  const list = unref(timeList)[type]\n  while (list[next] && next !== now) {\n    next = (next + step + total) % total\n  }\n  return next\n}\n\nconst modifyDateField = (type: TimeUnit, value: number) => {\n  const list = unref(timeList)[type]\n  const isDisabled = list[value]\n  if (isDisabled) return\n\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  let changeTo\n  switch (type) {\n    case 'hours':\n      changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds)\n      break\n    case 'minutes':\n      changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds)\n      break\n    case 'seconds':\n      changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value)\n      break\n  }\n  emit('change', changeTo)\n}\n\nconst handleClick = (\n  type: TimeUnit,\n  { value, disabled }: { value: number; disabled: boolean }\n) => {\n  if (!disabled) {\n    modifyDateField(type, value)\n    emitSelectRange(type)\n    adjustSpinner(type, value)\n  }\n}\n\nconst handleScroll = (type: TimeUnit) => {\n  isScrolling = true\n  debouncedResetScroll(type)\n  const value = Math.min(\n    Math.round(\n      (getScrollbarElement(unref(listRefsMap[type])!.$el).scrollTop -\n        (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n        3) /\n        typeItemHeight(type)\n    ),\n    type === 'hours' ? 23 : 59\n  )\n  modifyDateField(type, value)\n}\n\nconst scrollBarHeight = (type: TimeUnit) => {\n  return unref(listRefsMap[type])!.$el.offsetHeight\n}\n\nconst bindScrollEvent = () => {\n  const bindFunction = (type: TimeUnit) => {\n    const scrollbar = unref(listRefsMap[type])\n    if (scrollbar && scrollbar.$el) {\n      getScrollbarElement(scrollbar.$el).onscroll = () => {\n        // TODO: scroll is emitted when set scrollTop programmatically\n        // should find better solutions in the future!\n        handleScroll(type)\n      }\n    }\n  }\n  bindFunction('hours')\n  bindFunction('minutes')\n  bindFunction('seconds')\n}\n\nonMounted(() => {\n  nextTick(() => {\n    !props.arrowControl && bindScrollEvent()\n    adjustSpinners()\n    // set selection on the first hour part\n    if (props.role === 'start') emitSelectRange('hours')\n  })\n})\n\nconst setRef = (scrollbar: ScrollbarInstance, type: TimeUnit) => {\n  listRefsMap[type].value = scrollbar\n}\n\nemit('set-option', [`${props.role}_scrollDown`, scrollDown])\nemit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\nwatch(\n  () => props.spinnerDate,\n  () => {\n    if (isScrolling) return\n    adjustSpinners()\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}