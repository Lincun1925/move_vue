{"ast":null,"code":"import { defineComponent, getCurrentInstance, shallowRef, ref, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { draggable } from '../utils/draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElColorAlphaSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const ns = useNamespace(\"color-alpha-slider\");\n    const instance = getCurrentInstance();\n    const thumb = shallowRef();\n    const bar = shallowRef();\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const background = ref();\n    watch(() => props.color.get(\"alpha\"), () => {\n      update();\n    });\n    watch(() => props.color.value, () => {\n      update();\n    });\n    function getThumbLeft() {\n      if (!thumb.value) return 0;\n      if (props.vertical) return 0;\n      const el = instance.vnode.el;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n    }\n    function getThumbTop() {\n      if (!thumb.value) return 0;\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n    }\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const {\n          r,\n          g,\n          b\n        } = props.color.toRgb();\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;\n      }\n      return \"\";\n    }\n    function handleClick(event) {\n      const target = event.target;\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n    function handleDrag(event) {\n      if (!bar.value || !thumb.value) return;\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n      } else {\n        let top = clientY - rect.top;\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n      }\n    }\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n      background.value = getBackground();\n    }\n    onMounted(() => {\n      if (!bar.value || !thumb.value) return;\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update,\n      ns\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"vertical\", _ctx.vertical)])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: normalizeClass(_ctx.ns.e(\"bar\")),\n    style: normalizeStyle({\n      background: _ctx.background\n    }),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 6), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: normalizeClass(_ctx.ns.e(\"thumb\")),\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 6)], 2);\n}\nvar AlphaSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/alpha-slider.vue\"]]);\nexport { AlphaSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","default","setup","useNamespace","instance","getCurrentInstance","thumb","shallowRef","bar","ref","background","watch","get","update","vnode","alpha","el","round","offsetWidth","offsetHeight","value","r","g","b","toRgb","event","target","handleDrag","getBoundingClientRect","clientX","clientY","rect","left","Math","max","min","width","set","top","height","thumbLeft","getThumbLeft","thumbTop","getThumbTop","getBackground","onMounted","dragConfig","drag","end","draggable","handleClick","ns","_createElementBlock","class","_normalizeClass","_ctx","_createElementVNode","e","style","onClick","_cache"],"sources":["../../../../../../../packages/components/color-picker/src/components/alpha-slider.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('vertical', vertical)]\">\n    <div\n      ref=\"bar\"\n      :class=\"ns.e('bar')\"\n      :style=\"{\n        background,\n      }\"\n      @click=\"handleClick\"\n    />\n    <div\n      ref=\"thumb\"\n      :class=\"ns.e('thumb')\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  shallowRef,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { draggable } from '../utils/draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../utils/color'\n\nexport default defineComponent({\n  name: 'ElColorAlphaSlider',\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-alpha-slider')\n\n    const instance = getCurrentInstance()!\n    // ref\n    const thumb = shallowRef<HTMLElement>()\n    const bar = shallowRef<HTMLElement>()\n\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    const background = ref<string>()\n\n    watch(\n      () => props.color.get('alpha'),\n      () => {\n        update()\n      }\n    )\n    watch(\n      () => props.color.value,\n      () => {\n        update()\n      }\n    )\n\n    //methods\n    function getThumbLeft() {\n      if (!thumb.value) return 0\n\n      if (props.vertical) return 0\n      const el = instance.vnode.el\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 100\n      )\n    }\n\n    function getThumbTop() {\n      if (!thumb.value) return 0\n\n      const el = instance.vnode.el\n      if (!props.vertical) return 0\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 100\n      )\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const { r, g, b } = props.color.toRgb()\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`\n      }\n      return ''\n    }\n\n    function handleClick(event: MouseEvent | TouchEvent) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event: MouseEvent | TouchEvent) {\n      if (!bar.value || !thumb.value) return\n\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((left - thumb.value.offsetWidth / 2) /\n              (rect.width - thumb.value.offsetWidth)) *\n              100\n          )\n        )\n      } else {\n        let top = clientY - rect.top\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((top - thumb.value.offsetHeight / 2) /\n              (rect.height - thumb.value.offsetHeight)) *\n              100\n          )\n        )\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n      background.value = getBackground()\n    }\n\n    // mounded\n    onMounted(() => {\n      if (!bar.value || !thumb.value) return\n\n      const dragConfig = {\n        drag: (event: MouseEvent | TouchEvent) => {\n          handleDrag(event)\n        },\n        end: (event: MouseEvent | TouchEvent) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}