{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, computed, watchEffect, openBlock, createElementBlock, normalizeClass, unref, withKeys, createCommentVNode, createBlock, Fragment, renderList, toDisplayString } from 'vue';\nimport { DArrowLeft, MoreFilled, DArrowRight } from '@element-plus/icons-vue';\nimport '../../../../hooks/index.mjs';\nimport { paginationPagerProps } from './pager.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nconst _hoisted_1 = [\"onKeyup\"];\nconst _hoisted_2 = [\"aria-current\", \"tabindex\"];\nconst _hoisted_3 = [\"tabindex\"];\nconst _hoisted_4 = [\"aria-current\", \"tabindex\"];\nconst _hoisted_5 = [\"tabindex\"];\nconst _hoisted_6 = [\"aria-current\", \"tabindex\"];\nconst __default__ = defineComponent({\n  name: \"ElPaginationPager\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: paginationPagerProps,\n  emits: [\"change\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const nsPager = useNamespace(\"pager\");\n    const nsIcon = useNamespace(\"icon\");\n    const showPrevMore = ref(false);\n    const showNextMore = ref(false);\n    const quickPrevHover = ref(false);\n    const quickNextHover = ref(false);\n    const quickPrevFocus = ref(false);\n    const quickNextFocus = ref(false);\n    const pagers = computed(() => {\n      const pagerCount = props.pagerCount;\n      const halfPagerCount = (pagerCount - 1) / 2;\n      const currentPage = Number(props.currentPage);\n      const pageCount = Number(props.pageCount);\n      let showPrevMore2 = false;\n      let showNextMore2 = false;\n      if (pageCount > pagerCount) {\n        if (currentPage > pagerCount - halfPagerCount) {\n          showPrevMore2 = true;\n        }\n        if (currentPage < pageCount - halfPagerCount) {\n          showNextMore2 = true;\n        }\n      }\n      const array = [];\n      if (showPrevMore2 && !showNextMore2) {\n        const startPage = pageCount - (pagerCount - 2);\n        for (let i = startPage; i < pageCount; i++) {\n          array.push(i);\n        }\n      } else if (!showPrevMore2 && showNextMore2) {\n        for (let i = 2; i < pagerCount; i++) {\n          array.push(i);\n        }\n      } else if (showPrevMore2 && showNextMore2) {\n        const offset = Math.floor(pagerCount / 2) - 1;\n        for (let i = currentPage - offset; i <= currentPage + offset; i++) {\n          array.push(i);\n        }\n      } else {\n        for (let i = 2; i < pageCount; i++) {\n          array.push(i);\n        }\n      }\n      return array;\n    });\n    const tabindex = computed(() => props.disabled ? -1 : 0);\n    watchEffect(() => {\n      const halfPagerCount = (props.pagerCount - 1) / 2;\n      showPrevMore.value = false;\n      showNextMore.value = false;\n      if (props.pageCount > props.pagerCount) {\n        if (props.currentPage > props.pagerCount - halfPagerCount) {\n          showPrevMore.value = true;\n        }\n        if (props.currentPage < props.pageCount - halfPagerCount) {\n          showNextMore.value = true;\n        }\n      }\n    });\n    function onMouseEnter(forward = false) {\n      if (props.disabled) return;\n      if (forward) {\n        quickPrevHover.value = true;\n      } else {\n        quickNextHover.value = true;\n      }\n    }\n    function onFocus(forward = false) {\n      if (forward) {\n        quickPrevFocus.value = true;\n      } else {\n        quickNextFocus.value = true;\n      }\n    }\n    function onEnter(e) {\n      const target = e.target;\n      if (target.tagName.toLowerCase() === \"li\" && Array.from(target.classList).includes(\"number\")) {\n        const newPage = Number(target.textContent);\n        if (newPage !== props.currentPage) {\n          emit(\"change\", newPage);\n        }\n      } else if (target.tagName.toLowerCase() === \"li\" && Array.from(target.classList).includes(\"more\")) {\n        onPagerClick(e);\n      }\n    }\n    function onPagerClick(event) {\n      const target = event.target;\n      if (target.tagName.toLowerCase() === \"ul\" || props.disabled) {\n        return;\n      }\n      let newPage = Number(target.textContent);\n      const pageCount = props.pageCount;\n      const currentPage = props.currentPage;\n      const pagerCountOffset = props.pagerCount - 2;\n      if (target.className.includes(\"more\")) {\n        if (target.className.includes(\"quickprev\")) {\n          newPage = currentPage - pagerCountOffset;\n        } else if (target.className.includes(\"quicknext\")) {\n          newPage = currentPage + pagerCountOffset;\n        }\n      }\n      if (!Number.isNaN(+newPage)) {\n        if (newPage < 1) {\n          newPage = 1;\n        }\n        if (newPage > pageCount) {\n          newPage = pageCount;\n        }\n      }\n      if (newPage !== currentPage) {\n        emit(\"change\", newPage);\n      }\n    }\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"ul\", {\n        class: normalizeClass(unref(nsPager).b()),\n        onClick: onPagerClick,\n        onKeyup: withKeys(onEnter, [\"enter\"])\n      }, [_ctx.pageCount > 0 ? (openBlock(), createElementBlock(\"li\", {\n        key: 0,\n        class: normalizeClass([[unref(nsPager).is(\"active\", _ctx.currentPage === 1), unref(nsPager).is(\"disabled\", _ctx.disabled)], \"number\"]),\n        \"aria-current\": _ctx.currentPage === 1,\n        tabindex: unref(tabindex)\n      }, \" 1 \", 10, _hoisted_2)) : createCommentVNode(\"v-if\", true), showPrevMore.value ? (openBlock(), createElementBlock(\"li\", {\n        key: 1,\n        class: normalizeClass([\"more\", \"btn-quickprev\", unref(nsIcon).b(), unref(nsPager).is(\"disabled\", _ctx.disabled)]),\n        tabindex: unref(tabindex),\n        onMouseenter: _cache[0] || (_cache[0] = $event => onMouseEnter(true)),\n        onMouseleave: _cache[1] || (_cache[1] = $event => quickPrevHover.value = false),\n        onFocus: _cache[2] || (_cache[2] = $event => onFocus(true)),\n        onBlur: _cache[3] || (_cache[3] = $event => quickPrevFocus.value = false)\n      }, [(quickPrevHover.value || quickPrevFocus.value) && !_ctx.disabled ? (openBlock(), createBlock(unref(DArrowLeft), {\n        key: 0\n      })) : (openBlock(), createBlock(unref(MoreFilled), {\n        key: 1\n      }))], 42, _hoisted_3)) : createCommentVNode(\"v-if\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(pagers), pager => {\n        return openBlock(), createElementBlock(\"li\", {\n          key: pager,\n          class: normalizeClass([[unref(nsPager).is(\"active\", _ctx.currentPage === pager), unref(nsPager).is(\"disabled\", _ctx.disabled)], \"number\"]),\n          \"aria-current\": _ctx.currentPage === pager,\n          tabindex: unref(tabindex)\n        }, toDisplayString(pager), 11, _hoisted_4);\n      }), 128)), showNextMore.value ? (openBlock(), createElementBlock(\"li\", {\n        key: 2,\n        class: normalizeClass([\"more\", \"btn-quicknext\", unref(nsIcon).b(), unref(nsPager).is(\"disabled\", _ctx.disabled)]),\n        tabindex: unref(tabindex),\n        onMouseenter: _cache[4] || (_cache[4] = $event => onMouseEnter()),\n        onMouseleave: _cache[5] || (_cache[5] = $event => quickNextHover.value = false),\n        onFocus: _cache[6] || (_cache[6] = $event => onFocus()),\n        onBlur: _cache[7] || (_cache[7] = $event => quickNextFocus.value = false)\n      }, [(quickNextHover.value || quickNextFocus.value) && !_ctx.disabled ? (openBlock(), createBlock(unref(DArrowRight), {\n        key: 0\n      })) : (openBlock(), createBlock(unref(MoreFilled), {\n        key: 1\n      }))], 42, _hoisted_5)) : createCommentVNode(\"v-if\", true), _ctx.pageCount > 1 ? (openBlock(), createElementBlock(\"li\", {\n        key: 3,\n        class: normalizeClass([[unref(nsPager).is(\"active\", _ctx.currentPage === _ctx.pageCount), unref(nsPager).is(\"disabled\", _ctx.disabled)], \"number\"]),\n        \"aria-current\": _ctx.currentPage === _ctx.pageCount,\n        tabindex: unref(tabindex)\n      }, toDisplayString(_ctx.pageCount), 11, _hoisted_6)) : createCommentVNode(\"v-if\", true)], 42, _hoisted_1);\n    };\n  }\n});\nvar Pager = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/pager.vue\"]]);\nexport { Pager as default };","map":{"version":3,"mappings":"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","names":["name","useNamespace","ref","computed","pagerCount","props","Number","currentPage","pageCount","showPrevMore2","showNextMore2","halfPagerCount","array","i","push","offset","floor","tabindex","watchEffect","showPrevMore","value","showNextMore","forward","quickPrevHover","quickNextHover","quickPrevFocus","quickNextFocus","e","target","toLowerCase","from","classList","includes","textContent","emit","newPage","tagName","Array","onPagerClick","event","disabled","className","isNaN"],"sources":["../../../../../../../packages/components/pagination/src/components/pager.vue"],"sourcesContent":["<template>\n  <ul :class=\"nsPager.b()\" @click=\"onPagerClick\" @keyup.enter=\"onEnter\">\n    <li\n      v-if=\"pageCount > 0\"\n      :class=\"[\n        nsPager.is('active', currentPage === 1),\n        nsPager.is('disabled', disabled),\n      ]\"\n      class=\"number\"\n      :aria-current=\"currentPage === 1\"\n      :tabindex=\"tabindex\"\n    >\n      1\n    </li>\n    <li\n      v-if=\"showPrevMore\"\n      :class=\"[\n        'more',\n        'btn-quickprev',\n        nsIcon.b(),\n        nsPager.is('disabled', disabled),\n      ]\"\n      :tabindex=\"tabindex\"\n      @mouseenter=\"onMouseEnter(true)\"\n      @mouseleave=\"quickPrevHover = false\"\n      @focus=\"onFocus(true)\"\n      @blur=\"quickPrevFocus = false\"\n    >\n      <d-arrow-left v-if=\"(quickPrevHover || quickPrevFocus) && !disabled\" />\n      <more-filled v-else />\n    </li>\n    <li\n      v-for=\"pager in pagers\"\n      :key=\"pager\"\n      :class=\"[\n        nsPager.is('active', currentPage === pager),\n        nsPager.is('disabled', disabled),\n      ]\"\n      class=\"number\"\n      :aria-current=\"currentPage === pager\"\n      :tabindex=\"tabindex\"\n    >\n      {{ pager }}\n    </li>\n    <li\n      v-if=\"showNextMore\"\n      :class=\"[\n        'more',\n        'btn-quicknext',\n        nsIcon.b(),\n        nsPager.is('disabled', disabled),\n      ]\"\n      :tabindex=\"tabindex\"\n      @mouseenter=\"onMouseEnter()\"\n      @mouseleave=\"quickNextHover = false\"\n      @focus=\"onFocus()\"\n      @blur=\"quickNextFocus = false\"\n    >\n      <d-arrow-right v-if=\"(quickNextHover || quickNextFocus) && !disabled\" />\n      <more-filled v-else />\n    </li>\n    <li\n      v-if=\"pageCount > 1\"\n      :class=\"[\n        nsPager.is('active', currentPage === pageCount),\n        nsPager.is('disabled', disabled),\n      ]\"\n      class=\"number\"\n      :aria-current=\"currentPage === pageCount\"\n      :tabindex=\"tabindex\"\n    >\n      {{ pageCount }}\n    </li>\n  </ul>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, ref, watchEffect } from 'vue'\nimport { DArrowLeft, DArrowRight, MoreFilled } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { paginationPagerProps } from './pager'\ndefineOptions({\n  name: 'ElPaginationPager',\n})\nconst props = defineProps(paginationPagerProps)\nconst emit = defineEmits(['change'])\nconst nsPager = useNamespace('pager')\nconst nsIcon = useNamespace('icon')\nconst showPrevMore = ref(false)\nconst showNextMore = ref(false)\nconst quickPrevHover = ref(false)\nconst quickNextHover = ref(false)\nconst quickPrevFocus = ref(false)\nconst quickNextFocus = ref(false)\nconst pagers = computed(() => {\n  const pagerCount = props.pagerCount\n  const halfPagerCount = (pagerCount - 1) / 2\n  const currentPage = Number(props.currentPage)\n  const pageCount = Number(props.pageCount)\n  let showPrevMore = false\n  let showNextMore = false\n  if (pageCount > pagerCount) {\n    if (currentPage > pagerCount - halfPagerCount) {\n      showPrevMore = true\n    }\n    if (currentPage < pageCount - halfPagerCount) {\n      showNextMore = true\n    }\n  }\n  const array: number[] = []\n  if (showPrevMore && !showNextMore) {\n    const startPage = pageCount - (pagerCount - 2)\n    for (let i = startPage; i < pageCount; i++) {\n      array.push(i)\n    }\n  } else if (!showPrevMore && showNextMore) {\n    for (let i = 2; i < pagerCount; i++) {\n      array.push(i)\n    }\n  } else if (showPrevMore && showNextMore) {\n    const offset = Math.floor(pagerCount / 2) - 1\n    for (let i = currentPage - offset; i <= currentPage + offset; i++) {\n      array.push(i)\n    }\n  } else {\n    for (let i = 2; i < pageCount; i++) {\n      array.push(i)\n    }\n  }\n  return array\n})\nconst tabindex = computed(() => (props.disabled ? -1 : 0))\nwatchEffect(() => {\n  const halfPagerCount = (props.pagerCount - 1) / 2\n  showPrevMore.value = false\n  showNextMore.value = false\n  if (props.pageCount! > props.pagerCount) {\n    if (props.currentPage > props.pagerCount - halfPagerCount) {\n      showPrevMore.value = true\n    }\n    if (props.currentPage < props.pageCount! - halfPagerCount) {\n      showNextMore.value = true\n    }\n  }\n})\nfunction onMouseEnter(forward = false) {\n  if (props.disabled) return\n  if (forward) {\n    quickPrevHover.value = true\n  } else {\n    quickNextHover.value = true\n  }\n}\nfunction onFocus(forward = false) {\n  if (forward) {\n    quickPrevFocus.value = true\n  } else {\n    quickNextFocus.value = true\n  }\n}\nfunction onEnter(e: UIEvent) {\n  const target = e.target as HTMLElement\n  if (\n    target.tagName.toLowerCase() === 'li' &&\n    Array.from(target.classList).includes('number')\n  ) {\n    const newPage = Number(target.textContent)\n    if (newPage !== props.currentPage) {\n      emit('change', newPage)\n    }\n  } else if (\n    target.tagName.toLowerCase() === 'li' &&\n    Array.from(target.classList).includes('more')\n  ) {\n    onPagerClick(e)\n  }\n}\nfunction onPagerClick(event: UIEvent) {\n  const target = event.target as HTMLElement\n  if (target.tagName.toLowerCase() === 'ul' || props.disabled) {\n    return\n  }\n  let newPage = Number(target.textContent)\n  const pageCount = props.pageCount!\n  const currentPage = props.currentPage\n  const pagerCountOffset = props.pagerCount - 2\n  if (target.className.includes('more')) {\n    if (target.className.includes('quickprev')) {\n      newPage = currentPage - pagerCountOffset\n    } else if (target.className.includes('quicknext')) {\n      newPage = currentPage + pagerCountOffset\n    }\n  }\n  if (!Number.isNaN(+newPage)) {\n    if (newPage < 1) {\n      newPage = 1\n    }\n    if (newPage > pageCount) {\n      newPage = pageCount\n    }\n  }\n  if (newPage !== currentPage) {\n    emit('change', newPage)\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}