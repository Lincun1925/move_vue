{"ast":null,"code":"import { defineComponent, ref, computed, onMounted, watch, openBlock, createBlock, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, createCommentVNode, resolveDynamicComponent, renderSlot, createElementBlock, toDisplayString, Fragment, withModifiers, createVNode, vShow } from 'vue';\nimport { useTimeoutFn, useEventListener, useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElBadge } from '../../badge/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { messageProps, messageEmits } from './message.mjs';\nimport { getLastOffset } from './instance.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"innerHTML\"];\nconst __default__ = defineComponent({\n  name: \"ElMessage\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: messageProps,\n  emits: messageEmits,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const {\n      Close\n    } = TypeComponents;\n    const ns = useNamespace(\"message\");\n    const messageRef = ref();\n    const visible = ref(false);\n    const height = ref(0);\n    let stopTimer = void 0;\n    const badgeType = computed(() => props.type ? props.type === \"error\" ? \"danger\" : props.type : \"info\");\n    const typeClass = computed(() => {\n      const type = props.type;\n      return {\n        [ns.bm(\"icon\", type)]: type && TypeComponentsMap[type]\n      };\n    });\n    const iconComponent = computed(() => props.icon || TypeComponentsMap[props.type] || \"\");\n    const lastOffset = computed(() => getLastOffset(props.id));\n    const offset = computed(() => props.offset + lastOffset.value);\n    const bottom = computed(() => height.value + offset.value);\n    const customStyle = computed(() => ({\n      top: `${offset.value}px`,\n      zIndex: props.zIndex\n    }));\n    function startTimer() {\n      if (props.duration === 0) return;\n      ({\n        stop: stopTimer\n      } = useTimeoutFn(() => {\n        close();\n      }, props.duration));\n    }\n    function clearTimer() {\n      stopTimer == null ? void 0 : stopTimer();\n    }\n    function close() {\n      visible.value = false;\n    }\n    function keydown({\n      code\n    }) {\n      if (code === EVENT_CODE.esc) {\n        close();\n      }\n    }\n    onMounted(() => {\n      startTimer();\n      visible.value = true;\n    });\n    watch(() => props.repeatNum, () => {\n      clearTimer();\n      startTimer();\n    });\n    useEventListener(document, \"keydown\", keydown);\n    useResizeObserver(messageRef, () => {\n      height.value = messageRef.value.getBoundingClientRect().height;\n    });\n    expose({\n      visible,\n      bottom,\n      close\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Transition, {\n        name: unref(ns).b(\"fade\"),\n        onBeforeLeave: _ctx.onClose,\n        onAfterLeave: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"destroy\")),\n        persisted: \"\"\n      }, {\n        default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n          id: _ctx.id,\n          ref_key: \"messageRef\",\n          ref: messageRef,\n          class: normalizeClass([unref(ns).b(), {\n            [unref(ns).m(_ctx.type)]: _ctx.type && !_ctx.icon\n          }, unref(ns).is(\"center\", _ctx.center), unref(ns).is(\"closable\", _ctx.showClose), _ctx.customClass]),\n          style: normalizeStyle(unref(customStyle)),\n          role: \"alert\",\n          onMouseenter: clearTimer,\n          onMouseleave: startTimer\n        }, [_ctx.repeatNum > 1 ? (openBlock(), createBlock(unref(ElBadge), {\n          key: 0,\n          value: _ctx.repeatNum,\n          type: unref(badgeType),\n          class: normalizeClass(unref(ns).e(\"badge\"))\n        }, null, 8, [\"value\", \"type\", \"class\"])) : createCommentVNode(\"v-if\", true), unref(iconComponent) ? (openBlock(), createBlock(unref(ElIcon), {\n          key: 1,\n          class: normalizeClass([unref(ns).e(\"icon\"), unref(typeClass)])\n        }, {\n          default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(iconComponent))))]),\n          _: 1\n        }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", {\n          key: 0,\n          class: normalizeClass(unref(ns).e(\"content\"))\n        }, toDisplayString(_ctx.message), 3)) : (openBlock(), createElementBlock(Fragment, {\n          key: 1\n        }, [createCommentVNode(\" Caution here, message could've been compromised, never use user's input as message \"), createElementVNode(\"p\", {\n          class: normalizeClass(unref(ns).e(\"content\")),\n          innerHTML: _ctx.message\n        }, null, 10, _hoisted_2)], 2112))]), _ctx.showClose ? (openBlock(), createBlock(unref(ElIcon), {\n          key: 2,\n          class: normalizeClass(unref(ns).e(\"closeBtn\")),\n          onClick: withModifiers(close, [\"stop\"])\n        }, {\n          default: withCtx(() => [createVNode(unref(Close))]),\n          _: 1\n        }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 46, _hoisted_1), [[vShow, visible.value]])]),\n        _: 3\n      }, 8, [\"name\", \"onBeforeLeave\"]);\n    };\n  }\n});\nvar MessageConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/message/src/message.vue\"]]);\nexport { MessageConstructor as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;mCA4Dc;EACZA,IAAM;AACR;;;;;;;;;IAJA,MAAM;MAAEC;IAAU;IASZ,WAAKC,aAAa,SAAS;IAEjC,MAAMC,aAAaC,GAAoB;IACjC,gBAAUA,IAAI,KAAK;IACnB,eAASA,IAAI,CAAC;IAEpB,IAAIC,SAAsC;IAEpC,kBAAYC,QAA6B,OAC7CC,KAAM,QAAQA,KAAM,UAAS,OAAU,cAAWA,KAAM,QAAQ,MAClE;IACM,kBAAYD,SAAS,MAAM;MAC/B,MAAME,OAAOD,KAAM;MACZ;QAAE,CAACE,EAAG,IAAG,QAAQD,IAAI,IAAIA,IAAQ,sBAAkBA,IAAM;MAAA;IAAA,CACjE;IACK,sBAAgBF,SACpB,MAAMC,MAAMG,QAAQC,iBAAkB,OAAMH,SAAS,EACvD;IAEA,MAAMI,aAAaN,QAAS,OAAMO,aAAc,OAAMC,EAAE,CAAC;IACzD,MAAMC,SAAST,QAAS,OAAMC,KAAM,UAASK,WAAWI,KAAK;IAC7D,MAAMC,SAASX,QAAS,OAAcY,MAAO,SAAQH,OAAOC,KAAK;IAC3D,oBAAcV,SAAwB,OAAO;MACjDa,KAAK,GAAGJ,MAAO;MACfK,QAAQb,KAAM;IAAA,CACd;IAEoB;MACpB,IAAIA,MAAMc,QAAa,QAAG;MACxB,CAAE;QAAAC,MAAMjB;MAAU,IAAIkB,aAAa,MAAM;QACnCC;MAAA,CACR,EAAGjB,MAAMc,QAAQ;IAAA;IAGG;MACRhB;IAAA;IAGG;MACfoB,QAAQT,KAAQ;IAAA;IAGlB,iBAAiB;MAAEU;IAAuB;MACpC,aAASC,WAAWC,GAAK;QAErBJ;MAAA;IACR;IAGFK,UAAU,MAAM;MACHC;MACXL,QAAQT,KAAQ;IAAA,CACjB;IAGCe,YAAMxB,KAAM,YACZ,MAAM;MACOyB;MACAF;IAAA,CAEf;IAEiBG,2BAAU,WAAWC,OAAO;IAE7CC,kBAAkBhC,YAAY,MAAM;MAClCe,OAAOF,KAAQ,cAAWA,KAAO,wBAAwB;IAAA,CAC1D;IAEYoB;MACXX;MACAR;MACAO;IAAA,CACD","names":["name","Close","useNamespace","messageRef","ref","stopTimer","computed","props","type","ns","icon","TypeComponentsMap","lastOffset","getLastOffset","id","offset","value","bottom","height","top","zIndex","duration","stop","useTimeoutFn","close","visible","code","EVENT_CODE","esc","onMounted","startTimer","watch","clearTimer","useEventListener","keydown","useResizeObserver","expose"],"sources":["../../../../../../packages/components/message/src/message.vue"],"sourcesContent":["<template>\n  <transition\n    :name=\"ns.b('fade')\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      ref=\"messageRef\"\n      :class=\"[\n        ns.b(),\n        { [ns.m(type)]: type && !icon },\n        ns.is('center', center),\n        ns.is('closable', showClose),\n        customClass,\n      ]\"\n      :style=\"customStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n    >\n      <el-badge\n        v-if=\"repeatNum > 1\"\n        :value=\"repeatNum\"\n        :type=\"badgeType\"\n        :class=\"ns.e('badge')\"\n      />\n      <el-icon v-if=\"iconComponent\" :class=\"[ns.e('icon'), typeClass]\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <slot>\n        <p v-if=\"!dangerouslyUseHTMLString\" :class=\"ns.e('content')\">\n          {{ message }}\n        </p>\n        <!-- Caution here, message could've been compromised, never use user's input as message -->\n        <p v-else :class=\"ns.e('content')\" v-html=\"message\" />\n      </slot>\n      <el-icon v-if=\"showClose\" :class=\"ns.e('closeBtn')\" @click.stop=\"close\">\n        <Close />\n      </el-icon>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, onMounted, ref, watch } from 'vue'\nimport { useEventListener, useResizeObserver, useTimeoutFn } from '@vueuse/core'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport ElBadge from '@element-plus/components/badge'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { messageEmits, messageProps } from './message'\nimport { getLastOffset } from './instance'\nimport type { BadgeProps } from '@element-plus/components/badge'\nimport type { CSSProperties } from 'vue'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElMessage',\n})\n\nconst props = defineProps(messageProps)\ndefineEmits(messageEmits)\n\nconst ns = useNamespace('message')\n\nconst messageRef = ref<HTMLDivElement>()\nconst visible = ref(false)\nconst height = ref(0)\n\nlet stopTimer: (() => void) | undefined = undefined\n\nconst badgeType = computed<BadgeProps['type']>(() =>\n  props.type ? (props.type === 'error' ? 'danger' : props.type) : 'info'\n)\nconst typeClass = computed(() => {\n  const type = props.type\n  return { [ns.bm('icon', type)]: type && TypeComponentsMap[type] }\n})\nconst iconComponent = computed(\n  () => props.icon || TypeComponentsMap[props.type] || ''\n)\n\nconst lastOffset = computed(() => getLastOffset(props.id))\nconst offset = computed(() => props.offset + lastOffset.value)\nconst bottom = computed((): number => height.value + offset.value)\nconst customStyle = computed<CSSProperties>(() => ({\n  top: `${offset.value}px`,\n  zIndex: props.zIndex,\n}))\n\nfunction startTimer() {\n  if (props.duration === 0) return\n  ;({ stop: stopTimer } = useTimeoutFn(() => {\n    close()\n  }, props.duration))\n}\n\nfunction clearTimer() {\n  stopTimer?.()\n}\n\nfunction close() {\n  visible.value = false\n}\n\nfunction keydown({ code }: KeyboardEvent) {\n  if (code === EVENT_CODE.esc) {\n    // press esc to close the message\n    close()\n  }\n}\n\nonMounted(() => {\n  startTimer()\n  visible.value = true\n})\n\nwatch(\n  () => props.repeatNum,\n  () => {\n    clearTimer()\n    startTimer()\n  }\n)\n\nuseEventListener(document, 'keydown', keydown)\n\nuseResizeObserver(messageRef, () => {\n  height.value = messageRef.value!.getBoundingClientRect().height\n})\n\ndefineExpose({\n  visible,\n  bottom,\n  close,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}