{"ast":null,"code":"import { defineComponent, ref, computed, watch, nextTick, openBlock, createElementBlock, unref, normalizeClass, createElementVNode, Fragment, renderList, withKeys, withModifiers, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../time-picker/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { basicMonthTableProps } from '../props/basic-month-table.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../../time-picker/src/utils.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nimport { hasClass } from '../../../../utils/dom/style.mjs';\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = [\"aria-selected\", \"aria-label\", \"tabindex\", \"onKeydown\"];\nconst _hoisted_3 = {\n  class: \"cell\"\n};\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-month-table\",\n  props: basicMonthTableProps,\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const datesInMonth = (year, month, lang2) => {\n      const firstDay = dayjs().locale(lang2).startOf(\"month\").month(month).year(year);\n      const numOfDays = firstDay.daysInMonth();\n      return rangeArr(numOfDays).map(n => firstDay.add(n, \"day\").toDate());\n    };\n    const ns = useNamespace(\"month-table\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const tbodyRef = ref();\n    const currentCellRef = ref();\n    const months = ref(props.date.locale(\"en\").localeData().monthsShort().map(_ => _.toLowerCase()));\n    const tableRows = ref([[], [], []]);\n    const lastRow = ref();\n    const lastColumn = ref();\n    const rows = computed(() => {\n      var _a, _b;\n      const rows2 = tableRows.value;\n      const now = dayjs().locale(lang.value).startOf(\"month\");\n      for (let i = 0; i < 3; i++) {\n        const row = rows2[i];\n        for (let j = 0; j < 4; j++) {\n          const cell = row[j] || (row[j] = {\n            row: i,\n            column: j,\n            type: \"normal\",\n            inRange: false,\n            start: false,\n            end: false,\n            text: -1,\n            disabled: false\n          });\n          cell.type = \"normal\";\n          const index = i * 4 + j;\n          const calTime = props.date.startOf(\"year\").month(index);\n          const calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;\n          cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, \"month\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"month\")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, \"month\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"month\"));\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = !!(calEndDate && calTime.isSame(calEndDate, \"month\"));\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"month\");\n          } else {\n            cell.start = !!(props.minDate && calTime.isSame(props.minDate, \"month\"));\n            cell.end = !!(calEndDate && calTime.isSame(calEndDate, \"month\"));\n          }\n          const isToday = now.isSame(calTime);\n          if (isToday) {\n            cell.type = \"today\";\n          }\n          cell.text = index;\n          cell.disabled = ((_b = props.disabledDate) == null ? void 0 : _b.call(props, calTime.toDate())) || false;\n        }\n      }\n      return rows2;\n    });\n    const focus = () => {\n      var _a;\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n    const getCellStyle = cell => {\n      const style = {};\n      const year = props.date.year();\n      const today = new Date();\n      const month = cell.text;\n      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;\n      style.current = castArray(props.parsedValue).findIndex(date => dayjs.isDayjs(date) && date.year() === year && date.month() === month) >= 0;\n      style.today = today.getFullYear() === year && today.getMonth() === month;\n      if (cell.inRange) {\n        style[\"in-range\"] = true;\n        if (cell.start) {\n          style[\"start-date\"] = true;\n        }\n        if (cell.end) {\n          style[\"end-date\"] = true;\n        }\n      }\n      return style;\n    };\n    const isSelectedCell = cell => {\n      const year = props.date.year();\n      const month = cell.text;\n      return castArray(props.date).findIndex(date => date.year() === year && date.month() === month) >= 0;\n    };\n    const handleMouseMove = event => {\n      var _a;\n      if (!props.rangeState.selecting) return;\n      let target = event.target;\n      if (target.tagName === \"A\") {\n        target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\n      }\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n      if (target.tagName !== \"TD\") return;\n      const row = target.parentNode.rowIndex;\n      const column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        emit(\"changerange\", {\n          selecting: true,\n          endDate: props.date.startOf(\"year\").month(row * 4 + column)\n        });\n      }\n    };\n    const handleMonthTableClick = event => {\n      var _a;\n      const target = (_a = event.target) == null ? void 0 : _a.closest(\"td\");\n      if ((target == null ? void 0 : target.tagName) !== \"TD\") return;\n      if (hasClass(target, \"disabled\")) return;\n      const column = target.cellIndex;\n      const row = target.parentNode.rowIndex;\n      const month = row * 4 + column;\n      const newDate = props.date.startOf(\"year\").month(month);\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          emit(\"select\", true);\n        } else {\n          if (props.minDate && newDate >= props.minDate) {\n            emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n          emit(\"select\", false);\n        }\n      } else {\n        emit(\"pick\", month);\n      }\n    };\n    watch(() => props.date, async () => {\n      var _a, _b;\n      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {\n        await nextTick();\n        (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n      }\n    });\n    expose({\n      focus\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"table\", {\n        role: \"grid\",\n        \"aria-label\": unref(t)(\"el.datepicker.monthTablePrompt\"),\n        class: normalizeClass(unref(ns).b()),\n        onClick: handleMonthTableClick,\n        onMousemove: handleMouseMove\n      }, [createElementVNode(\"tbody\", {\n        ref_key: \"tbodyRef\",\n        ref: tbodyRef\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, key) => {\n        return openBlock(), createElementBlock(\"tr\", {\n          key\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key_) => {\n          return openBlock(), createElementBlock(\"td\", {\n            key: key_,\n            ref_for: true,\n            ref: el => isSelectedCell(cell) && (currentCellRef.value = el),\n            class: normalizeClass(getCellStyle(cell)),\n            \"aria-selected\": `${isSelectedCell(cell)}`,\n            \"aria-label\": unref(t)(`el.datepicker.month${+cell.text + 1}`),\n            tabindex: isSelectedCell(cell) ? 0 : -1,\n            onKeydown: [withKeys(withModifiers(handleMonthTableClick, [\"prevent\", \"stop\"]), [\"space\"]), withKeys(withModifiers(handleMonthTableClick, [\"prevent\", \"stop\"]), [\"enter\"])]\n          }, [createElementVNode(\"div\", null, [createElementVNode(\"span\", _hoisted_3, toDisplayString(unref(t)(\"el.datepicker.months.\" + months.value[cell.text])), 1)])], 42, _hoisted_2);\n        }), 128))]);\n      }), 128))], 512)], 42, _hoisted_1);\n    };\n  }\n});\nvar MonthTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue\"]]);\nexport { MonthTable as default };","map":{"version":3,"mappings":"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","names":["datesInMonth","year","lang2","firstDay","startOf","month","daysInMonth","rangeArr","n","useNamespace","t","lang","useLocale","tbodyRef","ref","currentCellRef","months","date","map","_","tableRows","lastRow","lastColumn","computed","dayjs","i","rows2","cell","row","column","type","inRange","start","end","text","disabled","index","calEndDate","props","rangeState","isSameOrAfter","minDate","isToday","value","today","style","_a","tagName","target","emit","selecting","endDate","maxDate","watch"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    role=\"grid\"\n    :aria-label=\"t('el.datepicker.monthTablePrompt')\"\n    :class=\"ns.b()\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody ref=\"tbodyRef\">\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td\n          v-for=\"(cell, key_) in row\"\n          :key=\"key_\"\n          :ref=\"(el) => isSelectedCell(cell) && (currentCellRef = el as HTMLElement)\"\n          :class=\"getCellStyle(cell)\"\n          :aria-selected=\"`${isSelectedCell(cell)}`\"\n          :aria-label=\"t(`el.datepicker.month${+cell.text + 1}`)\"\n          :tabindex=\"isSelectedCell(cell) ? 0 : -1\"\n          @keydown.space.prevent.stop=\"handleMonthTableClick\"\n          @keydown.enter.prevent.stop=\"handleMonthTableClick\"\n        >\n          <div>\n            <span class=\"cell\">\n              {{ t('el.datepicker.months.' + months[cell.text]) }}\n            </span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, ref, watch } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\nimport { basicMonthTableProps } from '../props/basic-month-table'\n\ntype MonthCell = {\n  column: number\n  row: number\n  disabled: boolean\n  start: boolean\n  end: boolean\n  text: number\n  type: 'normal' | 'today'\n  inRange: boolean\n}\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nconst props = defineProps(basicMonthTableProps)\nconst emit = defineEmits(['changerange', 'pick', 'select'])\n\nconst ns = useNamespace('month-table')\n\nconst { t, lang } = useLocale()\nconst tbodyRef = ref<HTMLElement>()\nconst currentCellRef = ref<HTMLElement>()\nconst months = ref(\n  props.date\n    .locale('en')\n    .localeData()\n    .monthsShort()\n    .map((_) => _.toLowerCase())\n)\nconst tableRows = ref<MonthCell[][]>([\n  [] as MonthCell[],\n  [] as MonthCell[],\n  [] as MonthCell[],\n])\nconst lastRow = ref<number>()\nconst lastColumn = ref<number>()\nconst rows = computed<MonthCell[][]>(() => {\n  const rows = tableRows.value\n\n  const now = dayjs().locale(lang.value).startOf('month')\n\n  for (let i = 0; i < 3; i++) {\n    const row = rows[i]\n    for (let j = 0; j < 4; j++) {\n      const cell = (row[j] ||= {\n        row: i,\n        column: j,\n        type: 'normal',\n        inRange: false,\n        start: false,\n        end: false,\n        text: -1,\n        disabled: false,\n      })\n\n      cell.type = 'normal'\n\n      const index = i * 4 + j\n      const calTime = props.date.startOf('year').month(index)\n\n      const calEndDate =\n        props.rangeState.endDate ||\n        props.maxDate ||\n        (props.rangeState.selecting && props.minDate) ||\n        null\n\n      cell.inRange =\n        !!(\n          props.minDate &&\n          calTime.isSameOrAfter(props.minDate, 'month') &&\n          calEndDate &&\n          calTime.isSameOrBefore(calEndDate, 'month')\n        ) ||\n        !!(\n          props.minDate &&\n          calTime.isSameOrBefore(props.minDate, 'month') &&\n          calEndDate &&\n          calTime.isSameOrAfter(calEndDate, 'month')\n        )\n\n      if (props.minDate?.isSameOrAfter(calEndDate)) {\n        cell.start = !!(calEndDate && calTime.isSame(calEndDate, 'month'))\n        cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n      } else {\n        cell.start = !!(props.minDate && calTime.isSame(props.minDate, 'month'))\n        cell.end = !!(calEndDate && calTime.isSame(calEndDate, 'month'))\n      }\n\n      const isToday = now.isSame(calTime)\n      if (isToday) {\n        cell.type = 'today'\n      }\n\n      cell.text = index\n      cell.disabled = props.disabledDate?.(calTime.toDate()) || false\n    }\n  }\n  return rows\n})\n\nconst focus = () => {\n  currentCellRef.value?.focus()\n}\n\nconst getCellStyle = (cell: MonthCell) => {\n  const style = {} as any\n  const year = props.date.year()\n  const today = new Date()\n  const month = cell.text\n\n  style.disabled = props.disabledDate\n    ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n    : false\n  style.current =\n    castArray(props.parsedValue).findIndex(\n      (date) =>\n        dayjs.isDayjs(date) && date.year() === year && date.month() === month\n    ) >= 0\n  style.today = today.getFullYear() === year && today.getMonth() === month\n\n  if (cell.inRange) {\n    style['in-range'] = true\n\n    if (cell.start) {\n      style['start-date'] = true\n    }\n\n    if (cell.end) {\n      style['end-date'] = true\n    }\n  }\n  return style\n}\n\nconst isSelectedCell = (cell: MonthCell) => {\n  const year = props.date.year()\n  const month = cell.text\n  return (\n    castArray(props.date).findIndex(\n      (date) => date.year() === year && date.month() === month\n    ) >= 0\n  )\n}\n\nconst handleMouseMove = (event: MouseEvent) => {\n  if (!props.rangeState.selecting) return\n\n  let target = event.target as HTMLElement\n  if (target.tagName === 'A') {\n    target = target.parentNode?.parentNode as HTMLElement\n  }\n  if (target.tagName === 'DIV') {\n    target = target.parentNode as HTMLElement\n  }\n  if (target.tagName !== 'TD') return\n\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex\n  const column = (target as HTMLTableCellElement).cellIndex\n  // can not select disabled date\n  if (rows.value[row][column].disabled) return\n\n  // only update rangeState when mouse moves to a new cell\n  // this avoids frequent Date object creation and improves performance\n  if (row !== lastRow.value || column !== lastColumn.value) {\n    lastRow.value = row\n    lastColumn.value = column\n    emit('changerange', {\n      selecting: true,\n      endDate: props.date.startOf('year').month(row * 4 + column),\n    })\n  }\n}\nconst handleMonthTableClick = (event: MouseEvent | KeyboardEvent) => {\n  const target = (event.target as HTMLElement)?.closest(\n    'td'\n  ) as HTMLTableCellElement\n  if (target?.tagName !== 'TD') return\n  if (hasClass(target, 'disabled')) return\n  const column = target.cellIndex\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex\n  const month = row * 4 + column\n  const newDate = props.date.startOf('year').month(month)\n  if (props.selectionMode === 'range') {\n    if (!props.rangeState.selecting) {\n      emit('pick', { minDate: newDate, maxDate: null })\n      emit('select', true)\n    } else {\n      if (props.minDate && newDate >= props.minDate) {\n        emit('pick', { minDate: props.minDate, maxDate: newDate })\n      } else {\n        emit('pick', { minDate: newDate, maxDate: props.minDate })\n      }\n      emit('select', false)\n    }\n  } else {\n    emit('pick', month)\n  }\n}\n\nwatch(\n  () => props.date,\n  async () => {\n    if (tbodyRef.value?.contains(document.activeElement)) {\n      await nextTick()\n      currentCellRef.value?.focus()\n    }\n  }\n)\n\ndefineExpose({\n  /**\n   * @description focus current cell\n   */\n  focus,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}