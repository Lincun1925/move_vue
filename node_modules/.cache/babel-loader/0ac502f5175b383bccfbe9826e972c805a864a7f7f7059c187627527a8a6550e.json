{"ast":null,"code":"import { isVNode, createVNode, mergeProps } from 'vue';\nimport '../components/index.mjs';\nimport { tryCall } from '../utils.mjs';\nimport TableV2Row from '../components/row.mjs';\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\nconst RowRenderer = (props, {\n  slots\n}) => {\n  const {\n    columns,\n    columnsStyles,\n    depthMap,\n    expandColumnKey,\n    expandedRowKeys,\n    estimatedRowHeight,\n    hasFixedColumns,\n    hoveringRowKey,\n    rowData,\n    rowIndex,\n    style,\n    isScrolling,\n    rowProps,\n    rowClass,\n    rowKey,\n    rowEventHandlers,\n    ns,\n    onRowHovered,\n    onRowExpanded\n  } = props;\n  const rowKls = tryCall(rowClass, {\n    columns,\n    rowData,\n    rowIndex\n  }, \"\");\n  const additionalProps = tryCall(rowProps, {\n    columns,\n    rowData,\n    rowIndex\n  });\n  const _rowKey = rowData[rowKey];\n  const depth = depthMap[_rowKey] || 0;\n  const canExpand = Boolean(expandColumnKey);\n  const isFixedRow = rowIndex < 0;\n  const kls = [ns.e(\"row\"), rowKls, {\n    [ns.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,\n    [ns.is(\"expanded\")]: canExpand && expandedRowKeys.includes(_rowKey),\n    [ns.is(\"hovered\")]: !isScrolling && _rowKey === hoveringRowKey,\n    [ns.is(\"fixed\")]: !depth && isFixedRow,\n    [ns.is(\"customized\")]: Boolean(slots.row)\n  }];\n  const onRowHover = hasFixedColumns ? onRowHovered : void 0;\n  const _rowProps = {\n    ...additionalProps,\n    columns,\n    columnsStyles,\n    class: kls,\n    depth,\n    expandColumnKey,\n    estimatedRowHeight: isFixedRow ? void 0 : estimatedRowHeight,\n    isScrolling,\n    rowIndex,\n    rowData,\n    rowKey: _rowKey,\n    rowEventHandlers,\n    style\n  };\n  return createVNode(TableV2Row, mergeProps(_rowProps, {\n    \"onRowHover\": onRowHover,\n    \"onRowExpand\": onRowExpanded\n  }), _isSlot(slots) ? slots : {\n    default: () => [slots]\n  });\n};\nexport { RowRenderer as default };","map":{"version":3,"mappings":";;;;;;;;;AAkCA,MAAMA;EAEFC;IACCC;IACGC;IACJD,QADI;IAEJC,eAFI;IAGJC,eAHI;IAIJC,kBAJI;IAKJC,eALI;IAMJC,cANI;IAOJC,OAPI;IAQJC,QARI;IASJC,KATI;IAUJC,WAVI;IAWJC,QAXI;IAYJC,QAZI;IAaJC,MAbI;IAcJC,gBAdI;IAeJC,EAfI;IAgBJC,YAhBI;IAiBJC;MAjBIC;EAmBJC;IAnBIlB,OAAN;IAsBAQ,OAAY;IAAuBR;KAAF;EAAoBS;IAA/BT,OAAtB;IACAQ,OAAqB;IACnBR;IACAQ;EACAC;EAHwC,MAA1CU;EAKA,MAAMC,SAAO,GAAUC,uBAAvB;EACA,MAAMF,UAAQjB,WAAQ,IAAR;EACd,MAAMoB,GAAS,SAAGD,KAAO,GAAClB;IAC1B,IAAMoB,CAAU,cAAWJ,WAA3BG;IACME,OAAG,UACP,aADU,IAGVpB;IACE,CAACY,EAAE,CAACS,EAAG,CAAYN,yBAAWG,WAAab,mBAD7C;IAEE,CAACO,EAAE,CAACU,EAAH,CAAM,WAAP,MAA8B,cAAmB;IACjD,CAACV,EAAE,CAACU,EAAH,CAAM,YAAa,iBAAgBN,CAAOO;IAC3C;QACID,UAAG,kBAA6B,eAAN;EALhC,MAHFE;IAYA,kBAAmBtB;IAEnBN,OAAe;IAEbA,aAFgB;IAGhBC,KAHgB;IAIhB4B,KAAK;IACLV,eALgB;IAMhBhB,kBANgB;IAOhBE;IACAM,QARgB;IAShBF,OATgB;IAUhBD,MAVgB;IAWhBM,gBAXgB;IAYhBC;EACAL;EAbgB,OAAlBoB;IAgBA;IAAA;IAAA,EAC2DZ;IACtDnB,eAFL;EAAA;AAAA","names":["RowRenderer","slots","columns","columnsStyles","depthMap","expandColumnKey","expandedRowKeys","estimatedRowHeight","hasFixedColumns","hoveringRowKey","rowData","rowIndex","style","isScrolling","rowProps","rowClass","rowKey","rowEventHandlers","ns","props","onRowExpanded","depth","_rowKey","Boolean","canExpand","isFixedRow","kls","e","is","row","_rowProps","class","_createVNode"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/row.tsx"],"sourcesContent":["import { Row } from '../components'\nimport { tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\nimport type { TableGridRowSlotParams } from '../table-grid'\n\ntype RowRendererProps = TableGridRowSlotParams &\n  Pick<\n    TableV2Props,\n    | 'expandColumnKey'\n    | 'estimatedRowHeight'\n    | 'rowProps'\n    | 'rowClass'\n    | 'rowKey'\n    | 'rowEventHandlers'\n  > &\n  UnwrapNestedRefs<\n    Pick<\n      UseTableReturn,\n      | 'depthMap'\n      | 'expandedRowKeys'\n      | 'hasFixedColumns'\n      | 'hoveringRowKey'\n      | 'onRowHovered'\n      | 'onRowExpanded'\n      | 'columnsStyles'\n    >\n  > & {\n    ns: UseNamespaceReturn\n  }\n\nconst RowRenderer: FunctionalComponent<RowRendererProps> = (\n  props,\n  { slots }\n) => {\n  const {\n    columns,\n    columnsStyles,\n    depthMap,\n    expandColumnKey,\n    expandedRowKeys,\n    estimatedRowHeight,\n    hasFixedColumns,\n    hoveringRowKey,\n    rowData,\n    rowIndex,\n    style,\n    isScrolling,\n    rowProps,\n    rowClass,\n    rowKey,\n    rowEventHandlers,\n    ns,\n    onRowHovered,\n    onRowExpanded,\n  } = props\n\n  const rowKls = tryCall(rowClass, { columns, rowData, rowIndex }, '')\n  const additionalProps = tryCall(rowProps, {\n    columns,\n    rowData,\n    rowIndex,\n  })\n  const _rowKey = rowData[rowKey]\n  const depth = depthMap[_rowKey] || 0\n  const canExpand = Boolean(expandColumnKey)\n  const isFixedRow = rowIndex < 0\n  const kls = [\n    ns.e('row'),\n    rowKls,\n    {\n      [ns.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,\n      [ns.is('expanded')]: canExpand && expandedRowKeys.includes(_rowKey),\n      [ns.is('hovered')]: !isScrolling && _rowKey === hoveringRowKey,\n      [ns.is('fixed')]: !depth && isFixedRow,\n      [ns.is('customized')]: Boolean(slots.row),\n    },\n  ]\n\n  const onRowHover = hasFixedColumns ? onRowHovered : undefined\n\n  const _rowProps = {\n    ...additionalProps,\n    columns,\n    columnsStyles,\n    class: kls,\n    depth,\n    expandColumnKey,\n    estimatedRowHeight: isFixedRow ? undefined : estimatedRowHeight,\n    isScrolling,\n    rowIndex,\n    rowData,\n    rowKey: _rowKey,\n    rowEventHandlers,\n    style,\n  }\n\n  return (\n    <Row {..._rowProps} onRowHover={onRowHover} onRowExpand={onRowExpanded}>\n      {slots}\n    </Row>\n  )\n}\n\nexport default RowRenderer\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}