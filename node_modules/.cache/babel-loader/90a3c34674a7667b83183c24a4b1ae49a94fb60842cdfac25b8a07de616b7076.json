{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isClient, unrefElement } from '@vueuse/core';\nconst buildPopperOptions = (props, arrowProps) => {\n  const {\n    placement,\n    strategy,\n    popperOptions\n  } = props;\n  const options = {\n    placement,\n    strategy,\n    ...popperOptions,\n    modifiers: genModifiers(props)\n  };\n  attachArrow(options, arrowProps);\n  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);\n  return options;\n};\nconst unwrapMeasurableEl = $el => {\n  if (!isClient) return;\n  return unrefElement($el);\n};\nfunction genModifiers(options) {\n  const {\n    offset,\n    gpuAcceleration,\n    fallbackPlacements\n  } = options;\n  return [{\n    name: \"offset\",\n    options: {\n      offset: [0, offset != null ? offset : 12]\n    }\n  }, {\n    name: \"preventOverflow\",\n    options: {\n      padding: {\n        top: 2,\n        bottom: 2,\n        left: 5,\n        right: 5\n      }\n    }\n  }, {\n    name: \"flip\",\n    options: {\n      padding: 5,\n      fallbackPlacements\n    }\n  }, {\n    name: \"computeStyles\",\n    options: {\n      gpuAcceleration\n    }\n  }];\n}\nfunction attachArrow(options, {\n  arrowEl,\n  arrowOffset\n}) {\n  options.modifiers.push({\n    name: \"arrow\",\n    options: {\n      element: arrowEl,\n      padding: arrowOffset != null ? arrowOffset : 5\n    }\n  });\n}\nfunction deriveExtraModifiers(options, modifiers) {\n  if (modifiers) {\n    options.modifiers = [...options.modifiers, ...(modifiers != null ? modifiers : [])];\n  }\n}\nexport { buildPopperOptions, unwrapMeasurableEl };","map":{"version":3,"mappings":";;AACY,MAACA,kBAAkB,GAAG,CAACC,KAAK,EAAEC,UAAU,KAAK;EACvD,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAa,CAAE,GAAGJ,KAAK;EACpD,MAAMK,OAAO,GAAG;IACdH,SAAS;IACTC,QAAQ;IACR,GAAGC,aAAa;IAChBE,SAAS,EAAEC,YAAY,CAACP,KAAK;EACjC,CAAG;EACDQ,WAAW,CAACH,OAAO,EAAEJ,UAAU,CAAC;EAChCQ,oBAAoB,CAACJ,OAAO,EAAED,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACE,SAAS,CAAC;EACvF,OAAOD,OAAO;AAChB;AACY,MAACK,kBAAkB,GAAIC,GAAG,IAAK;EACzC,IAAI,CAACC,QAAQ,EACX;EACF,OAAOC,YAAY,CAACF,GAAG,CAAC;AAC1B;AACA,SAASJ,YAAY,CAACF,OAAO,EAAE;EAC7B,MAAM;IAAES,MAAM;IAAEC,eAAe;IAAEC;EAAkB,CAAE,GAAGX,OAAO;EAC/D,OAAO,CACL;IACEY,IAAI,EAAE,QAAQ;IACdZ,OAAO,EAAE;MACPS,MAAM,EAAE,CAAC,CAAC,EAAEA,MAAM,IAAI,IAAI,GAAGA,MAAM,GAAG,EAAE;IAChD;EACA,CAAK,EACD;IACEG,IAAI,EAAE,iBAAiB;IACvBZ,OAAO,EAAE;MACPa,OAAO,EAAE;QACPC,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE,CAAC;QACTC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE;MACjB;IACA;EACA,CAAK,EACD;IACEL,IAAI,EAAE,MAAM;IACZZ,OAAO,EAAE;MACPa,OAAO,EAAE,CAAC;MACVF;IACR;EACA,CAAK,EACD;IACEC,IAAI,EAAE,eAAe;IACrBZ,OAAO,EAAE;MACPU;IACR;EACA,CAAK,CACF;AACH;AACA,SAASP,WAAW,CAACH,OAAO,EAAE;EAAEkB,OAAO;EAAEC;AAAW,CAAE,EAAE;EACtDnB,OAAO,CAACC,SAAS,CAACmB,IAAI,CAAC;IACrBR,IAAI,EAAE,OAAO;IACbZ,OAAO,EAAE;MACPqB,OAAO,EAAEH,OAAO;MAChBL,OAAO,EAAEM,WAAW,IAAI,IAAI,GAAGA,WAAW,GAAG;IACnD;EACA,CAAG,CAAC;AACJ;AACA,SAASf,oBAAoB,CAACJ,OAAO,EAAEC,SAAS,EAAE;EAChD,IAAIA,SAAS,EAAE;IACbD,OAAO,CAACC,SAAS,GAAG,CAAC,GAAGD,OAAO,CAACC,SAAS,EAAE,IAAGA,SAAS,IAAI,IAAI,GAAGA,SAAS,GAAG,EAAE,EAAC;EACrF;AACA","names":["buildPopperOptions","props","arrowProps","placement","strategy","popperOptions","options","modifiers","genModifiers","attachArrow","deriveExtraModifiers","unwrapMeasurableEl","$el","isClient","unrefElement","offset","gpuAcceleration","fallbackPlacements","name","padding","top","bottom","left","right","arrowEl","arrowOffset","push","element"],"sources":["../../../../../../packages/components/popper/src/utils.ts"],"sourcesContent":["import { isClient, unrefElement } from '@vueuse/core'\n\nimport type { ComponentPublicInstance } from 'vue'\nimport type { MaybeRef } from '@vueuse/core'\nimport type { Measurable } from '@element-plus/tokens'\nimport type { PopperCoreConfigProps } from './content'\n\ntype ArrowProps = {\n  arrowEl: HTMLElement | undefined\n  arrowOffset: number | undefined\n}\n\nexport const buildPopperOptions = (\n  props: PopperCoreConfigProps,\n  arrowProps: ArrowProps\n) => {\n  const { placement, strategy, popperOptions } = props\n  const options = {\n    placement,\n    strategy,\n    ...popperOptions,\n    modifiers: genModifiers(props),\n  }\n\n  attachArrow(options, arrowProps)\n  deriveExtraModifiers(options, popperOptions?.modifiers)\n  return options\n}\n\nexport const unwrapMeasurableEl = (\n  $el: MaybeRef<Measurable | undefined | ComponentPublicInstance>\n) => {\n  if (!isClient) return\n  return unrefElement($el as HTMLElement)\n}\n\nfunction genModifiers(options: PopperCoreConfigProps) {\n  const { offset, gpuAcceleration, fallbackPlacements } = options\n  return [\n    {\n      name: 'offset',\n      options: {\n        offset: [0, offset ?? 12],\n      },\n    },\n    {\n      name: 'preventOverflow',\n      options: {\n        padding: {\n          top: 2,\n          bottom: 2,\n          left: 5,\n          right: 5,\n        },\n      },\n    },\n    {\n      name: 'flip',\n      options: {\n        padding: 5,\n        fallbackPlacements,\n      },\n    },\n    {\n      name: 'computeStyles',\n      options: {\n        gpuAcceleration,\n      },\n    },\n  ]\n}\n\nfunction attachArrow(options: any, { arrowEl, arrowOffset }: ArrowProps) {\n  options.modifiers.push({\n    name: 'arrow',\n    options: {\n      element: arrowEl,\n      padding: arrowOffset ?? 5,\n    },\n  } as any)\n}\n\nfunction deriveExtraModifiers(\n  options: any,\n  modifiers: PopperCoreConfigProps['popperOptions']['modifiers']\n) {\n  if (modifiers) {\n    options.modifiers = [...options.modifiers, ...(modifiers ?? [])]\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}