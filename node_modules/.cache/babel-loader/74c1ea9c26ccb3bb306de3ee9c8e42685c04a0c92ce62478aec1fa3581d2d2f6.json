{"ast":null,"code":"import { useGlobalConfig } from '../use-global-config/index.mjs';\nconst defaultNamespace = \"el\";\nconst statePrefix = \"is-\";\nconst _bem = (namespace, block, blockSuffix, element, modifier) => {\n  let cls = `${namespace}-${block}`;\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`;\n  }\n  if (element) {\n    cls += `__${element}`;\n  }\n  if (modifier) {\n    cls += `--${modifier}`;\n  }\n  return cls;\n};\nconst useNamespace = block => {\n  const namespace = useGlobalConfig(\"namespace\", defaultNamespace);\n  const b = (blockSuffix = \"\") => _bem(namespace.value, block, blockSuffix, \"\", \"\");\n  const e = element => element ? _bem(namespace.value, block, \"\", element, \"\") : \"\";\n  const m = modifier => modifier ? _bem(namespace.value, block, \"\", \"\", modifier) : \"\";\n  const be = (blockSuffix, element) => blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, \"\") : \"\";\n  const em = (element, modifier) => element && modifier ? _bem(namespace.value, block, \"\", element, modifier) : \"\";\n  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, \"\", modifier) : \"\";\n  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : \"\";\n  const is = (name, ...args) => {\n    const state = args.length >= 1 ? args[0] : true;\n    return name && state ? `${statePrefix}${name}` : \"\";\n  };\n  const cssVar = object => {\n    const styles = {};\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${key}`] = object[key];\n      }\n    }\n    return styles;\n  };\n  const cssVarBlock = object => {\n    const styles = {};\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${block}-${key}`] = object[key];\n      }\n    }\n    return styles;\n  };\n  const cssVarName = name => `--${namespace.value}-${name}`;\n  const cssVarBlockName = name => `--${namespace.value}-${block}-${name}`;\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is,\n    cssVar,\n    cssVarName,\n    cssVarBlock,\n    cssVarBlockName\n  };\n};\nexport { defaultNamespace, useNamespace };","map":{"version":3,"mappings":"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","names":["defaultNamespace","statePrefix","_bem","namespace","block","blockSuffix","element","modifier","cls","useNamespace","useGlobalConfig","b","value","e","m","be","em","bm","bem","is","name","args","state","length","cssVar","object","styles","key","cssVarBlock","cssVarName","cssVarBlockName"],"sources":["../../../../../packages/hooks/use-namespace/index.ts"],"sourcesContent":["import { useGlobalConfig } from '../use-global-config'\n\nexport const defaultNamespace = 'el'\nconst statePrefix = 'is-'\n\nconst _bem = (\n  namespace: string,\n  block: string,\n  blockSuffix: string,\n  element: string,\n  modifier: string\n) => {\n  let cls = `${namespace}-${block}`\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`\n  }\n  if (element) {\n    cls += `__${element}`\n  }\n  if (modifier) {\n    cls += `--${modifier}`\n  }\n  return cls\n}\n\nexport const useNamespace = (block: string) => {\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n  const b = (blockSuffix = '') =>\n    _bem(namespace.value, block, blockSuffix, '', '')\n  const e = (element?: string) =>\n    element ? _bem(namespace.value, block, '', element, '') : ''\n  const m = (modifier?: string) =>\n    modifier ? _bem(namespace.value, block, '', '', modifier) : ''\n  const be = (blockSuffix?: string, element?: string) =>\n    blockSuffix && element\n      ? _bem(namespace.value, block, blockSuffix, element, '')\n      : ''\n  const em = (element?: string, modifier?: string) =>\n    element && modifier\n      ? _bem(namespace.value, block, '', element, modifier)\n      : ''\n  const bm = (blockSuffix?: string, modifier?: string) =>\n    blockSuffix && modifier\n      ? _bem(namespace.value, block, blockSuffix, '', modifier)\n      : ''\n  const bem = (blockSuffix?: string, element?: string, modifier?: string) =>\n    blockSuffix && element && modifier\n      ? _bem(namespace.value, block, blockSuffix, element, modifier)\n      : ''\n  const is: {\n    (name: string, state: boolean | undefined): string\n    (name: string): string\n  } = (name: string, ...args: [boolean | undefined] | []) => {\n    const state = args.length >= 1 ? args[0]! : true\n    return name && state ? `${statePrefix}${name}` : ''\n  }\n\n  // for css var\n  // --el-xxx: value;\n  const cssVar = (object: Record<string, string>) => {\n    const styles: Record<string, string> = {}\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${key}`] = object[key]\n      }\n    }\n    return styles\n  }\n  // with block\n  const cssVarBlock = (object: Record<string, string>) => {\n    const styles: Record<string, string> = {}\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${block}-${key}`] = object[key]\n      }\n    }\n    return styles\n  }\n\n  const cssVarName = (name: string) => `--${namespace.value}-${name}`\n  const cssVarBlockName = (name: string) =>\n    `--${namespace.value}-${block}-${name}`\n\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is,\n    // css\n    cssVar,\n    cssVarName,\n    cssVarBlock,\n    cssVarBlockName,\n  }\n}\n\nexport type UseNamespaceReturn = ReturnType<typeof useNamespace>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}