{"ast":null,"code":"import { defineComponent, inject, watch } from 'vue';\nimport '../../select/index.mjs';\nimport { selectKey } from '../../select/src/token.mjs';\nvar CacheOptions = defineComponent({\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const select = inject(selectKey);\n    watch(() => props.data, () => {\n      props.data.forEach(item => {\n        if (!select.cachedOptions.has(item.value)) {\n          select.cachedOptions.set(item.value, item);\n        }\n      });\n      select.setSelected();\n    }, {\n      immediate: true,\n      deep: true\n    });\n    return () => void 0;\n  }\n});\nexport { CacheOptions as default };","map":{"version":3,"mappings":";;;AAEA,mBAAeA,eAAe,CAAC;EAC7BC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,KAAK;MACXC,OAAO,EAAE,MAAM;IACrB;EACA,CAAG;EACDC,KAAK,CAACL,KAAK,EAAE;IACX,MAAMM,MAAM,GAAGC,MAAM,CAACC,SAAS,CAAC;IAChCC,KAAK,CAAC,MAAMT,KAAK,CAACC,IAAI,EAAE,MAAM;MAC5BD,KAAK,CAACC,IAAI,CAACS,OAAO,CAAEC,IAAI,IAAK;QAC3B,IAAI,CAACL,MAAM,CAACM,aAAa,CAACC,GAAG,CAACF,IAAI,CAACG,KAAK,CAAC,EAAE;UACzCR,MAAM,CAACM,aAAa,CAACG,GAAG,CAACJ,IAAI,CAACG,KAAK,EAAEH,IAAI,CAAC;QACpD;MACA,CAAO,CAAC;MACFL,MAAM,CAACU,WAAW,EAAE;IAC1B,CAAK,EAAE;MAAEC,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAI,CAAE,CAAC;IACnC,OAAO,MAAM,KAAK,CAAC;EACvB;AACA,CAAC,CAAC","names":["defineComponent","props","data","type","Array","default","setup","select","inject","selectKey","watch","forEach","item","cachedOptions","has","value","set","setSelected","immediate","deep"],"sources":["../../../../../../packages/components/tree-select/src/cache-options.ts"],"sourcesContent":["import { defineComponent, inject, watch } from 'vue'\nimport { selectKey } from '@element-plus/components/select'\nimport type { SelectContext } from '@element-plus/components/select'\nimport type { PropType } from 'vue'\n\n// same as el-option instance,\n// these are required for `cachedOptions`\nexport type CacheOption = {\n  value: string | number | boolean | object\n  currentLabel: string | number\n  isDisabled: boolean\n}\n\nexport default defineComponent({\n  props: {\n    data: {\n      type: Array as PropType<CacheOption[]>,\n      default: () => [],\n    },\n  },\n  setup(props) {\n    const select = inject(selectKey) as NonNullable<SelectContext>\n\n    watch(\n      () => props.data,\n      () => {\n        props.data.forEach((item) => {\n          if (!select.cachedOptions.has(item.value)) {\n            select.cachedOptions.set(item.value, item)\n          }\n        })\n        select.setSelected()\n      },\n      { immediate: true, deep: true }\n    )\n\n    return () => undefined\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}