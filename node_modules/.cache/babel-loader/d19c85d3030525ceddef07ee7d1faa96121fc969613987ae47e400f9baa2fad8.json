{"ast":null,"code":"import { defineComponent, shallowRef, ref, computed, watch, onMounted, watchEffect, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createElementVNode, renderSlot } from 'vue';\nimport { useWindowSize, useElementBounding, useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { affixProps, affixEmits } from './affix.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nconst COMPONENT_NAME = \"ElAffix\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: affixProps,\n  emits: affixEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"affix\");\n    const target = shallowRef();\n    const root = shallowRef();\n    const scrollContainer = shallowRef();\n    const {\n      height: windowHeight\n    } = useWindowSize();\n    const {\n      height: rootHeight,\n      width: rootWidth,\n      top: rootTop,\n      bottom: rootBottom,\n      update: updateRoot\n    } = useElementBounding(root, {\n      windowScroll: false\n    });\n    const targetRect = useElementBounding(target);\n    const fixed = ref(false);\n    const scrollTop = ref(0);\n    const transform = ref(0);\n    const rootStyle = computed(() => {\n      return {\n        height: fixed.value ? `${rootHeight.value}px` : \"\",\n        width: fixed.value ? `${rootWidth.value}px` : \"\"\n      };\n    });\n    const affixStyle = computed(() => {\n      if (!fixed.value) return {};\n      const offset = props.offset ? addUnit(props.offset) : 0;\n      return {\n        height: `${rootHeight.value}px`,\n        width: `${rootWidth.value}px`,\n        top: props.position === \"top\" ? offset : \"\",\n        bottom: props.position === \"bottom\" ? offset : \"\",\n        transform: transform.value ? `translateY(${transform.value}px)` : \"\",\n        zIndex: props.zIndex\n      };\n    });\n    const update = () => {\n      if (!scrollContainer.value) return;\n      scrollTop.value = scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop || 0;\n      if (props.position === \"top\") {\n        if (props.target) {\n          const difference = targetRect.bottom.value - props.offset - rootHeight.value;\n          fixed.value = props.offset > rootTop.value && targetRect.bottom.value > 0;\n          transform.value = difference < 0 ? difference : 0;\n        } else {\n          fixed.value = props.offset > rootTop.value;\n        }\n      } else if (props.target) {\n        const difference = windowHeight.value - targetRect.top.value - props.offset - rootHeight.value;\n        fixed.value = windowHeight.value - props.offset < rootBottom.value && windowHeight.value > targetRect.top.value;\n        transform.value = difference < 0 ? -difference : 0;\n      } else {\n        fixed.value = windowHeight.value - props.offset < rootBottom.value;\n      }\n    };\n    const handleScroll = () => {\n      updateRoot();\n      emit(\"scroll\", {\n        scrollTop: scrollTop.value,\n        fixed: fixed.value\n      });\n    };\n    watch(fixed, val => emit(\"change\", val));\n    onMounted(() => {\n      var _a;\n      if (props.target) {\n        target.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;\n        if (!target.value) throwError(COMPONENT_NAME, `Target is not existed: ${props.target}`);\n      } else {\n        target.value = document.documentElement;\n      }\n      scrollContainer.value = getScrollContainer(root.value, true);\n      updateRoot();\n    });\n    useEventListener(scrollContainer, \"scroll\", handleScroll);\n    watchEffect(update);\n    expose({\n      update,\n      updateRoot\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"root\",\n        ref: root,\n        class: normalizeClass(unref(ns).b()),\n        style: normalizeStyle(unref(rootStyle))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass({\n          [unref(ns).m(\"fixed\")]: fixed.value\n        }),\n        style: normalizeStyle(unref(affixStyle))\n      }, [renderSlot(_ctx.$slots, \"default\")], 6)], 6);\n    };\n  }\n});\nvar Affix = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/affix/src/affix.vue\"]]);\nexport { Affix as default };","map":{"version":3,"mappings":";;;;;;;;;;;mCAqBc;EACZA,IAAM;AACR;;;;;;;;;;IAKM,WAAKC,aAAa,OAAO;IAE/B,MAAMC,SAASC,UAAwB;IACvC,MAAMC,OAAOD,UAA2B;IACxC,MAAME,kBAAkBF,UAAiC;IACnD;MAAEG,MAAQ;IAAA,IAAiBC,aAAc;IACzC;MACJD,MAAQ;MACRE,KAAO;MACPC,GAAK;MACLC,MAAQ;MACRC,MAAQ;IAAA,IACNC,kBAAmB,OAAM;MAAEC,cAAc;IAAA,CAAO;IAC9C,mBAAaD,mBAAmBV,MAAM;IAEtC,cAAQY,IAAI,KAAK;IACjB,kBAAYA,IAAI,CAAC;IACjB,kBAAYA,IAAI,CAAC;IAEjB,kBAAYC,SAAwB,MAAM;MACvC;QACLT,MAAQ,QAAMU,KAAQ,MAAGC,WAAWD,KAAY;QAChDR,KAAO,QAAMQ,KAAQ,MAAGE,UAAUF,KAAY;MAAA,CAChD;IAAA,CACD;IAEK,mBAAaD,SAAwB,MAAM;MAC/C,IAAI,CAACI,KAAM,QAAO,OAAO,EAAC;MAE1B,MAAMC,SAASC,KAAM,UAASC,OAAQ,OAAMF,MAAM,CAAI;MAC/C;QACLd,QAAQ,GAAGW,UAAW;QACtBT,OAAO,GAAGU,SAAU;QACpBT,GAAK,QAAMc,QAAa,aAAQH,MAAS;QACzCV,MAAQ,QAAMa,QAAa,gBAAWH,MAAS;QAC/CI,SAAW,YAAUR,KAAQ,iBAAcQ,UAAUR,KAAa;QAClES,QAAQJ,KAAM;MAAA,CAChB;IAAA,CACD;IAED,MAAMV,SAAS,MAAM;MACnB,IAAI,CAACN,eAAgB,QAAO;MAElBqB,kBACRrB,gBAAgBW,KAAiB,qBAC7BW,SAASC,eAAgB,aACzBvB,eAAgB,OAAMqB,SAAa;MAErC,UAAMH,aAAa,KAAO;QAC5B,IAAIF,MAAMnB,MAAQ;UAChB,MAAM2B,aACJC,UAAW,QAAOd,KAAQ,SAAMI,SAASH,UAAW;UACtDE,MAAMH,QAAQK,KAAM,UAASU,QAAQf,KAAS,eAAWN,OAAOM,KAAQ;UAC9DQ,kBAAQK,UAAa,OAAIA,UAAa;QAAA,CAC3C;UACCV,cAAQE,KAAM,UAASU,OAAQ;QAAA;MACvC,CACF,UAAWV,MAAMnB,MAAQ;QACjB,mBACJ8B,aAAahB,KACb,cAAWP,IAAIO,KACf,SAAMI,SACNH,UAAW;QACPE,cACJa,YAAa,SAAQX,KAAM,UAASY,WAAWjB,KAC/C,iBAAaA,KAAQ,cAAWP,GAAI;QACtCe,UAAUR,KAAQ,gBAAa,CAAI,IAACa,UAAa;MAAA,CAC5C;QACLV,MAAMH,KAAQ,gBAAaA,KAAQ,SAAMI,SAASa,UAAW;MAAA;IAC/D,CACF;IAEA,MAAMC,eAAe,MAAM;MACdC;MACXC,KAAK,QAAU;QACbV,WAAWA,SAAU;QACrBP,OAAOA,KAAM;MAAA,CACd;IAAA,CACH;IAEAkB,MAAMlB,OAAQmB,OAAQF,IAAK,WAAUE,GAAG,CAAC;IAEzCC,UAAU,MAAM;MACd,IAAIC;MACF,SAAO,CACLtC;QACFA,MAAY;QACC,mBACRuC;MACL;QACFvC;MACA;MACWG;MACZ8B;IAED,CAAiB;IACjBO,gBAAkB;IAELC;IAEXC;MAEAjC;MACDwB","names":["name","useNamespace","target","shallowRef","root","scrollContainer","height","useWindowSize","width","top","bottom","update","useElementBounding","windowScroll","ref","computed","value","rootHeight","rootWidth","fixed","offset","props","addUnit","position","transform","zIndex","scrollTop","document","documentElement","difference","targetRect","rootTop","windowHeight","rootBottom","handleScroll","updateRoot","emit","watch","val","onMounted","_a","throwError","useEventListener","watchEffect","expose"],"sources":["../../../../../../packages/components/affix/src/affix.vue"],"sourcesContent":["<template>\n  <div ref=\"root\" :class=\"ns.b()\" :style=\"rootStyle\">\n    <div :class=\"{ [ns.m('fixed')]: fixed }\" :style=\"affixStyle\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, onMounted, ref, shallowRef, watch, watchEffect } from 'vue'\nimport {\n  useElementBounding,\n  useEventListener,\n  useWindowSize,\n} from '@vueuse/core'\nimport { addUnit, getScrollContainer, throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { affixEmits, affixProps } from './affix'\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElAffix'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(affixProps)\nconst emit = defineEmits(affixEmits)\n\nconst ns = useNamespace('affix')\n\nconst target = shallowRef<HTMLElement>()\nconst root = shallowRef<HTMLDivElement>()\nconst scrollContainer = shallowRef<HTMLElement | Window>()\nconst { height: windowHeight } = useWindowSize()\nconst {\n  height: rootHeight,\n  width: rootWidth,\n  top: rootTop,\n  bottom: rootBottom,\n  update: updateRoot,\n} = useElementBounding(root, { windowScroll: false })\nconst targetRect = useElementBounding(target)\n\nconst fixed = ref(false)\nconst scrollTop = ref(0)\nconst transform = ref(0)\n\nconst rootStyle = computed<CSSProperties>(() => {\n  return {\n    height: fixed.value ? `${rootHeight.value}px` : '',\n    width: fixed.value ? `${rootWidth.value}px` : '',\n  }\n})\n\nconst affixStyle = computed<CSSProperties>(() => {\n  if (!fixed.value) return {}\n\n  const offset = props.offset ? addUnit(props.offset) : 0\n  return {\n    height: `${rootHeight.value}px`,\n    width: `${rootWidth.value}px`,\n    top: props.position === 'top' ? offset : '',\n    bottom: props.position === 'bottom' ? offset : '',\n    transform: transform.value ? `translateY(${transform.value}px)` : '',\n    zIndex: props.zIndex,\n  }\n})\n\nconst update = () => {\n  if (!scrollContainer.value) return\n\n  scrollTop.value =\n    scrollContainer.value instanceof Window\n      ? document.documentElement.scrollTop\n      : scrollContainer.value.scrollTop || 0\n\n  if (props.position === 'top') {\n    if (props.target) {\n      const difference =\n        targetRect.bottom.value - props.offset - rootHeight.value\n      fixed.value = props.offset > rootTop.value && targetRect.bottom.value > 0\n      transform.value = difference < 0 ? difference : 0\n    } else {\n      fixed.value = props.offset > rootTop.value\n    }\n  } else if (props.target) {\n    const difference =\n      windowHeight.value -\n      targetRect.top.value -\n      props.offset -\n      rootHeight.value\n    fixed.value =\n      windowHeight.value - props.offset < rootBottom.value &&\n      windowHeight.value > targetRect.top.value\n    transform.value = difference < 0 ? -difference : 0\n  } else {\n    fixed.value = windowHeight.value - props.offset < rootBottom.value\n  }\n}\n\nconst handleScroll = () => {\n  updateRoot()\n  emit('scroll', {\n    scrollTop: scrollTop.value,\n    fixed: fixed.value,\n  })\n}\n\nwatch(fixed, (val) => emit('change', val))\n\nonMounted(() => {\n  if (props.target) {\n    target.value =\n      document.querySelector<HTMLElement>(props.target) ?? undefined\n    if (!target.value)\n      throwError(COMPONENT_NAME, `Target is not existed: ${props.target}`)\n  } else {\n    target.value = document.documentElement\n  }\n  scrollContainer.value = getScrollContainer(root.value!, true)\n  updateRoot()\n})\n\nuseEventListener(scrollContainer, 'scroll', handleScroll)\nwatchEffect(update)\n\ndefineExpose({\n  /** @description update affix status */\n  update,\n  /** @description update rootRect info */\n  updateRoot,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}