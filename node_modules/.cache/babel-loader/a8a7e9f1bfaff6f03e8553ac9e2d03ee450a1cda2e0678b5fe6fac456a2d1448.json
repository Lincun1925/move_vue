{"ast":null,"code":"import { defineComponent, vModelText, computed, reactive, toRefs, provide, resolveComponent, resolveDirective, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createVNode, withCtx, createElementVNode, renderSlot, createCommentVNode, normalizeStyle, toDisplayString, createBlock, Fragment, renderList, withKeys, resolveDynamicComponent, vShow, normalizeProps, guardReactiveProps } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../directives/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../constants/index.mjs';\nimport ElSelectMenu from './select-dropdown.mjs';\nimport useSelect from './useSelect.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { SelectProps } from './defaults.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isArray } from '@vue/shared';\nconst _sfc_main = defineComponent({\n  name: \"ElSelectV2\",\n  components: {\n    ElSelectMenu,\n    ElTag,\n    ElTooltip,\n    ElIcon\n  },\n  directives: {\n    ClickOutside,\n    ModelText: vModelText\n  },\n  props: SelectProps,\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"remove-tag\", \"clear\", \"visible-change\", \"focus\", \"blur\"],\n  setup(props, {\n    emit\n  }) {\n    const modelValue = computed(() => {\n      const {\n        modelValue: rawModelValue,\n        multiple\n      } = props;\n      const fallback = multiple ? [] : void 0;\n      if (isArray(rawModelValue)) {\n        return multiple ? rawModelValue : fallback;\n      }\n      return multiple ? fallback : rawModelValue;\n    });\n    const API = useSelect(reactive({\n      ...toRefs(props),\n      modelValue\n    }), emit);\n    provide(selectV2InjectionKey, {\n      props: reactive({\n        ...toRefs(props),\n        height: API.popupHeight,\n        modelValue\n      }),\n      popper: API.popper,\n      onSelect: API.onSelect,\n      onHover: API.onHover,\n      onKeyboardNavigate: API.onKeyboardNavigate,\n      onKeyboardSelect: API.onKeyboardSelect\n    });\n    return {\n      ...API,\n      modelValue\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"id\", \"autocomplete\", \"aria-expanded\", \"aria-labelledby\", \"disabled\", \"readonly\", \"name\", \"unselectable\"];\nconst _hoisted_3 = [\"textContent\"];\nconst _hoisted_4 = [\"id\", \"aria-labelledby\", \"aria-expanded\", \"autocomplete\", \"disabled\", \"name\", \"readonly\", \"unselectable\"];\nconst _hoisted_5 = [\"textContent\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = resolveComponent(\"el-tag\");\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_select_menu = resolveComponent(\"el-select-menu\");\n  const _directive_model_text = resolveDirective(\"model-text\");\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"selectRef\",\n    class: normalizeClass([_ctx.nsSelectV2.b(), _ctx.nsSelectV2.m(_ctx.selectSize)]),\n    onClick: _cache[25] || (_cache[25] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), [\"stop\"])),\n    onMouseenter: _cache[26] || (_cache[26] = $event => _ctx.states.comboBoxHovering = true),\n    onMouseleave: _cache[27] || (_cache[27] = $event => _ctx.states.comboBoxHovering = false)\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.dropdownMenuVisible,\n    teleported: _ctx.teleported,\n    \"popper-class\": [_ctx.nsSelectV2.e(\"popper\"), _ctx.popperClass],\n    \"gpu-acceleration\": false,\n    \"stop-popper-mouse-event\": false,\n    \"popper-options\": _ctx.popperOptions,\n    \"fallback-placements\": [\"bottom-start\", \"top-start\", \"right\", \"left\"],\n    effect: _ctx.effect,\n    placement: _ctx.placement,\n    pure: \"\",\n    transition: `${_ctx.nsSelectV2.namespace.value}-zoom-in-top`,\n    trigger: \"click\",\n    persistent: _ctx.persistent,\n    onBeforeShow: _ctx.handleMenuEnter,\n    onHide: _cache[24] || (_cache[24] = $event => _ctx.states.inputValue = _ctx.states.displayInputValue)\n  }, {\n    default: withCtx(() => {\n      var _a;\n      return [createElementVNode(\"div\", {\n        ref: \"selectionRef\",\n        class: normalizeClass([_ctx.nsSelectV2.e(\"wrapper\"), _ctx.nsSelectV2.is(\"focused\", _ctx.states.isComposing || _ctx.expanded), _ctx.nsSelectV2.is(\"hovering\", _ctx.states.comboBoxHovering), _ctx.nsSelectV2.is(\"filterable\", _ctx.filterable), _ctx.nsSelectV2.is(\"disabled\", _ctx.selectDisabled)])\n      }, [_ctx.$slots.prefix ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"prefix\")])) : createCommentVNode(\"v-if\", true), _ctx.multiple ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(_ctx.nsSelectV2.e(\"selection\"))\n      }, [_ctx.collapseTags && _ctx.modelValue.length > 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.nsSelectV2.e(\"selected-item\"))\n      }, [createVNode(_component_el_tag, {\n        closable: !_ctx.selectDisabled && !((_a = _ctx.states.cachedOptions[0]) == null ? void 0 : _a.disable),\n        size: _ctx.collapseTagSize,\n        type: \"info\",\n        \"disable-transitions\": \"\",\n        onClose: _cache[0] || (_cache[0] = $event => _ctx.deleteTag($event, _ctx.states.cachedOptions[0]))\n      }, {\n        default: withCtx(() => {\n          var _a2;\n          return [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: `${_ctx.tagMaxWidth}px`\n            })\n          }, toDisplayString((_a2 = _ctx.states.cachedOptions[0]) == null ? void 0 : _a2.label), 7)];\n        }),\n        _: 1\n      }, 8, [\"closable\", \"size\"]), _ctx.modelValue.length > 1 ? (openBlock(), createBlock(_component_el_tag, {\n        key: 0,\n        closable: false,\n        size: _ctx.collapseTagSize,\n        type: \"info\",\n        \"disable-transitions\": \"\"\n      }, {\n        default: withCtx(() => [_ctx.collapseTagsTooltip ? (openBlock(), createBlock(_component_el_tooltip, {\n          key: 0,\n          disabled: _ctx.dropdownMenuVisible,\n          \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n          effect: _ctx.effect,\n          placement: \"bottom\",\n          teleported: false\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: `${_ctx.tagMaxWidth}px`\n            })\n          }, \"+ \" + toDisplayString(_ctx.modelValue.length - 1), 7)]),\n          content: withCtx(() => [createElementVNode(\"div\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"selection\"))\n          }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.states.cachedOptions.slice(1), (selected, idx) => {\n            return openBlock(), createElementBlock(\"div\", {\n              key: idx,\n              class: normalizeClass(_ctx.nsSelectV2.e(\"selected-item\"))\n            }, [(openBlock(), createBlock(_component_el_tag, {\n              key: _ctx.getValueKey(selected),\n              closable: !_ctx.selectDisabled && !selected.disabled,\n              size: _ctx.collapseTagSize,\n              class: \"in-tooltip\",\n              type: \"info\",\n              \"disable-transitions\": \"\",\n              onClose: $event => _ctx.deleteTag($event, selected)\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", {\n                class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n                style: normalizeStyle({\n                  maxWidth: `${_ctx.tagMaxWidth}px`\n                })\n              }, toDisplayString(_ctx.getLabel(selected)), 7)]),\n              _: 2\n            }, 1032, [\"closable\", \"size\", \"onClose\"]))], 2);\n          }), 128))], 2)]),\n          _: 1\n        }, 8, [\"disabled\", \"effect\"])) : (openBlock(), createElementBlock(\"span\", {\n          key: 1,\n          class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n          style: normalizeStyle({\n            maxWidth: `${_ctx.tagMaxWidth}px`\n          })\n        }, \"+ \" + toDisplayString(_ctx.modelValue.length - 1), 7))]),\n        _: 1\n      }, 8, [\"size\"])) : createCommentVNode(\"v-if\", true)], 2)) : (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(_ctx.states.cachedOptions, (selected, idx) => {\n        return openBlock(), createElementBlock(\"div\", {\n          key: idx,\n          class: normalizeClass(_ctx.nsSelectV2.e(\"selected-item\"))\n        }, [(openBlock(), createBlock(_component_el_tag, {\n          key: _ctx.getValueKey(selected),\n          closable: !_ctx.selectDisabled && !selected.disabled,\n          size: _ctx.collapseTagSize,\n          type: \"info\",\n          \"disable-transitions\": \"\",\n          onClose: $event => _ctx.deleteTag($event, selected)\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: `${_ctx.tagMaxWidth}px`\n            })\n          }, toDisplayString(_ctx.getLabel(selected)), 7)]),\n          _: 2\n        }, 1032, [\"closable\", \"size\", \"onClose\"]))], 2);\n      }), 128)), createElementVNode(\"div\", {\n        class: normalizeClass([_ctx.nsSelectV2.e(\"selected-item\"), _ctx.nsSelectV2.e(\"input-wrapper\")]),\n        style: normalizeStyle(_ctx.inputWrapperStyle)\n      }, [withDirectives(createElementVNode(\"input\", {\n        id: _ctx.id,\n        ref: \"inputRef\",\n        autocomplete: _ctx.autocomplete,\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        autocapitalize: \"off\",\n        \"aria-expanded\": _ctx.expanded,\n        \"aria-labelledby\": _ctx.label,\n        class: normalizeClass([_ctx.nsSelectV2.is(_ctx.selectSize), _ctx.nsSelectV2.e(\"combobox-input\")]),\n        disabled: _ctx.disabled,\n        role: \"combobox\",\n        readonly: !_ctx.filterable,\n        spellcheck: \"false\",\n        type: \"text\",\n        name: _ctx.name,\n        unselectable: _ctx.expanded ? \"on\" : void 0,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args)),\n        onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n        onBlur: _cache[3] || (_cache[3] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n        onInput: _cache[4] || (_cache[4] = (...args) => _ctx.onInput && _ctx.onInput(...args)),\n        onCompositionstart: _cache[5] || (_cache[5] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n        onCompositionupdate: _cache[6] || (_cache[6] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n        onCompositionend: _cache[7] || (_cache[7] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n        onKeydown: [_cache[8] || (_cache[8] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[9] || (_cache[9] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[10] || (_cache[10] = withKeys(withModifiers((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), [\"stop\", \"prevent\"]), [\"enter\"])), _cache[11] || (_cache[11] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), [\"stop\", \"prevent\"]), [\"esc\"])), _cache[12] || (_cache[12] = withKeys(withModifiers((...args) => _ctx.handleDel && _ctx.handleDel(...args), [\"stop\"]), [\"delete\"]))]\n      }, null, 42, _hoisted_2), [[_directive_model_text, _ctx.states.displayInputValue]]), _ctx.filterable ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        ref: \"calculatorRef\",\n        \"aria-hidden\": \"true\",\n        class: normalizeClass(_ctx.nsSelectV2.e(\"input-calculator\")),\n        textContent: toDisplayString(_ctx.states.displayInputValue)\n      }, null, 10, _hoisted_3)) : createCommentVNode(\"v-if\", true)], 6)], 2)) : (openBlock(), createElementBlock(Fragment, {\n        key: 2\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass([_ctx.nsSelectV2.e(\"selected-item\"), _ctx.nsSelectV2.e(\"input-wrapper\")])\n      }, [withDirectives(createElementVNode(\"input\", {\n        id: _ctx.id,\n        ref: \"inputRef\",\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-labelledby\": _ctx.label,\n        \"aria-expanded\": _ctx.expanded,\n        autocapitalize: \"off\",\n        autocomplete: _ctx.autocomplete,\n        class: normalizeClass(_ctx.nsSelectV2.e(\"combobox-input\")),\n        disabled: _ctx.disabled,\n        name: _ctx.name,\n        role: \"combobox\",\n        readonly: !_ctx.filterable,\n        spellcheck: \"false\",\n        type: \"text\",\n        unselectable: _ctx.expanded ? \"on\" : void 0,\n        onCompositionstart: _cache[13] || (_cache[13] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n        onCompositionupdate: _cache[14] || (_cache[14] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n        onCompositionend: _cache[15] || (_cache[15] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n        onFocus: _cache[16] || (_cache[16] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n        onBlur: _cache[17] || (_cache[17] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n        onInput: _cache[18] || (_cache[18] = (...args) => _ctx.onInput && _ctx.onInput(...args)),\n        onKeydown: [_cache[19] || (_cache[19] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[20] || (_cache[20] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[21] || (_cache[21] = withKeys(withModifiers((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), [\"stop\", \"prevent\"]), [\"enter\"])), _cache[22] || (_cache[22] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), [\"stop\", \"prevent\"]), [\"esc\"]))],\n        \"onUpdate:modelValue\": _cache[23] || (_cache[23] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args))\n      }, null, 42, _hoisted_4), [[_directive_model_text, _ctx.states.displayInputValue]])], 2), _ctx.filterable ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        ref: \"calculatorRef\",\n        \"aria-hidden\": \"true\",\n        class: normalizeClass([_ctx.nsSelectV2.e(\"selected-item\"), _ctx.nsSelectV2.e(\"input-calculator\")]),\n        textContent: toDisplayString(_ctx.states.displayInputValue)\n      }, null, 10, _hoisted_5)) : createCommentVNode(\"v-if\", true)], 64)), _ctx.shouldShowPlaceholder ? (openBlock(), createElementBlock(\"span\", {\n        key: 3,\n        class: normalizeClass([_ctx.nsSelectV2.e(\"placeholder\"), _ctx.nsSelectV2.is(\"transparent\", _ctx.multiple ? _ctx.modelValue.length === 0 : !_ctx.hasModelValue)])\n      }, toDisplayString(_ctx.currentPlaceholder), 3)) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", {\n        class: normalizeClass(_ctx.nsSelectV2.e(\"suffix\"))\n      }, [_ctx.iconComponent ? withDirectives((openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([_ctx.nsSelectV2.e(\"caret\"), _ctx.nsInput.e(\"icon\"), _ctx.iconReverse])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])), [[vShow, !_ctx.showClearBtn]]) : createCommentVNode(\"v-if\", true), _ctx.showClearBtn && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 1,\n        class: normalizeClass([_ctx.nsSelectV2.e(\"caret\"), _ctx.nsInput.e(\"icon\")]),\n        onClick: withModifiers(_ctx.handleClear, [\"prevent\", \"stop\"])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.validateState && _ctx.validateIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 2,\n        class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"validateIcon\")])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)];\n    }),\n    content: withCtx(() => [createVNode(_component_el_select_menu, {\n      ref: \"menuRef\",\n      data: _ctx.filteredOptions,\n      width: _ctx.popperSize,\n      \"hovering-index\": _ctx.states.hoveringIndex,\n      \"scrollbar-always-on\": _ctx.scrollbarAlwaysOn\n    }, {\n      default: withCtx(scope => [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(scope)))]),\n      empty: withCtx(() => [renderSlot(_ctx.$slots, \"empty\", {}, () => [createElementVNode(\"p\", {\n        class: normalizeClass(_ctx.nsSelectV2.e(\"empty\"))\n      }, toDisplayString(_ctx.emptyText ? _ctx.emptyText : \"\"), 3)])]),\n      _: 3\n    }, 8, [\"data\", \"width\", \"hovering-index\", \"scrollbar-always-on\"])]),\n    _: 3\n  }, 8, [\"visible\", \"teleported\", \"popper-class\", \"popper-options\", \"effect\", \"placement\", \"transition\", \"persistent\", \"onBeforeShow\"])], 34)), [[_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]]);\n}\nvar Select = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/select.vue\"]]);\nexport { Select as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElSelectMenu","ElTag","ElTooltip","ElIcon","directives","ClickOutside","ModelText","vModelText","props","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","computed","modelValue","multiple","rawModelValue","fallback","useSelect","reactive","toRefs","provide","selectV2InjectionKey","height","API","popper","onSelect","onHover","onKeyboardNavigate","onKeyboardSelect","_createElementBlock","ref","class","_normalizeClass","b","m","_ctx","onClick","_cache","onMouseenter","comboBoxHovering","onMouseleave","_createVNode","visible","teleported","effect","placement","pure","transition","namespace","trigger","persistent","onBeforeShow","onHide","default","_withCtx","_a","_createElementVNode","_renderSlot","key","closable","size","type","_a2","style","_","disabled","maxWidth","_openBlock","onClose","_withDirectives","id","autocomplete","autocapitalize","role","readonly","spellcheck","unselectable","expanded","onFocus","onBlur","onInput","onCompositionstart","handleCompositionStart","onCompositionupdate","onCompositionend","onKeydown","_withKeys","textContent","_createBlock","content","data","width"],"sources":["../../../../../../packages/components/select-v2/src/select.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"selectRef\"\n    v-click-outside:[popperRef]=\"handleClickOutside\"\n    :class=\"[nsSelectV2.b(), nsSelectV2.m(selectSize)]\"\n    @click.stop=\"toggleMenu\"\n    @mouseenter=\"states.comboBoxHovering = true\"\n    @mouseleave=\"states.comboBoxHovering = false\"\n  >\n    <el-tooltip\n      ref=\"popper\"\n      :visible=\"dropdownMenuVisible\"\n      :teleported=\"teleported\"\n      :popper-class=\"[nsSelectV2.e('popper'), popperClass]\"\n      :gpu-acceleration=\"false\"\n      :stop-popper-mouse-event=\"false\"\n      :popper-options=\"popperOptions\"\n      :fallback-placements=\"['bottom-start', 'top-start', 'right', 'left']\"\n      :effect=\"effect\"\n      :placement=\"placement\"\n      pure\n      :transition=\"`${nsSelectV2.namespace.value}-zoom-in-top`\"\n      trigger=\"click\"\n      :persistent=\"persistent\"\n      @before-show=\"handleMenuEnter\"\n      @hide=\"states.inputValue = states.displayInputValue\"\n    >\n      <template #default>\n        <div\n          ref=\"selectionRef\"\n          :class=\"[\n            nsSelectV2.e('wrapper'),\n            nsSelectV2.is('focused', states.isComposing || expanded),\n            nsSelectV2.is('hovering', states.comboBoxHovering),\n            nsSelectV2.is('filterable', filterable),\n            nsSelectV2.is('disabled', selectDisabled),\n          ]\"\n        >\n          <div v-if=\"$slots.prefix\">\n            <slot name=\"prefix\" />\n          </div>\n          <div v-if=\"multiple\" :class=\"nsSelectV2.e('selection')\">\n            <template v-if=\"collapseTags && modelValue.length > 0\">\n              <div :class=\"nsSelectV2.e('selected-item')\">\n                <el-tag\n                  :closable=\"\n                    !selectDisabled && !states.cachedOptions[0]?.disable\n                  \"\n                  :size=\"collapseTagSize\"\n                  type=\"info\"\n                  disable-transitions\n                  @close=\"deleteTag($event, states.cachedOptions[0])\"\n                >\n                  <span\n                    :class=\"nsSelectV2.e('tags-text')\"\n                    :style=\"{\n                      maxWidth: `${tagMaxWidth}px`,\n                    }\"\n                    >{{ states.cachedOptions[0]?.label }}</span\n                  >\n                </el-tag>\n                <el-tag\n                  v-if=\"modelValue.length > 1\"\n                  :closable=\"false\"\n                  :size=\"collapseTagSize\"\n                  type=\"info\"\n                  disable-transitions\n                >\n                  <el-tooltip\n                    v-if=\"collapseTagsTooltip\"\n                    :disabled=\"dropdownMenuVisible\"\n                    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                    :effect=\"effect\"\n                    placement=\"bottom\"\n                    :teleported=\"false\"\n                  >\n                    <template #default>\n                      <span\n                        :class=\"nsSelectV2.e('tags-text')\"\n                        :style=\"{\n                          maxWidth: `${tagMaxWidth}px`,\n                        }\"\n                        >+ {{ modelValue.length - 1 }}</span\n                      >\n                    </template>\n                    <template #content>\n                      <div :class=\"nsSelectV2.e('selection')\">\n                        <div\n                          v-for=\"(selected, idx) in states.cachedOptions.slice(\n                            1\n                          )\"\n                          :key=\"idx\"\n                          :class=\"nsSelectV2.e('selected-item')\"\n                        >\n                          <el-tag\n                            :key=\"getValueKey(selected)\"\n                            :closable=\"!selectDisabled && !selected.disabled\"\n                            :size=\"collapseTagSize\"\n                            class=\"in-tooltip\"\n                            type=\"info\"\n                            disable-transitions\n                            @close=\"deleteTag($event, selected)\"\n                          >\n                            <span\n                              :class=\"nsSelectV2.e('tags-text')\"\n                              :style=\"{\n                                maxWidth: `${tagMaxWidth}px`,\n                              }\"\n                              >{{ getLabel(selected) }}</span\n                            >\n                          </el-tag>\n                        </div>\n                      </div>\n                    </template>\n                  </el-tooltip>\n                  <span\n                    v-else\n                    :class=\"nsSelectV2.e('tags-text')\"\n                    :style=\"{\n                      maxWidth: `${tagMaxWidth}px`,\n                    }\"\n                    >+ {{ modelValue.length - 1 }}</span\n                  >\n                </el-tag>\n              </div>\n            </template>\n\n            <template v-else>\n              <div\n                v-for=\"(selected, idx) in states.cachedOptions\"\n                :key=\"idx\"\n                :class=\"nsSelectV2.e('selected-item')\"\n              >\n                <el-tag\n                  :key=\"getValueKey(selected)\"\n                  :closable=\"!selectDisabled && !selected.disabled\"\n                  :size=\"collapseTagSize\"\n                  type=\"info\"\n                  disable-transitions\n                  @close=\"deleteTag($event, selected)\"\n                >\n                  <span\n                    :class=\"nsSelectV2.e('tags-text')\"\n                    :style=\"{\n                      maxWidth: `${tagMaxWidth}px`,\n                    }\"\n                    >{{ getLabel(selected) }}</span\n                  >\n                </el-tag>\n              </div>\n            </template>\n            <div\n              :class=\"[\n                nsSelectV2.e('selected-item'),\n                nsSelectV2.e('input-wrapper'),\n              ]\"\n              :style=\"inputWrapperStyle\"\n            >\n              <input\n                :id=\"id\"\n                ref=\"inputRef\"\n                v-model-text=\"states.displayInputValue\"\n                :autocomplete=\"autocomplete\"\n                aria-autocomplete=\"list\"\n                aria-haspopup=\"listbox\"\n                autocapitalize=\"off\"\n                :aria-expanded=\"expanded\"\n                :aria-labelledby=\"label\"\n                :class=\"[\n                  nsSelectV2.is(selectSize),\n                  nsSelectV2.e('combobox-input'),\n                ]\"\n                :disabled=\"disabled\"\n                role=\"combobox\"\n                :readonly=\"!filterable\"\n                spellcheck=\"false\"\n                type=\"text\"\n                :name=\"name\"\n                :unselectable=\"expanded ? 'on' : undefined\"\n                @update:modelValue=\"onUpdateInputValue\"\n                @focus=\"handleFocus\"\n                @blur=\"handleBlur\"\n                @input=\"onInput\"\n                @compositionstart=\"handleCompositionStart\"\n                @compositionupdate=\"handleCompositionUpdate\"\n                @compositionend=\"handleCompositionEnd\"\n                @keydown.up.stop.prevent=\"onKeyboardNavigate('backward')\"\n                @keydown.down.stop.prevent=\"onKeyboardNavigate('forward')\"\n                @keydown.enter.stop.prevent=\"onKeyboardSelect\"\n                @keydown.esc.stop.prevent=\"handleEsc\"\n                @keydown.delete.stop=\"handleDel\"\n              />\n              <span\n                v-if=\"filterable\"\n                ref=\"calculatorRef\"\n                aria-hidden=\"true\"\n                :class=\"nsSelectV2.e('input-calculator')\"\n                v-text=\"states.displayInputValue\"\n              />\n            </div>\n          </div>\n          <template v-else>\n            <div\n              :class=\"[\n                nsSelectV2.e('selected-item'),\n                nsSelectV2.e('input-wrapper'),\n              ]\"\n            >\n              <input\n                :id=\"id\"\n                ref=\"inputRef\"\n                v-model-text=\"states.displayInputValue\"\n                aria-autocomplete=\"list\"\n                aria-haspopup=\"listbox\"\n                :aria-labelledby=\"label\"\n                :aria-expanded=\"expanded\"\n                autocapitalize=\"off\"\n                :autocomplete=\"autocomplete\"\n                :class=\"nsSelectV2.e('combobox-input')\"\n                :disabled=\"disabled\"\n                :name=\"name\"\n                role=\"combobox\"\n                :readonly=\"!filterable\"\n                spellcheck=\"false\"\n                type=\"text\"\n                :unselectable=\"expanded ? 'on' : undefined\"\n                @compositionstart=\"handleCompositionStart\"\n                @compositionupdate=\"handleCompositionUpdate\"\n                @compositionend=\"handleCompositionEnd\"\n                @focus=\"handleFocus\"\n                @blur=\"handleBlur\"\n                @input=\"onInput\"\n                @keydown.up.stop.prevent=\"onKeyboardNavigate('backward')\"\n                @keydown.down.stop.prevent=\"onKeyboardNavigate('forward')\"\n                @keydown.enter.stop.prevent=\"onKeyboardSelect\"\n                @keydown.esc.stop.prevent=\"handleEsc\"\n                @update:modelValue=\"onUpdateInputValue\"\n              />\n            </div>\n            <span\n              v-if=\"filterable\"\n              ref=\"calculatorRef\"\n              aria-hidden=\"true\"\n              :class=\"[\n                nsSelectV2.e('selected-item'),\n                nsSelectV2.e('input-calculator'),\n              ]\"\n              v-text=\"states.displayInputValue\"\n            />\n          </template>\n          <span\n            v-if=\"shouldShowPlaceholder\"\n            :class=\"[\n              nsSelectV2.e('placeholder'),\n              nsSelectV2.is(\n                'transparent',\n                multiple ? modelValue.length === 0 : !hasModelValue\n              ),\n            ]\"\n          >\n            {{ currentPlaceholder }}\n          </span>\n          <span :class=\"nsSelectV2.e('suffix')\">\n            <el-icon\n              v-if=\"iconComponent\"\n              v-show=\"!showClearBtn\"\n              :class=\"[nsSelectV2.e('caret'), nsInput.e('icon'), iconReverse]\"\n            >\n              <component :is=\"iconComponent\" />\n            </el-icon>\n            <el-icon\n              v-if=\"showClearBtn && clearIcon\"\n              :class=\"[nsSelectV2.e('caret'), nsInput.e('icon')]\"\n              @click.prevent.stop=\"handleClear\"\n            >\n              <component :is=\"clearIcon\" />\n            </el-icon>\n            <el-icon\n              v-if=\"validateState && validateIcon\"\n              :class=\"[nsInput.e('icon'), nsInput.e('validateIcon')]\"\n            >\n              <component :is=\"validateIcon\" />\n            </el-icon>\n          </span>\n        </div>\n      </template>\n      <template #content>\n        <el-select-menu\n          ref=\"menuRef\"\n          :data=\"filteredOptions\"\n          :width=\"popperSize\"\n          :hovering-index=\"states.hoveringIndex\"\n          :scrollbar-always-on=\"scrollbarAlwaysOn\"\n        >\n          <template #default=\"scope\">\n            <slot v-bind=\"scope\" />\n          </template>\n          <template #empty>\n            <slot name=\"empty\">\n              <p :class=\"nsSelectV2.e('empty')\">\n                {{ emptyText ? emptyText : '' }}\n              </p>\n            </slot>\n          </template>\n        </el-select-menu>\n      </template>\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  provide,\n  reactive,\n  toRefs,\n  vModelText,\n} from 'vue'\nimport { isArray } from '@element-plus/utils'\nimport { ClickOutside } from '@element-plus/directives'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElSelectMenu from './select-dropdown'\nimport useSelect from './useSelect'\nimport { selectV2InjectionKey } from './token'\nimport { SelectProps } from './defaults'\nexport default defineComponent({\n  name: 'ElSelectV2',\n  components: {\n    ElSelectMenu,\n    ElTag,\n    ElTooltip,\n    ElIcon,\n  },\n  directives: { ClickOutside, ModelText: vModelText },\n  props: SelectProps,\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'remove-tag',\n    'clear',\n    'visible-change',\n    'focus',\n    'blur',\n  ],\n\n  setup(props, { emit }) {\n    const modelValue = computed(() => {\n      const { modelValue: rawModelValue, multiple } = props\n      const fallback = multiple ? [] : undefined\n      // When it is array, we check if this is multi-select.\n      // Based on the result we get\n      if (isArray(rawModelValue)) {\n        return multiple ? rawModelValue : fallback\n      }\n      return multiple ? fallback : rawModelValue\n    })\n\n    const API = useSelect(\n      reactive({\n        ...toRefs(props),\n        modelValue,\n      }),\n      emit\n    )\n    // TODO, remove the any cast to align the actual API.\n    provide(selectV2InjectionKey, {\n      props: reactive({\n        ...toRefs(props),\n        height: API.popupHeight,\n        modelValue,\n      }),\n      popper: API.popper,\n      onSelect: API.onSelect,\n      onHover: API.onHover,\n      onKeyboardNavigate: API.onKeyboardNavigate,\n      onKeyboardSelect: API.onKeyboardSelect,\n    } as any)\n\n    return {\n      ...API,\n      modelValue,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}