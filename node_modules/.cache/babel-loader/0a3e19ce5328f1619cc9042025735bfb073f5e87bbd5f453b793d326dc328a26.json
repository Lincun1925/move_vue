{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey, handleCurrentChange } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: {\n      type: iconPropType\n    }\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    watch(() => props.currentNodeKey, newVal => {\n      store.value.setCurrentNodeKey(newVal);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      handleCurrentChange(store, ctx.emit, () => store.value.setUserCurrentNode(node, shouldAutoExpandParent));\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      handleCurrentChange(store, ctx.emit, () => store.value.setCurrentNodeKey(key, shouldAutoExpandParent));\n    };\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n    const remove = data => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree.vue\"]]);\nexport { Tree as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","default","emptyText","renderAfterExpand","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","String","Number","renderContent","showCheckbox","draggable","allowDrag","allowDrop","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","emits","setup","ctx","t","useLocale","useNamespace","ref","TreeStore","key","store","value","initialize","root","broadcastExpanded","dragState","useDragNodeHandler","el$","dropIndicator$","useKeydown","computed","childNodes","length","visible","watch","newVal","setCurrentNodeKey","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","Error","filter","node","getNodeKeyUtil","parent","path","reverse","leafOnly","includeHalfChecked","getCheckedNodes","getCurrentNode","currentNode2","getCurrentKey","nodes","setCheckedNodes","keys","setCheckedKeys","setChecked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","handleCurrentChange","emit","setCurrentKey","remove","parentNode","append","refNode","insertBefore","insertAfter","handleNodeExpand","nodeData","instance","updateChildren","provide","currentNode","getCurrentInstance","formItemContextKey","ns","isEmpty","getNodeKey","getNodePath","getCheckedKeys","getNode","updateKeyChildren","_openBlock","class","_ctx","role","onNodeExpand","_createElementVNode"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { iconPropType } from '@element-plus/utils'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/tokens'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: {\n      type: iconPropType,\n    },\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.currentNodeKey,\n      (newVal) => {\n        store.value.setCurrentNodeKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n\n      handleCurrentChange(store, ctx.emit, () =>\n        store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n      )\n    }\n\n    const setCurrentKey = (key?: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n\n      handleCurrentChange(store, ctx.emit, () =>\n        store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n      )\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}