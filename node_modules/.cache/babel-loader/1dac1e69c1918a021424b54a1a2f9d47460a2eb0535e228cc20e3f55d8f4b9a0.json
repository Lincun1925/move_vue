{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, openBlock, createElementBlock, normalizeClass, unref, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown, Minus, ArrowUp, Plus } from '@element-plus/icons-vue';\nimport '../../../constants/index.mjs';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isString } from '@vue/shared';\nimport { vRepeatClick } from '../../../directives/repeat-click/index.mjs';\nconst _hoisted_1 = [\"aria-label\", \"onKeydown\"];\nconst _hoisted_2 = [\"aria-label\", \"onKeydown\"];\nconst __default__ = defineComponent({\n  name: \"ElInputNumber\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"input-number\");\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      formItem\n    } = useFormItem();\n    const minDisabled = computed(() => isNumber(props.modelValue) && props.modelValue <= props.min);\n    const maxDisabled = computed(() => isNumber(props.modelValue) && props.modelValue >= props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n      let currentValue = data.currentValue;\n      if (isNil(currentValue)) return \"\";\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n      return currentValue;\n    });\n    const toPrecision = (num, pre) => {\n      if (isUndefined(pre)) pre = numPrecision.value;\n      if (pre === 0) return Math.round(num);\n      let snum = String(num);\n      const pointPos = snum.indexOf(\".\");\n      if (pointPos === -1) return num;\n      const nums = snum.replace(\".\", \"\").split(\"\");\n      const datum = nums[pointPos + pre];\n      if (!datum) return num;\n      const length = snum.length;\n      if (snum.charAt(length - 1) === \"5\") {\n        snum = `${snum.slice(0, Math.max(0, length - 1))}6`;\n      }\n      return Number.parseFloat(Number(snum).toFixed(pre));\n    };\n    const getPrecision = value => {\n      if (isNil(value)) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n      return precision;\n    };\n    const ensurePrecision = (val, coefficient = 1) => {\n      if (!isNumber(val)) return data.currentValue;\n      return toPrecision(val + props.step * coefficient);\n    };\n    const increase = () => {\n      if (props.readonly || inputNumberDisabled.value || maxDisabled.value) return;\n      const value = Number(displayValue.value) || 0;\n      const newVal = ensurePrecision(value);\n      setCurrentValue(newVal);\n      emit(INPUT_EVENT, data.currentValue);\n    };\n    const decrease = () => {\n      if (props.readonly || inputNumberDisabled.value || minDisabled.value) return;\n      const value = Number(displayValue.value) || 0;\n      const newVal = ensurePrecision(value, -1);\n      setCurrentValue(newVal);\n      emit(INPUT_EVENT, data.currentValue);\n    };\n    const verifyValue = (value, update) => {\n      const {\n        max,\n        min,\n        step,\n        precision,\n        stepStrictly,\n        valueOnClear\n      } = props;\n      let newVal = Number(value);\n      if (isNil(value) || Number.isNaN(newVal)) {\n        return null;\n      }\n      if (value === \"\") {\n        if (valueOnClear === null) {\n          return null;\n        }\n        newVal = isString(valueOnClear) ? {\n          min,\n          max\n        }[valueOnClear] : valueOnClear;\n      }\n      if (stepStrictly) {\n        newVal = toPrecision(Math.round(newVal / step) * step, precision);\n      }\n      if (!isUndefined(precision)) {\n        newVal = toPrecision(newVal, precision);\n      }\n      if (newVal > max || newVal < min) {\n        newVal = newVal > max ? max : min;\n        update && emit(UPDATE_MODEL_EVENT, newVal);\n      }\n      return newVal;\n    };\n    const setCurrentValue = (value, emitChange = true) => {\n      var _a;\n      const oldVal = data.currentValue;\n      const newVal = verifyValue(value);\n      if (oldVal === newVal) return;\n      if (!emitChange) {\n        emit(UPDATE_MODEL_EVENT, newVal);\n        return;\n      }\n      data.userInput = null;\n      emit(UPDATE_MODEL_EVENT, newVal);\n      emit(CHANGE_EVENT, newVal, oldVal);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n      data.currentValue = newVal;\n    };\n    const handleInput = value => {\n      data.userInput = value;\n      const newVal = value === \"\" ? null : Number(value);\n      emit(INPUT_EVENT, newVal);\n      setCurrentValue(newVal, false);\n    };\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n      data.userInput = null;\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a;\n      emit(\"blur\", event);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n      }\n    };\n    watch(() => props.modelValue, value => {\n      const userInput = verifyValue(data.userInput);\n      const newValue = verifyValue(value, true);\n      if (!isNumber(userInput) && (!userInput || userInput !== newValue)) {\n        data.currentValue = newValue;\n        data.userInput = null;\n      }\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n      const {\n        min,\n        max,\n        modelValue\n      } = props;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      if (Number.isFinite(max)) {\n        innerInput.setAttribute(\"aria-valuemax\", String(max));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemax\");\n      }\n      if (Number.isFinite(min)) {\n        innerInput.setAttribute(\"aria-valuemin\", String(min));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemin\");\n      }\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n      if (!isNumber(modelValue) && modelValue != null) {\n        let val = Number(modelValue);\n        if (Number.isNaN(val)) {\n          val = null;\n        }\n        emit(UPDATE_MODEL_EVENT, val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", `${data.currentValue}`);\n    });\n    expose({\n      focus,\n      blur\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(unref(inputNumberSize)), unref(ns).is(\"disabled\", unref(inputNumberDisabled)), unref(ns).is(\"without-controls\", !_ctx.controls), unref(ns).is(\"controls-right\", unref(controlsAtRight))]),\n        onDragstart: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"prevent\"]))\n      }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        role: \"button\",\n        \"aria-label\": unref(t)(\"el.inputNumber.decrease\"),\n        class: normalizeClass([unref(ns).e(\"decrease\"), unref(ns).is(\"disabled\", unref(minDisabled))]),\n        onKeydown: withKeys(decrease, [\"enter\"])\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [unref(controlsAtRight) ? (openBlock(), createBlock(unref(ArrowDown), {\n          key: 0\n        })) : (openBlock(), createBlock(unref(Minus), {\n          key: 1\n        }))]),\n        _: 1\n      })], 42, _hoisted_1)), [[unref(vRepeatClick), decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        role: \"button\",\n        \"aria-label\": unref(t)(\"el.inputNumber.increase\"),\n        class: normalizeClass([unref(ns).e(\"increase\"), unref(ns).is(\"disabled\", unref(maxDisabled))]),\n        onKeydown: withKeys(increase, [\"enter\"])\n      }, [createVNode(unref(ElIcon), null, {\n        default: withCtx(() => [unref(controlsAtRight) ? (openBlock(), createBlock(unref(ArrowUp), {\n          key: 0\n        })) : (openBlock(), createBlock(unref(Plus), {\n          key: 1\n        }))]),\n        _: 1\n      })], 42, _hoisted_2)), [[unref(vRepeatClick), increase]]) : createCommentVNode(\"v-if\", true), createVNode(unref(ElInput), {\n        id: _ctx.id,\n        ref_key: \"input\",\n        ref: input,\n        type: \"number\",\n        step: _ctx.step,\n        \"model-value\": unref(displayValue),\n        placeholder: _ctx.placeholder,\n        readonly: _ctx.readonly,\n        disabled: unref(inputNumberDisabled),\n        size: unref(inputNumberSize),\n        max: _ctx.max,\n        min: _ctx.min,\n        name: _ctx.name,\n        label: _ctx.label,\n        \"validate-event\": false,\n        onKeydown: [withKeys(withModifiers(increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(decrease, [\"prevent\"]), [\"down\"])],\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onInput: handleInput,\n        onChange: handleInputChange\n      }, null, 8, [\"id\", \"step\", \"model-value\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\"])], 34);\n    };\n  }\n});\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue\"]]);\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["name","t","useLocale","useNamespace","input","ref","data","reactive","currentValue","props","userInput","formItem","useFormItem","computed","isNumber","modelValue","min","max","getPrecision","step","isUndefined","precision","debugWarn","Math","stepPrecision","controls","controlsPosition","inputNumberSize","useSize","inputNumberDisabled","useDisabled","isNil","isNaN","toFixed","num","pre","numPrecision","round","String","snum","pointPos","nums","split","datum","length","slice","Number","parseFloat","value","toString","valueString","dotPosition","ensurePrecision","val","toPrecision","coefficient","increase","maxDisabled","displayValue","setCurrentValue","newVal","emit","decrease","minDisabled","update","stepStrictly","valueOnClear","isString","UPDATE_MODEL_EVENT","event","watch","immediate","onMounted","innerInput","isFinite","setAttribute","removeAttribute","onUpdated"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.decrease')\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.increase')\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      :id=\"id\"\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :readonly=\"readonly\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, onMounted, onUpdated, reactive, ref, watch } from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { ElInput } from '@element-plus/components/input'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { vRepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { debugWarn, isNumber, isString, isUndefined } from '@element-plus/utils'\nimport { ArrowDown, ArrowUp, Minus, Plus } from '@element-plus/icons-vue'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { inputNumberEmits, inputNumberProps } from './input-number'\n\nimport type { InputInstance } from '@element-plus/components/input'\n\ndefineOptions({\n  name: 'ElInputNumber',\n})\n\nconst props = defineProps(inputNumberProps)\nconst emit = defineEmits(inputNumberEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('input-number')\nconst input = ref<InputInstance>()\n\ninterface Data {\n  currentValue: number | null | undefined\n  userInput: null | number | string\n}\nconst data = reactive<Data>({\n  currentValue: props.modelValue,\n  userInput: null,\n})\n\nconst { formItem } = useFormItem()\n\nconst minDisabled = computed(\n  () => isNumber(props.modelValue) && props.modelValue <= props.min\n)\nconst maxDisabled = computed(\n  () => isNumber(props.modelValue) && props.modelValue >= props.max\n)\n\nconst numPrecision = computed(() => {\n  const stepPrecision = getPrecision(props.step)\n  if (!isUndefined(props.precision)) {\n    if (stepPrecision > props.precision) {\n      debugWarn(\n        'InputNumber',\n        'precision should not be less than the decimal places of step'\n      )\n    }\n    return props.precision\n  } else {\n    return Math.max(getPrecision(props.modelValue), stepPrecision)\n  }\n})\nconst controlsAtRight = computed(() => {\n  return props.controls && props.controlsPosition === 'right'\n})\n\nconst inputNumberSize = useSize()\nconst inputNumberDisabled = useDisabled()\n\nconst displayValue = computed(() => {\n  if (data.userInput !== null) {\n    return data.userInput\n  }\n  let currentValue: number | string | undefined | null = data.currentValue\n  if (isNil(currentValue)) return ''\n  if (isNumber(currentValue)) {\n    if (Number.isNaN(currentValue)) return ''\n    if (!isUndefined(props.precision)) {\n      currentValue = currentValue.toFixed(props.precision)\n    }\n  }\n  return currentValue\n})\nconst toPrecision = (num: number, pre?: number) => {\n  if (isUndefined(pre)) pre = numPrecision.value\n  if (pre === 0) return Math.round(num)\n  let snum = String(num)\n  const pointPos = snum.indexOf('.')\n  if (pointPos === -1) return num\n  const nums = snum.replace('.', '').split('')\n  const datum = nums[pointPos + pre]\n  if (!datum) return num\n  const length = snum.length\n  if (snum.charAt(length - 1) === '5') {\n    snum = `${snum.slice(0, Math.max(0, length - 1))}6`\n  }\n  return Number.parseFloat(Number(snum).toFixed(pre))\n}\nconst getPrecision = (value: number | null | undefined) => {\n  if (isNil(value)) return 0\n  const valueString = value.toString()\n  const dotPosition = valueString.indexOf('.')\n  let precision = 0\n  if (dotPosition !== -1) {\n    precision = valueString.length - dotPosition - 1\n  }\n  return precision\n}\nconst ensurePrecision = (val: number, coefficient: 1 | -1 = 1) => {\n  if (!isNumber(val)) return data.currentValue\n  // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n  return toPrecision(val + props.step * coefficient)\n}\nconst increase = () => {\n  if (props.readonly || inputNumberDisabled.value || maxDisabled.value) return\n  const value = Number(displayValue.value) || 0\n  const newVal = ensurePrecision(value)\n  setCurrentValue(newVal)\n  emit(INPUT_EVENT, data.currentValue)\n}\nconst decrease = () => {\n  if (props.readonly || inputNumberDisabled.value || minDisabled.value) return\n  const value = Number(displayValue.value) || 0\n  const newVal = ensurePrecision(value, -1)\n  setCurrentValue(newVal)\n  emit(INPUT_EVENT, data.currentValue)\n}\nconst verifyValue = (\n  value: number | string | null | undefined,\n  update?: boolean\n): number | null | undefined => {\n  const { max, min, step, precision, stepStrictly, valueOnClear } = props\n  let newVal = Number(value)\n  if (isNil(value) || Number.isNaN(newVal)) {\n    return null\n  }\n  if (value === '') {\n    if (valueOnClear === null) {\n      return null\n    }\n    newVal = isString(valueOnClear) ? { min, max }[valueOnClear] : valueOnClear\n  }\n  if (stepStrictly) {\n    newVal = toPrecision(Math.round(newVal / step) * step, precision)\n  }\n  if (!isUndefined(precision)) {\n    newVal = toPrecision(newVal, precision)\n  }\n  if (newVal > max || newVal < min) {\n    newVal = newVal > max ? max : min\n    update && emit(UPDATE_MODEL_EVENT, newVal)\n  }\n  return newVal\n}\nconst setCurrentValue = (\n  value: number | string | null | undefined,\n  emitChange = true\n) => {\n  const oldVal = data.currentValue\n  const newVal = verifyValue(value)\n  if (oldVal === newVal) return\n  if (!emitChange) {\n    emit(UPDATE_MODEL_EVENT, newVal!)\n    return\n  }\n  data.userInput = null\n  emit(UPDATE_MODEL_EVENT, newVal!)\n  emit(CHANGE_EVENT, newVal!, oldVal!)\n  if (props.validateEvent) {\n    formItem?.validate?.('change').catch((err) => debugWarn(err))\n  }\n  data.currentValue = newVal\n}\nconst handleInput = (value: string) => {\n  data.userInput = value\n  const newVal = value === '' ? null : Number(value)\n  emit(INPUT_EVENT, newVal)\n  setCurrentValue(newVal, false)\n}\nconst handleInputChange = (value: string) => {\n  const newVal = value !== '' ? Number(value) : ''\n  if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n    setCurrentValue(newVal)\n  }\n  data.userInput = null\n}\n\nconst focus = () => {\n  input.value?.focus?.()\n}\n\nconst blur = () => {\n  input.value?.blur?.()\n}\n\nconst handleFocus = (event: MouseEvent | FocusEvent) => {\n  emit('focus', event)\n}\n\nconst handleBlur = (event: MouseEvent | FocusEvent) => {\n  emit('blur', event)\n  if (props.validateEvent) {\n    formItem?.validate?.('blur').catch((err) => debugWarn(err))\n  }\n}\n\nwatch(\n  () => props.modelValue,\n  (value) => {\n    const userInput = verifyValue(data.userInput)\n    const newValue = verifyValue(value, true)\n    if (!isNumber(userInput) && (!userInput || userInput !== newValue)) {\n      data.currentValue = newValue\n      data.userInput = null\n    }\n  },\n  { immediate: true }\n)\nonMounted(() => {\n  const { min, max, modelValue } = props\n  const innerInput = input.value?.input as HTMLInputElement\n  innerInput.setAttribute('role', 'spinbutton')\n  if (Number.isFinite(max)) {\n    innerInput.setAttribute('aria-valuemax', String(max))\n  } else {\n    innerInput.removeAttribute('aria-valuemax')\n  }\n  if (Number.isFinite(min)) {\n    innerInput.setAttribute('aria-valuemin', String(min))\n  } else {\n    innerInput.removeAttribute('aria-valuemin')\n  }\n  innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n  innerInput.setAttribute('aria-disabled', String(inputNumberDisabled.value))\n  if (!isNumber(modelValue) && modelValue != null) {\n    let val: number | null = Number(modelValue)\n    if (Number.isNaN(val)) {\n      val = null\n    }\n    emit(UPDATE_MODEL_EVENT, val!)\n  }\n})\nonUpdated(() => {\n  const innerInput = input.value?.input\n  innerInput?.setAttribute('aria-valuenow', `${data.currentValue}`)\n})\ndefineExpose({\n  /** @description get focus the input component */\n  focus,\n  /** @description remove focus the input component */\n  blur,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}