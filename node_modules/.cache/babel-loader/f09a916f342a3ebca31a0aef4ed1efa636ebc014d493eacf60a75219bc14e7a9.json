{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, provide, watch, unref, nextTick, onMounted, onBeforeUnmount, renderSlot } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useFocusReason, getEdges, createFocusOutPreventedEvent, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements, isFocusCausedByUserEvent } from './utils.mjs';\nimport { ON_TRAP_FOCUS_EVT, ON_RELEASE_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS, FOCUS_AFTER_RELEASED } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useEscapeKeydown } from '../../../hooks/use-escape-keydown/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { isString } from '@vue/shared';\nconst _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n    focusTrapEl: Object,\n    focusStartEl: {\n      type: [Object, String],\n      default: \"first\"\n    }\n  },\n  emits: [ON_TRAP_FOCUS_EVT, ON_RELEASE_FOCUS_EVT, \"focusin\", \"focusout\", \"focusout-prevented\", \"release-requested\"],\n  setup(props, {\n    emit\n  }) {\n    const forwardRef = ref();\n    let lastFocusBeforeTrapped;\n    let lastFocusAfterTrapped;\n    const {\n      focusReason\n    } = useFocusReason();\n    useEscapeKeydown(event => {\n      if (props.trapped && !focusLayer.paused) {\n        emit(\"release-requested\", event);\n      }\n    });\n    const focusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true;\n      },\n      resume() {\n        this.paused = false;\n      }\n    };\n    const onKeydown = e => {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      const {\n        key,\n        altKey,\n        ctrlKey,\n        metaKey,\n        currentTarget,\n        shiftKey\n      } = e;\n      const {\n        loop\n      } = props;\n      const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      const currentFocusingEl = document.activeElement;\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget;\n        const [first, last] = getEdges(container);\n        const isTabbable = first && last;\n        if (!isTabbable) {\n          if (currentFocusingEl === container) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value\n            });\n            emit(\"focusout-prevented\", focusoutPreventedEvent);\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault();\n            }\n          }\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value\n            });\n            emit(\"focusout-prevented\", focusoutPreventedEvent);\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault();\n              if (loop) tryFocus(first, true);\n            }\n          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value\n            });\n            emit(\"focusout-prevented\", focusoutPreventedEvent);\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault();\n              if (loop) tryFocus(last, true);\n            }\n          }\n        }\n      }\n    };\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown\n    });\n    watch(() => props.focusTrapEl, focusTrapEl => {\n      if (focusTrapEl) {\n        forwardRef.value = focusTrapEl;\n      }\n    }, {\n      immediate: true\n    });\n    watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {\n      if (forwardRef2) {\n        forwardRef2.addEventListener(\"keydown\", onKeydown);\n        forwardRef2.addEventListener(\"focusin\", onFocusIn);\n        forwardRef2.addEventListener(\"focusout\", onFocusOut);\n      }\n      if (oldForwardRef) {\n        oldForwardRef.removeEventListener(\"keydown\", onKeydown);\n        oldForwardRef.removeEventListener(\"focusin\", onFocusIn);\n        oldForwardRef.removeEventListener(\"focusout\", onFocusOut);\n      }\n    });\n    const trapOnFocus = e => {\n      emit(ON_TRAP_FOCUS_EVT, e);\n    };\n    const releaseOnFocus = e => emit(ON_RELEASE_FOCUS_EVT, e);\n    const onFocusIn = e => {\n      const trapContainer = unref(forwardRef);\n      if (!trapContainer) return;\n      const target = e.target;\n      const relatedTarget = e.relatedTarget;\n      const isFocusedInTrap = target && trapContainer.contains(target);\n      if (!props.trapped) {\n        const isPrevFocusedInTrap = relatedTarget && trapContainer.contains(relatedTarget);\n        if (!isPrevFocusedInTrap) {\n          lastFocusBeforeTrapped = relatedTarget;\n        }\n      }\n      if (isFocusedInTrap) emit(\"focusin\", e);\n      if (focusLayer.paused) return;\n      if (props.trapped) {\n        if (isFocusedInTrap) {\n          lastFocusAfterTrapped = target;\n        } else {\n          tryFocus(lastFocusAfterTrapped, true);\n        }\n      }\n    };\n    const onFocusOut = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n      if (props.trapped) {\n        const relatedTarget = e.relatedTarget;\n        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {\n          setTimeout(() => {\n            if (!focusLayer.paused && props.trapped) {\n              const focusoutPreventedEvent = createFocusOutPreventedEvent({\n                focusReason: focusReason.value\n              });\n              emit(\"focusout-prevented\", focusoutPreventedEvent);\n              if (!focusoutPreventedEvent.defaultPrevented) {\n                tryFocus(lastFocusAfterTrapped, true);\n              }\n            }\n          }, 0);\n        }\n      } else {\n        const target = e.target;\n        const isFocusedInTrap = target && trapContainer.contains(target);\n        if (!isFocusedInTrap) emit(\"focusout\", e);\n      }\n    };\n    async function startTrap() {\n      await nextTick();\n      const trapContainer = unref(forwardRef);\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        const prevFocusedElement = trapContainer.contains(document.activeElement) ? lastFocusBeforeTrapped : document.activeElement;\n        lastFocusBeforeTrapped = prevFocusedElement;\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n        if (!isPrevFocusContained) {\n          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);\n          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);\n          trapContainer.dispatchEvent(focusEvent);\n          if (!focusEvent.defaultPrevented) {\n            nextTick(() => {\n              let focusStartEl = props.focusStartEl;\n              if (!isString(focusStartEl)) {\n                tryFocus(focusStartEl);\n                if (document.activeElement !== focusStartEl) {\n                  focusStartEl = \"first\";\n                }\n              }\n              if (focusStartEl === \"first\") {\n                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n              }\n              if (document.activeElement === prevFocusedElement || focusStartEl === \"container\") {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n    }\n    function stopTrap() {\n      const trapContainer = unref(forwardRef);\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);\n        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {\n          ...FOCUS_AFTER_TRAPPED_OPTS,\n          detail: {\n            focusReason: focusReason.value\n          }\n        });\n        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);\n        trapContainer.dispatchEvent(releasedEvent);\n        if (!releasedEvent.defaultPrevented && (focusReason.value == \"keyboard\" || !isFocusCausedByUserEvent())) {\n          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body);\n        }\n        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus);\n        focusableStack.remove(focusLayer);\n      }\n    }\n    onMounted(() => {\n      if (props.trapped) {\n        startTrap();\n      }\n      watch(() => props.trapped, trapped => {\n        if (trapped) {\n          startTrap();\n        } else {\n          stopTrap();\n        }\n      });\n    });\n    onBeforeUnmount(() => {\n      if (props.trapped) {\n        stopTrap();\n      }\n    });\n    return {\n      onKeydown\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\", {\n    handleKeydown: _ctx.onKeydown\n  });\n}\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue\"]]);\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","trapped","focusTrapEl","focusStartEl","type","Object","String","default","emits","ON_TRAP_FOCUS_EVT","ON_RELEASE_FOCUS_EVT","setup","emit","forwardRef","ref","focusReason","useFocusReason","useEscapeKeydown","event","focusLayer","paused","pause","resume","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","EVENT_CODE","currentFocusingEl","document","isTabbing","container","first","last","isTabbable","focusoutPreventedEvent","createFocusOutPreventedEvent","defaultPrevented","preventDefault","tryFocus","provide","FOCUS_TRAP_INJECTION_KEY","focusTrapRef","onKeydown","watch","value","immediate","forwardRef2","oldForwardRef","onFocusIn","onFocusOut","releaseOnFocus","unref","trapContainer","target","relatedTarget","isFocusedInTrap","isPrevFocusedInTrap","lastFocusBeforeTrapped","lastFocusAfterTrapped","isNil","setTimeout","nextTick","focusableStack","push","prevFocusedElement","activeElement","isPrevFocusContained","focusEvent","Event","FOCUS_AFTER_TRAPPED_OPTS","FOCUS_AFTER_TRAPPED","trapOnFocus","dispatchEvent","isString","focusFirstDescendant","CustomEvent","FOCUS_AFTER_RELEASED","detail","releasedEvent","isFocusCausedByUserEvent","remove","onMounted","startTrap","stopTrap","onBeforeUnmount","_renderSlot","handleKeydown","_ctx"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot :handle-keydown=\"onKeydown\" />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useEscapeKeydown } from '@element-plus/hooks'\nimport { isString } from '@element-plus/utils'\nimport {\n  createFocusOutPreventedEvent,\n  focusFirstDescendant,\n  focusableStack,\n  getEdges,\n  isFocusCausedByUserEvent,\n  obtainAllFocusableElements,\n  tryFocus,\n  useFocusReason,\n} from './utils'\nimport {\n  FOCUS_AFTER_RELEASED,\n  FOCUS_AFTER_TRAPPED,\n  FOCUS_AFTER_TRAPPED_OPTS,\n  FOCUS_TRAP_INJECTION_KEY,\n  ON_RELEASE_FOCUS_EVT,\n  ON_TRAP_FOCUS_EVT,\n} from './tokens'\n\nimport type { PropType } from 'vue'\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n    focusTrapEl: Object as PropType<HTMLElement>,\n    focusStartEl: {\n      type: [Object, String] as PropType<'container' | 'first' | HTMLElement>,\n      default: 'first',\n    },\n  },\n  emits: [\n    ON_TRAP_FOCUS_EVT,\n    ON_RELEASE_FOCUS_EVT,\n    'focusin',\n    'focusout',\n    'focusout-prevented',\n    'release-requested',\n  ],\n  setup(props, { emit }) {\n    const forwardRef = ref<HTMLElement | undefined>()\n    let lastFocusBeforeTrapped: HTMLElement | null\n    let lastFocusAfterTrapped: HTMLElement | null\n\n    const { focusReason } = useFocusReason()\n\n    useEscapeKeydown((event) => {\n      if (props.trapped && !focusLayer.paused) {\n        emit('release-requested', event)\n      }\n    })\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n        if (!isTabbable) {\n          if (currentFocusingEl === container) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value,\n            })\n            emit('focusout-prevented', focusoutPreventedEvent)\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault()\n            }\n          }\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value,\n            })\n            emit('focusout-prevented', focusoutPreventedEvent)\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault()\n              if (loop) tryFocus(first, true)\n            }\n          } else if (\n            shiftKey &&\n            [first, container].includes(currentFocusingEl as HTMLElement)\n          ) {\n            const focusoutPreventedEvent = createFocusOutPreventedEvent({\n              focusReason: focusReason.value,\n            })\n            emit('focusout-prevented', focusoutPreventedEvent)\n            if (!focusoutPreventedEvent.defaultPrevented) {\n              e.preventDefault()\n              if (loop) tryFocus(last, true)\n            }\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    watch(\n      () => props.focusTrapEl,\n      (focusTrapEl) => {\n        if (focusTrapEl) {\n          forwardRef.value = focusTrapEl\n        }\n      },\n      { immediate: true }\n    )\n\n    watch([forwardRef], ([forwardRef], [oldForwardRef]) => {\n      if (forwardRef) {\n        forwardRef.addEventListener('keydown', onKeydown)\n        forwardRef.addEventListener('focusin', onFocusIn)\n        forwardRef.addEventListener('focusout', onFocusOut)\n      }\n      if (oldForwardRef) {\n        oldForwardRef.removeEventListener('keydown', onKeydown)\n        oldForwardRef.removeEventListener('focusin', onFocusIn)\n        oldForwardRef.removeEventListener('focusout', onFocusOut)\n      }\n    })\n\n    const trapOnFocus = (e: Event) => {\n      emit(ON_TRAP_FOCUS_EVT, e)\n    }\n    const releaseOnFocus = (e: Event) => emit(ON_RELEASE_FOCUS_EVT, e)\n\n    const onFocusIn = (e: FocusEvent) => {\n      const trapContainer = unref(forwardRef)\n      if (!trapContainer) return\n\n      const target = e.target as HTMLElement | null\n      const relatedTarget = e.relatedTarget as HTMLElement | null\n      const isFocusedInTrap = target && trapContainer.contains(target)\n\n      if (!props.trapped) {\n        const isPrevFocusedInTrap =\n          relatedTarget && trapContainer.contains(relatedTarget)\n        if (!isPrevFocusedInTrap) {\n          lastFocusBeforeTrapped = relatedTarget\n        }\n      }\n\n      if (isFocusedInTrap) emit('focusin', e)\n\n      if (focusLayer.paused) return\n\n      if (props.trapped) {\n        if (isFocusedInTrap) {\n          lastFocusAfterTrapped = target\n        } else {\n          tryFocus(lastFocusAfterTrapped, true)\n        }\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (props.trapped) {\n        const relatedTarget = (e as FocusEvent)\n          .relatedTarget as HTMLElement | null\n        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {\n          // Give embedded focus layer time to pause this layer before reclaiming focus\n          // And only reclaim focus if it should currently be trapping\n          setTimeout(() => {\n            if (!focusLayer.paused && props.trapped) {\n              const focusoutPreventedEvent = createFocusOutPreventedEvent({\n                focusReason: focusReason.value,\n              })\n              emit('focusout-prevented', focusoutPreventedEvent)\n              if (!focusoutPreventedEvent.defaultPrevented) {\n                tryFocus(lastFocusAfterTrapped, true)\n              }\n            }\n          }, 0)\n        }\n      } else {\n        const target = e.target as HTMLElement | null\n        const isFocusedInTrap = target && trapContainer.contains(target)\n        if (!isFocusedInTrap) emit('focusout', e)\n      }\n    }\n\n    async function startTrap() {\n      // Wait for forwardRef to resolve\n      await nextTick()\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = trapContainer.contains(\n          document.activeElement\n        )\n          ? lastFocusBeforeTrapped\n          : document.activeElement\n        lastFocusBeforeTrapped = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const focusEvent = new Event(\n            FOCUS_AFTER_TRAPPED,\n            FOCUS_AFTER_TRAPPED_OPTS\n          )\n          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus)\n          trapContainer.dispatchEvent(focusEvent)\n          if (!focusEvent.defaultPrevented) {\n            nextTick(() => {\n              let focusStartEl = props.focusStartEl\n              if (!isString(focusStartEl)) {\n                tryFocus(focusStartEl)\n                if (document.activeElement !== focusStartEl) {\n                  focusStartEl = 'first'\n                }\n              }\n              if (focusStartEl === 'first') {\n                focusFirstDescendant(\n                  obtainAllFocusableElements(trapContainer),\n                  true\n                )\n              }\n              if (\n                document.activeElement === prevFocusedElement ||\n                focusStartEl === 'container'\n              ) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n    }\n\n    function stopTrap() {\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus)\n\n        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {\n          ...FOCUS_AFTER_TRAPPED_OPTS,\n          detail: {\n            focusReason: focusReason.value,\n          },\n        })\n        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus)\n        trapContainer.dispatchEvent(releasedEvent)\n\n        if (\n          !releasedEvent.defaultPrevented &&\n          (focusReason.value == 'keyboard' || !isFocusCausedByUserEvent())\n        ) {\n          tryFocus(lastFocusBeforeTrapped ?? document.body)\n        }\n\n        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus)\n        focusableStack.remove(focusLayer)\n      }\n    }\n\n    onMounted(() => {\n      if (props.trapped) {\n        startTrap()\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            startTrap()\n          } else {\n            stopTrap()\n          }\n        }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      if (props.trapped) {\n        stopTrap()\n      }\n    })\n\n    return {\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}