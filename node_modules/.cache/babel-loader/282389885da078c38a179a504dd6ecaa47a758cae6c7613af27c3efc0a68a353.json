{"ast":null,"code":"import { ref, inject, computed } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nconst useRadio = (props, emit) => {\n  const radioRef = ref();\n  const radioGroup = inject(radioGroupKey, void 0);\n  const isGroup = computed(() => !!radioGroup);\n  const modelValue = computed({\n    get() {\n      return isGroup.value ? radioGroup.modelValue : props.modelValue;\n    },\n    set(val) {\n      if (isGroup.value) {\n        radioGroup.changeEvent(val);\n      } else {\n        emit && emit(UPDATE_MODEL_EVENT, val);\n      }\n      radioRef.value.checked = props.modelValue === props.label;\n    }\n  });\n  const size = useSize(computed(() => radioGroup == null ? void 0 : radioGroup.size));\n  const disabled = useDisabled(computed(() => radioGroup == null ? void 0 : radioGroup.disabled));\n  const focus = ref(false);\n  const tabIndex = computed(() => {\n    return disabled.value || isGroup.value && modelValue.value !== props.label ? -1 : 0;\n  });\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue\n  };\n};\nexport { useRadio };","map":{"version":3,"mappings":";;;;;;;AAIY,MAACA,QAAQ,GAAG,CAACC,KAAK,EAAEC,IAAI,KAAK;EACvC,MAAMC,QAAQ,GAAGC,GAAG,EAAE;EACtB,MAAMC,UAAU,GAAGC,MAAM,CAACC,aAAa,EAAE,KAAK,CAAC,CAAC;EAChD,MAAMC,OAAO,GAAGC,QAAQ,CAAC,MAAM,CAAC,CAACJ,UAAU,CAAC;EAC5C,MAAMK,UAAU,GAAGD,QAAQ,CAAC;IAC1BE,GAAG,GAAG;MACJ,OAAOH,OAAO,CAACI,KAAK,GAAGP,UAAU,CAACK,UAAU,GAAGT,KAAK,CAACS,UAAU;IACrE,CAAK;IACDG,GAAG,CAACC,GAAG,EAAE;MACP,IAAIN,OAAO,CAACI,KAAK,EAAE;QACjBP,UAAU,CAACU,WAAW,CAACD,GAAG,CAAC;MACnC,CAAO,MAAM;QACLZ,IAAI,IAAIA,IAAI,CAACc,kBAAkB,EAAEF,GAAG,CAAC;MAC7C;MACMX,QAAQ,CAACS,KAAK,CAACK,OAAO,GAAGhB,KAAK,CAACS,UAAU,KAAKT,KAAK,CAACiB,KAAK;IAC/D;EACA,CAAG,CAAC;EACF,MAAMC,IAAI,GAAGC,OAAO,CAACX,QAAQ,CAAC,MAAMJ,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACc,IAAI,CAAC,CAAC;EACnF,MAAME,QAAQ,GAAGC,WAAW,CAACb,QAAQ,CAAC,MAAMJ,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACgB,QAAQ,CAAC,CAAC;EAC/F,MAAME,KAAK,GAAGnB,GAAG,CAAC,KAAK,CAAC;EACxB,MAAMoB,QAAQ,GAAGf,QAAQ,CAAC,MAAM;IAC9B,OAAOY,QAAQ,CAACT,KAAK,IAAIJ,OAAO,CAACI,KAAK,IAAIF,UAAU,CAACE,KAAK,KAAKX,KAAK,CAACiB,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;EACvF,CAAG,CAAC;EACF,OAAO;IACLf,QAAQ;IACRK,OAAO;IACPH,UAAU;IACVkB,KAAK;IACLJ,IAAI;IACJE,QAAQ;IACRG,QAAQ;IACRd;EACJ,CAAG;AACH","names":["useRadio","props","emit","radioRef","ref","radioGroup","inject","radioGroupKey","isGroup","computed","modelValue","get","value","set","val","changeEvent","UPDATE_MODEL_EVENT","checked","label","size","useSize","disabled","useDisabled","focus","tabIndex"],"sources":["../../../../../../packages/components/radio/src/use-radio.ts"],"sourcesContent":["import { computed, inject, ref } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport { useDisabled, useSize } from '@element-plus/hooks'\nimport type { SetupContext } from 'vue'\nimport type { RadioEmits, RadioProps } from './radio'\n\nexport const useRadio = (\n  props: { label: RadioProps['label']; modelValue?: RadioProps['modelValue'] },\n  emit?: SetupContext<RadioEmits>['emit']\n) => {\n  const radioRef = ref<HTMLInputElement>()\n  const radioGroup = inject(radioGroupKey, undefined)\n  const isGroup = computed(() => !!radioGroup)\n  const modelValue = computed<RadioProps['modelValue']>({\n    get() {\n      return isGroup.value ? radioGroup!.modelValue : props.modelValue!\n    },\n    set(val) {\n      if (isGroup.value) {\n        radioGroup!.changeEvent(val)\n      } else {\n        emit && emit(UPDATE_MODEL_EVENT, val)\n      }\n      radioRef.value!.checked = props.modelValue === props.label\n    },\n  })\n\n  const size = useSize(computed(() => radioGroup?.size))\n  const disabled = useDisabled(computed(() => radioGroup?.disabled))\n  const focus = ref(false)\n  const tabIndex = computed(() => {\n    return disabled.value || (isGroup.value && modelValue.value !== props.label)\n      ? -1\n      : 0\n  })\n\n  return {\n    radioRef,\n    isGroup,\n    radioGroup,\n    focus,\n    size,\n    disabled,\n    tabIndex,\n    modelValue,\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}