{"ast":null,"code":"import { inject, ref, computed, unref, nextTick, onMounted, defineComponent, createVNode, mergeProps } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { tableV2RowProps } from '../row.mjs';\nimport { TableV2InjectionKey } from '../tokens.mjs';\nimport { placeholderSign } from '../private.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { isFunction, isArray } from '@vue/shared';\nconst useTableRow = props => {\n  const {\n    isScrolling\n  } = inject(TableV2InjectionKey);\n  const measured = ref(false);\n  const rowRef = ref();\n  const measurable = computed(() => {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0;\n  });\n  const doMeasure = (isInit = false) => {\n    const $rowRef = unref(rowRef);\n    if (!$rowRef) return;\n    const {\n      columns,\n      onRowHeightChange,\n      rowKey,\n      rowIndex,\n      style\n    } = props;\n    const {\n      height\n    } = $rowRef.getBoundingClientRect();\n    measured.value = true;\n    nextTick(() => {\n      if (isInit || height !== Number.parseInt(style.height)) {\n        const firstColumn = columns[0];\n        const isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === placeholderSign;\n        onRowHeightChange == null ? void 0 : onRowHeightChange({\n          rowKey,\n          height,\n          rowIndex\n        }, firstColumn && !isPlaceholder && firstColumn.fixed);\n      }\n    });\n  };\n  const eventHandlers = computed(() => {\n    const {\n      rowData,\n      rowIndex,\n      rowKey,\n      onRowHover\n    } = props;\n    const handlers = props.rowEventHandlers || {};\n    const eventHandlers2 = {};\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (isFunction(handler)) {\n        eventHandlers2[eventName] = event => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey\n          });\n        };\n      }\n    });\n    if (onRowHover) {\n      ;\n      [{\n        name: \"onMouseleave\",\n        hovered: false\n      }, {\n        name: \"onMouseenter\",\n        hovered: true\n      }].forEach(({\n        name,\n        hovered\n      }) => {\n        const existedHandler = eventHandlers2[name];\n        eventHandlers2[name] = event => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey\n          });\n          existedHandler == null ? void 0 : existedHandler(event);\n        };\n      });\n    }\n    return eventHandlers2;\n  });\n  const onExpand = expanded => {\n    const {\n      onRowExpand,\n      rowData,\n      rowIndex,\n      rowKey\n    } = props;\n    onRowExpand == null ? void 0 : onRowExpand({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey\n    });\n  };\n  onMounted(() => {\n    if (unref(measurable)) {\n      doMeasure(true);\n    }\n  });\n  return {\n    isScrolling,\n    measurable,\n    measured,\n    rowRef,\n    eventHandlers,\n    onExpand\n  };\n};\nconst COMPONENT_NAME = \"ElTableV2TableRow\";\nconst TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup(props, {\n    expose,\n    slots,\n    attrs\n  }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n      onExpand\n    } = useTableRow(props);\n    expose({\n      onExpand\n    });\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style\n      } = props;\n      let ColumnCells = columns.map((column, columnIndex) => {\n        const expandable = isArray(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey;\n        return slots.cell({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key],\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable ? {\n            rowData,\n            rowIndex,\n            onExpand\n          } : void 0\n        });\n      });\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map(node => {\n            if (isArray(node) && node.length === 1) {\n              return node[0];\n            }\n            return node;\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling)\n        });\n      }\n      if (unref(measurable)) {\n        const {\n          height,\n          ...exceptHeightStyle\n        } = style || {};\n        const _measured = unref(measured);\n        return createVNode(\"div\", mergeProps({\n          \"ref\": rowRef,\n          \"class\": props.class,\n          \"style\": _measured ? style : exceptHeightStyle\n        }, attrs, unref(eventHandlers)), [ColumnCells]);\n      }\n      return createVNode(\"div\", mergeProps(attrs, {\n        \"ref\": rowRef,\n        \"class\": props.class,\n        \"style\": style\n      }, unref(eventHandlers)), [ColumnCells]);\n    };\n  }\n});\nexport { TableV2Row as default };","map":{"version":3,"mappings":";;;;;;;;EAmCMA;IACEC;EAAEA;EAAF,MAAkBC,QAAOC;EAE/B,MAAMC,MAAQ,MAAM;EACpB,MAAMC,UAASC,GAAfC;IACA,OAAgBC,cAAW,mBAAO;IAChC;EACD,MAFDC;;IAIA,IAAMA,UACJ;IACA;MACMC;MAAEA,iBAAF;MAAWC,MAAX;MAA8BC,QAA9B;MAAsCC;IAAUC;IAAhD,MAAN;MACMC;IAAEA;IAAFX,QAAaY,MAAQC;IAC3Bb,QAAQ,CAACc,MAAT;MAEAC,UAAe;QACb,MAAUC,WAAU,UAAW,GAACC;QAC9B,MAAMD,aAAW,GAAU,YAA3B;QACAT,qBAAsBS,YAAW,CAAEE,qBAAoBA;UACvDX;UACIC,MAAF;UAAUG;QAAQF;;IAGrB;EACF;EACF,MAjBDU;;MAmBAC,OAAmB;MACXX;MAAEW,MAAF;MAAWX;QAAXY;IAA6BC;IAA7B,MAANC;IACAC,MAAMC,QAAQ,CAAGJ,QAAMK,qBAAvB;MACMP,sBAAN;QAIAK,cAAeC,UAAUE,IAAQC,KAAEC;UAC7BC,OAAU;YACZX;YACEY,OAAQ;YACNH,QADM;YAENR;YACAX;QACAD;MAJM;;IAOX;MAVH;;QAaIc,oBAAY;QACdU;OAEI;QAAEC,IAAI,EAAE,cAAR;QAAwBD,OAAO,EAAE;MAAjC,CADF,CAEE;QAAEC,IAAI;QAAkBD;MAAxB,CAFF,KADD;QAKYC,MAAFC;QAAQF;UAAcV;YAC/BM,KAAoB;;YACpBT;YACEG,QAAU;YACRM;YACAI;wBAFS;;MAKTxB;IALS;WAQGe;;QAhBjBY;IAmBF;;MACDf;MAzCFX;;KA4CM0B;IACJC,WAAM;MAAEA,QAAF;MAAehB,OAAf;MAAwBX,QAAxB;MAAkCD;IAAlC;EAEN4B;WAAc;QAAAC;MAGZ5B,SAHY;IAIZD;EAJY;EAMf,OATD;;IAWA8B,UAAgB;IACdtC,QAAS;UACE;IACVmB;IAHHgB;GAMO;;MAAAI;AAAA;MAAA;OAAA;EAA4DJ;IAAnEK;IAzFFC;;EA4FA,CAAMF;IAEAG;MACAvB,aAD6B;MAEjCE,WAFiC;;MAG5BrB,QAAQ;MAAAC;MAAAkC;IAAiBQ;IAASH;MAC/BL;MACJhB;WADI;MAGJyB,MAHI;QAAAtC;QAAAuC;QAOJV;QACEvC;QAEJ4C,OAAO;QACL/B;QACNC;MACA;MACMyB;QAJF;QAOA,OAAaM;UACLK;UAAAxC;UAAAyC;UAAAC;UAAAtC;UAAAU;UAAAX;UAOJC;UACEW,eARJ;YAUI4B;YACIC;YAKCT;WAAY;UAEjBnC;;UAEA0C,KAJiB;QAKjBtC,WAAoB,YAACoC,CAAM;UAC3B1B,KANiB;YAAA;cAQjBvB,OAAWsD,IAAEd,GAAK;;YAGZjB,OADF+B;YAEE1C;UACA0B;UAHF7B,OAKA8C;UAfNJ;UANF5B;;UAyBIqB,WAAW;QACbQ;MACEI;eACMC,WAAQH,GAAR;cACF;UACDxC;;QACD;QACD,MANqB4C;eAAAC;UAQtBlD,KARsB;UAStB0C,OATsB;UAUtB5B,OAVsB;WAAAuB;;MAAA,OAAxBa;QAcD;;QAED,OAAS;MACP","names":["useTableRow","isScrolling","inject","TableV2InjectionKey","measured","rowRef","ref","computed","isNumber","doMeasure","columns","onRowHeightChange","rowKey","rowIndex","style","height","$rowRef","getBoundingClientRect","value","nextTick","firstColumn","parseInt","placeholderSign","eventHandlers","rowData","props","onRowHover","eventHandlers2","Object","handlers","rowEventHandlers","forEach","event","eventName","isFunction","handler","hovered","name","existedHandler","onExpand","onRowExpand","unref","onMounted","COMPONENT_NAME","expose","slots","TableV2Row","attrs","measurable","columnsStyles","column","columnIndex","depth","ColumnCells","expandable","node","undefined","cells","isArray","_measured","_createVNode"],"sources":["../../../../../../../packages/components/table-v2/src/components/row.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  unref,\n} from 'vue'\nimport { isArray, isFunction, isNumber } from '@element-plus/utils'\nimport { tableV2RowProps } from '../row'\nimport { TableV2InjectionKey } from '../tokens'\nimport { placeholderSign } from '../private'\n\nimport type { CSSProperties, RendererElement, RendererNode, VNode } from 'vue'\nimport type { RowEventHandlers, TableV2RowProps } from '../row'\n\ntype CustomizedCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[]\n\ntype DefaultCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[][]\n\ntype ColumnCellsType = DefaultCellsType | CustomizedCellsType\n\nconst useTableRow = (props: TableV2RowProps) => {\n  const { isScrolling } = inject(TableV2InjectionKey)!\n\n  const measured = ref(false)\n  const rowRef = ref<HTMLElement>()\n  const measurable = computed(() => {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0\n  })\n\n  const doMeasure = (isInit = false) => {\n    const $rowRef = unref(rowRef)\n    if (!$rowRef) return\n    const { columns, onRowHeightChange, rowKey, rowIndex, style } = props\n    const { height } = $rowRef.getBoundingClientRect()\n    measured.value = true\n\n    nextTick(() => {\n      if (isInit || height !== Number.parseInt(style!.height as string)) {\n        const firstColumn = columns[0]\n        const isPlaceholder = firstColumn?.placeholderSign === placeholderSign\n        onRowHeightChange?.(\n          { rowKey, height, rowIndex },\n          firstColumn && !isPlaceholder && firstColumn.fixed\n        )\n      }\n    })\n  }\n\n  const eventHandlers = computed(() => {\n    const { rowData, rowIndex, rowKey, onRowHover } = props\n    const handlers = props.rowEventHandlers || ({} as RowEventHandlers)\n    const eventHandlers = {} as {\n      [key in keyof RowEventHandlers]: (e: Event) => void\n    }\n\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (isFunction(handler)) {\n        eventHandlers[eventName as keyof RowEventHandlers] = (event: Event) => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n        }\n      }\n    })\n\n    if (onRowHover) {\n      ;(\n        [\n          { name: 'onMouseleave', hovered: false },\n          { name: 'onMouseenter', hovered: true },\n        ] as const\n      ).forEach(({ name, hovered }) => {\n        const existedHandler = eventHandlers[name]\n        eventHandlers[name] = ((event: MouseEvent) => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n\n          existedHandler?.(event)\n        }) as any\n      })\n    }\n    return eventHandlers\n  })\n\n  const onExpand = (expanded: boolean) => {\n    const { onRowExpand, rowData, rowIndex, rowKey } = props\n\n    onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n  }\n\n  onMounted(() => {\n    if (unref(measurable)) {\n      doMeasure(true)\n    }\n  })\n\n  return { isScrolling, measurable, measured, rowRef, eventHandlers, onExpand }\n}\n\nconst COMPONENT_NAME = 'ElTableV2TableRow'\n\nconst TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup(props, { expose, slots, attrs }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n\n      onExpand,\n    } = useTableRow(props)\n\n    expose({\n      /**\n       * @description manually dispatching expand action on row.\n       */\n      onExpand,\n    })\n\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style,\n      } = props\n\n      let ColumnCells: ColumnCellsType = columns.map((column, columnIndex) => {\n        const expandable =\n          isArray(rowData.children) &&\n          rowData.children.length > 0 &&\n          column.key === expandColumnKey\n\n        return slots.cell!({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key],\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable\n            ? {\n                rowData,\n                rowIndex,\n                onExpand,\n              }\n            : undefined,\n        })\n      })\n\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map((node) => {\n            if (isArray(node) && node.length === 1) {\n              return node[0]\n            }\n            return node\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n        })\n      }\n\n      if (unref(measurable)) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { height, ...exceptHeightStyle } = style || {}\n        const _measured = unref(measured)\n        return (\n          <div\n            ref={rowRef}\n            class={props.class}\n            style={_measured ? style : exceptHeightStyle}\n            {...attrs}\n            {...unref(eventHandlers)}\n          >\n            {ColumnCells}\n          </div>\n        )\n      }\n\n      return (\n        <div\n          {...attrs}\n          ref={rowRef}\n          class={props.class}\n          style={style}\n          {...unref(eventHandlers)}\n        >\n          {ColumnCells}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Row\n\nexport type TableV2RowCellRenderParam = {\n  column: TableV2RowProps['columns'][number]\n  columns: TableV2RowProps['columns']\n  columnIndex: number\n  depth: number\n  style: CSSProperties\n  rowData: any\n  rowIndex: number\n  isScrolling: boolean\n  expandIconProps?: {\n    rowData: any\n    rowIndex: number\n    onExpand: (expand: boolean) => void\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}