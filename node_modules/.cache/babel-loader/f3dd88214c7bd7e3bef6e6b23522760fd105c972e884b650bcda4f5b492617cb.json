{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isVNode, createVNode, render } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport NotificationConstructor from './notification2.mjs';\nimport { notificationTypes } from './notification.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { isString } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst notifications = {\n  \"top-left\": [],\n  \"top-right\": [],\n  \"bottom-left\": [],\n  \"bottom-right\": []\n};\nconst GAP_SIZE = 16;\nlet seed = 1;\nconst notify = function (options = {}, context = null) {\n  if (!isClient) return {\n    close: () => void 0\n  };\n  if (typeof options === \"string\" || isVNode(options)) {\n    options = {\n      message: options\n    };\n  }\n  const position = options.position || \"top-right\";\n  let verticalOffset = options.offset || 0;\n  notifications[position].forEach(({\n    vm: vm2\n  }) => {\n    var _a;\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + GAP_SIZE;\n  });\n  verticalOffset += GAP_SIZE;\n  const {\n    nextZIndex\n  } = useZIndex();\n  const id = `notification_${seed++}`;\n  const userOnClose = options.onClose;\n  const props = {\n    zIndex: nextZIndex(),\n    ...options,\n    offset: verticalOffset,\n    id,\n    onClose: () => {\n      close(id, position, userOnClose);\n    }\n  };\n  let appendTo = document.body;\n  if (isElement(options.appendTo)) {\n    appendTo = options.appendTo;\n  } else if (isString(options.appendTo)) {\n    appendTo = document.querySelector(options.appendTo);\n  }\n  if (!isElement(appendTo)) {\n    debugWarn(\"ElNotification\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n  const container = document.createElement(\"div\");\n  const vm = createVNode(NotificationConstructor, props, isVNode(props.message) ? {\n    default: () => props.message\n  } : null);\n  vm.appContext = context != null ? context : notify._context;\n  vm.props.onDestroy = () => {\n    render(null, container);\n  };\n  render(vm, container);\n  notifications[position].push({\n    vm\n  });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: () => {\n      ;\n      vm.component.exposed.visible.value = false;\n    }\n  };\n};\nnotificationTypes.forEach(type => {\n  notify[type] = (options = {}) => {\n    if (typeof options === \"string\" || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n    return notify({\n      ...options,\n      type\n    });\n  };\n});\nfunction close(id, position, userOnClose) {\n  const orientedNotifications = notifications[position];\n  const idx = orientedNotifications.findIndex(({\n    vm: vm2\n  }) => {\n    var _a;\n    return ((_a = vm2.component) == null ? void 0 : _a.props.id) === id;\n  });\n  if (idx === -1) return;\n  const {\n    vm\n  } = orientedNotifications[idx];\n  if (!vm) return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  const removedHeight = vm.el.offsetHeight;\n  const verticalPos = position.split(\"-\")[0];\n  orientedNotifications.splice(idx, 1);\n  const len = orientedNotifications.length;\n  if (len < 1) return;\n  for (let i = idx; i < len; i++) {\n    const {\n      el,\n      component\n    } = orientedNotifications[i].vm;\n    const pos = Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;\n    component.props.offset = pos;\n  }\n}\nfunction closeAll() {\n  for (const orientedNotifications of Object.values(notifications)) {\n    orientedNotifications.forEach(({\n      vm\n    }) => {\n      ;\n      vm.component.exposed.visible.value = false;\n    });\n  }\n}\nnotify.closeAll = closeAll;\nnotify._context = null;\nexport { close, closeAll, notify as default };","map":{"version":3,"mappings":"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","names":["notifications","GAP_SIZE","seed","notify","options","context","isClient","close","isVNode","message","position","verticalOffset","offset","forEach","vm","vm2","_a","el","offsetHeight","nextZIndex","useZIndex","id","userOnClose","onClose","props","zIndex","appendTo","document","body","isElement","isString","querySelector","debugWarn","container","createElement","createVNode","NotificationConstructor","default","appContext","_context","onDestroy","render","push","appendChild","firstElementChild","component","exposed","visible","value","notificationTypes","type","orientedNotifications","idx","findIndex","removedHeight","verticalPos","split","splice","len","length","i","pos","Number","parseInt","style","closeAll","Object","values"],"sources":["../../../../../../packages/components/notification/src/notify.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { useZIndex } from '@element-plus/hooks'\nimport { debugWarn, isElement, isString, isVNode } from '@element-plus/utils'\nimport NotificationConstructor from './notification.vue'\nimport { notificationTypes } from './notification'\n\nimport type { AppContext, Ref, VNode } from 'vue'\nimport type {\n  NotificationOptions,\n  NotificationProps,\n  NotificationQueue,\n  Notify,\n  NotifyFn,\n} from './notification'\n\n// This should be a queue but considering there were `non-autoclosable` notifications.\nconst notifications: Record<\n  NotificationOptions['position'],\n  NotificationQueue\n> = {\n  'top-left': [],\n  'top-right': [],\n  'bottom-left': [],\n  'bottom-right': [],\n}\n\n// the gap size between each notification\nconst GAP_SIZE = 16\nlet seed = 1\n\nconst notify: NotifyFn & Partial<Notify> & { _context: AppContext | null } =\n  function (options = {}, context: AppContext | null = null) {\n    if (!isClient) return { close: () => undefined }\n\n    if (typeof options === 'string' || isVNode(options)) {\n      options = { message: options }\n    }\n\n    const position = options.position || 'top-right'\n\n    let verticalOffset = options.offset || 0\n    notifications[position].forEach(({ vm }) => {\n      verticalOffset += (vm.el?.offsetHeight || 0) + GAP_SIZE\n    })\n    verticalOffset += GAP_SIZE\n\n    const { nextZIndex } = useZIndex()\n\n    const id = `notification_${seed++}`\n    const userOnClose = options.onClose\n    const props: Partial<NotificationProps> = {\n      zIndex: nextZIndex(),\n      ...options,\n      offset: verticalOffset,\n      id,\n      onClose: () => {\n        close(id, position, userOnClose)\n      },\n    }\n\n    let appendTo: HTMLElement | null = document.body\n    if (isElement(options.appendTo)) {\n      appendTo = options.appendTo\n    } else if (isString(options.appendTo)) {\n      appendTo = document.querySelector(options.appendTo)\n    }\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElNotification',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    const container = document.createElement('div')\n\n    const vm = createVNode(\n      NotificationConstructor,\n      props,\n      isVNode(props.message)\n        ? {\n            default: () => props.message,\n          }\n        : null\n    )\n    vm.appContext = context ?? notify._context\n\n    // clean notification element preventing mem leak\n    vm.props!.onDestroy = () => {\n      render(null, container)\n    }\n\n    // instances will remove this item when close function gets called. So we do not need to worry about it.\n    render(vm, container)\n    notifications[position].push({ vm })\n    appendTo.appendChild(container.firstElementChild!)\n\n    return {\n      // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n      // for out component, so that all closing steps will not be skipped.\n      close: () => {\n        ;(vm.component!.exposed as { visible: Ref<boolean> }).visible.value =\n          false\n      },\n    }\n  }\nnotificationTypes.forEach((type) => {\n  notify[type] = (options = {}) => {\n    if (typeof options === 'string' || isVNode(options)) {\n      options = {\n        message: options,\n      }\n    }\n    return notify({\n      ...options,\n      type,\n    })\n  }\n})\n\n/**\n * This function gets called when user click `x` button or press `esc` or the time reached its limitation.\n * Emitted by transition@before-leave event so that we can fetch the current notification.offsetHeight, if this was called\n * by @after-leave the DOM element will be removed from the page thus we can no longer fetch the offsetHeight.\n * @param {String} id notification id to be closed\n * @param {Position} position the positioning strategy\n * @param {Function} userOnClose the callback called when close passed by user\n */\nexport function close(\n  id: string,\n  position: NotificationOptions['position'],\n  userOnClose?: (vm: VNode) => void\n): void {\n  // maybe we can store the index when inserting the vm to notification list.\n  const orientedNotifications = notifications[position]\n  const idx = orientedNotifications.findIndex(\n    ({ vm }) => vm.component?.props.id === id\n  )\n  if (idx === -1) return\n  const { vm } = orientedNotifications[idx]\n  if (!vm) return\n  // calling user's on close function before notification gets removed from DOM.\n  userOnClose?.(vm)\n\n  // note that this is called @before-leave, that's why we were able to fetch this property.\n  const removedHeight = vm.el!.offsetHeight\n  const verticalPos = position.split('-')[0]\n  orientedNotifications.splice(idx, 1)\n  const len = orientedNotifications.length\n  if (len < 1) return\n  // starting from the removing item.\n  for (let i = idx; i < len; i++) {\n    // new position equals the current offsetTop minus removed height plus 16px(the gap size between each item)\n    const { el, component } = orientedNotifications[i].vm\n    const pos =\n      Number.parseInt(el!.style[verticalPos], 10) - removedHeight - GAP_SIZE\n    component!.props.offset = pos\n  }\n}\n\nexport function closeAll(): void {\n  // loop through all directions, close them at once.\n  for (const orientedNotifications of Object.values(notifications)) {\n    orientedNotifications.forEach(({ vm }) => {\n      // same as the previous close method, we'd like to make sure lifecycle gets handle properly.\n      ;(vm.component!.exposed as { visible: Ref<boolean> }).visible.value =\n        false\n    })\n  }\n}\n\nnotify.closeAll = closeAll\nnotify._context = null\n\nexport default notify as Notify\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}