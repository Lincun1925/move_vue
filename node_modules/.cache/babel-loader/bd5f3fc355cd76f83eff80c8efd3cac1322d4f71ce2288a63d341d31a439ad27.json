{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, useSlots, provide, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, Fragment, renderList, createBlock } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElDescriptionsRow from './descriptions-row2.mjs';\nimport { descriptionsKey } from './token.mjs';\nimport { descriptionProps } from './description.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { flattedChildren } from '../../../utils/vue/vnode.mjs';\nconst __default__ = defineComponent({\n  name: \"ElDescriptions\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: descriptionProps,\n  setup(__props) {\n    const props = __props;\n    const ns = useNamespace(\"descriptions\");\n    const descriptionsSize = useSize();\n    const slots = useSlots();\n    provide(descriptionsKey, props);\n    const descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)]);\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {};\n      }\n      if (span > count) {\n        node.props.span = count;\n      }\n      if (isLast) {\n        node.props.span = span;\n      }\n      return node;\n    };\n    const getRows = () => {\n      var _a;\n      const children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter(node => {\n        var _a2;\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      const rows = [];\n      let temp = [];\n      let count = props.column;\n      let totalSpan = 0;\n      children.forEach((node, index) => {\n        var _a2;\n        const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n        if (index === children.length - 1) {\n          const lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(descriptionKls))\n      }, [_ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"header\"))\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"extra\"))\n      }, [renderSlot(_ctx.$slots, \"extra\", {}, () => [createTextVNode(toDisplayString(_ctx.extra), 1)])], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [createElementVNode(\"table\", {\n        class: normalizeClass([unref(ns).e(\"table\"), unref(ns).is(\"bordered\", _ctx.border)])\n      }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(getRows(), (row, index) => {\n        return openBlock(), createBlock(ElDescriptionsRow, {\n          key: index,\n          row\n        }, null, 8, [\"row\"]);\n      }), 128))])], 2)], 2)], 2);\n    };\n  }\n});\nvar Descriptions = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/description.vue\"]]);\nexport { Descriptions as default };","map":{"version":3,"mappings":";;;;;;;;;;;mCAmCc;EACZA,IAAM;AACR;;;;;;IAIM,WAAKC,aAAa,cAAc;IAEtC,MAAMC,mBAAmBC,OAAQ;IAEjC,MAAMC,QAAQC,QAAS;IAEvBC,QAAQC,iBAAiBC,KAAK;IAE9B,MAAMC,cAAiB,YAAS,MAAM,CAACC,EAAG,IAAK,KAAGC,CAAE,kBAAiBC,KAAK,CAAC,CAAC;IAE5E,MAAMC,aAAa,CAACC,MAAMC,IAAM,SAAOC,SAAS,KAAU;MACpD,KAACF,KAAKN,KAAO;QACfM,KAAKN,QAAQ,EAAC;MAAA;MAEhB,IAAIO,OAAOE,KAAO;QAChBH,KAAKN,MAAMO,IAAO;MAAA;MAEpB,IAAIC,MAAQ;QAEVF,KAAKN,MAAMO,IAAO;MAAA;MAEb;IAAA,CACT;IAEA,MAAMG,UAAU,MAAM;MACpB,MAAM;MAGN,MAAMC,QAAQ;QACd;QACA,YAAkB;MAClB;MAES;MACD;MAEF,iBAAiB;MACN;MACfA;QAEI;QAEF,UAAiB,eAAM,CAAUX,sBAAkB;QACnD,YAAUW,QAAW,UAAgB;UACrCC,aAAcL;QACd;QACF;UAEA,cAAkB;UACPM;UACTC,KAAKC,KAAKF,IAAI;UACT;QACL;QACA,gBAAc;UACdJ,SAAcF;UACdM,SAAQ;QAAA,CACV;UACDA;UAEMC;UACTL","names":["name","useNamespace","descriptionsSize","useSize","slots","useSlots","provide","descriptionsKey","props","descriptionKls","ns","m","value","filledNode","node","span","isLast","count","getRows","children","totalSpan","temp","rows","push"],"sources":["../../../../../../packages/components/descriptions/src/description.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport { computed, provide, useSlots } from 'vue'\nimport { flattedChildren } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport ElDescriptionsRow from './descriptions-row.vue'\nimport { descriptionsKey } from './token'\nimport { descriptionProps } from './description'\n\ndefineOptions({\n  name: 'ElDescriptions',\n})\n\nconst props = defineProps(descriptionProps)\n\nconst ns = useNamespace('descriptions')\n\nconst descriptionsSize = useSize()\n\nconst slots = useSlots()\n\nprovide(descriptionsKey, props)\n\nconst descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)])\n\nconst filledNode = (node, span, count, isLast = false) => {\n  if (!node.props) {\n    node.props = {}\n  }\n  if (span > count) {\n    node.props.span = count\n  }\n  if (isLast) {\n    // set the last span\n    node.props.span = span\n  }\n  return node\n}\n\nconst getRows = () => {\n  const children = flattedChildren(slots.default?.()).filter(\n    (node) => node?.type?.name === 'ElDescriptionsItem'\n  )\n  const rows = []\n  let temp = []\n  let count = props.column\n  let totalSpan = 0 // all spans number of item\n\n  children.forEach((node, index) => {\n    const span = node.props?.span || 1\n\n    if (index < children.length - 1) {\n      totalSpan += span > count ? count : span\n    }\n\n    if (index === children.length - 1) {\n      // calculate the last item span\n      const lastSpan = props.column - (totalSpan % props.column)\n      temp.push(filledNode(node, lastSpan, count, true))\n      rows.push(temp)\n      return\n    }\n\n    if (span < count) {\n      count -= span\n      temp.push(node)\n    } else {\n      temp.push(filledNode(node, span, count))\n      rows.push(temp)\n      count = props.column\n      temp = []\n    }\n  })\n\n  return rows\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}