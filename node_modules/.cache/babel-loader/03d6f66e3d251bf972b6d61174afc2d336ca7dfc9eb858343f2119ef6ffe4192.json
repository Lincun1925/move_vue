{"ast":null,"code":"import { defineComponent, ref, nextTick, onMounted, computed, provide, reactive, toRefs, watch, openBlock, createElementBlock, unref, normalizeClass, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { radioGroupProps, radioGroupEmits } from './radio-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\"];\nconst __default__ = defineComponent({\n  name: \"ElRadioGroup\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"radio\");\n    const radioId = useId();\n    const radioGroupRef = ref();\n    const {\n      formItem\n    } = useFormItem();\n    const {\n      inputId: groupId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => emit(\"change\", value));\n    };\n    onMounted(() => {\n      const radios = radioGroupRef.value.querySelectorAll(\"[type=radio]\");\n      const firstLabel = radios[0];\n      if (!Array.from(radios).some(radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    });\n    const name = computed(() => {\n      return props.name || radioId.value;\n    });\n    provide(radioGroupKey, reactive({\n      ...toRefs(props),\n      changeEvent,\n      name\n    }));\n    watch(() => props.modelValue, () => {\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        id: unref(groupId),\n        ref_key: \"radioGroupRef\",\n        ref: radioGroupRef,\n        class: normalizeClass(unref(ns).b(\"group\")),\n        role: \"radiogroup\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.label || \"radio-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(formItem).labelId : void 0\n      }, [renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_1);\n    };\n  }\n});\nvar RadioGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-group.vue\"]]);\nexport { RadioGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;mCAoCc;EACZA,IAAM;AACR;;;;;;;;;IAKM,WAAKC,aAAa,OAAO;IAC/B,MAAMC,UAAUC,KAAM;IACtB,MAAMC,gBAAgBC,GAAoB;IACpC;MAAEC;IAAA,IAAaC,WAAY;IACjC,MAAM;MAAEC,SAASC,OAAS;MAAAC;IAAA,IAAwBC,mBAAmBC,KAAO;MAC1EC,eAAiB;IAAA,CAClB;IAEK,oBAAeC,KAAyC;MAC5DC,KAAKC,oBAAoBF,KAAK;MAC9BG,SAAS,MAAMF,KAAK,QAAU,OAAK,CAAC;IAAA,CACtC;IAEAG,UAAU,MAAM;MACd,MAAMC,MACJ,iBAAcL,KAAO,kBAAmC,cAAc;MACxE,MAAMM,aAAaD,MAAO;MACtB,KAACE,KAAM,MAAKF,MAAM,EAAEG,IAAK,CAACC,KAAU,UAAMC,OAAO,KAAKJ,UAAY;QACpEA,WAAWK,QAAW;MAAA;IACxB,CACD;IAEK,aAAOC,SAAS,MAAM;MACnB,aAAM1B,QAAQE,OAAQ;IAAA,CAC9B;IAEDyB,QACEC,eACAC,QAAS;MACP,GAAGC,OAAOlB,KAAK;MACfmB;MACA/B;IAAA,CACD,CACH;IAGEgC,YAAMpB,KAAM,aACZ,MAAM;MACJ,IAAIA,MAAMqB,aAAe;QACb3B,mBAAS,SAAUA,QAAO,CAAQ4B,iBAAU,OAAI;MAAA;IAC5D,CAEJ","names":["name","useNamespace","radioId","useId","radioGroupRef","ref","formItem","useFormItem","inputId","groupId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","value","emit","UPDATE_MODEL_EVENT","nextTick","onMounted","radios","firstLabel","Array","some","radio","checked","tabIndex","computed","provide","radioGroupKey","reactive","toRefs","changeEvent","watch","validateEvent","validate"],"sources":["../../../../../../packages/components/radio/src/radio-group.vue"],"sourcesContent":["<template>\n  <div\n    :id=\"groupId\"\n    ref=\"radioGroupRef\"\n    :class=\"ns.b('group')\"\n    role=\"radiogroup\"\n    :aria-label=\"!isLabeledByFormItem ? label || 'radio-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem!.labelId : undefined\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport {\n  useFormItem,\n  useFormItemInputId,\n  useId,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport { radioGroupEmits, radioGroupProps } from './radio-group'\nimport type { RadioGroupProps } from '..'\n\ndefineOptions({\n  name: 'ElRadioGroup',\n})\n\nconst props = defineProps(radioGroupProps)\nconst emit = defineEmits(radioGroupEmits)\n\nconst ns = useNamespace('radio')\nconst radioId = useId()\nconst radioGroupRef = ref<HTMLDivElement>()\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = (value: RadioGroupProps['modelValue']) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  nextTick(() => emit('change', value))\n}\n\nonMounted(() => {\n  const radios =\n    radioGroupRef.value!.querySelectorAll<HTMLInputElement>('[type=radio]')\n  const firstLabel = radios[0]\n  if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {\n    firstLabel.tabIndex = 0\n  }\n})\n\nconst name = computed(() => {\n  return props.name || radioId.value\n})\n\nprovide(\n  radioGroupKey,\n  reactive({\n    ...toRefs(props),\n    changeEvent,\n    name,\n  })\n)\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}