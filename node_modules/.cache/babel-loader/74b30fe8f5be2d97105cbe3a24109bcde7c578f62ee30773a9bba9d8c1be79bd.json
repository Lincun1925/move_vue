{"ast":null,"code":"import { defineComponent, ref, computed, unref, nextTick, createVNode } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { tableV2HeaderProps } from '../header.mjs';\nimport { enforceUnit } from '../utils.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { castArray } from 'lodash-unified';\nconst COMPONENT_NAME = \"ElTableV2Header\";\nconst TableV2Header = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2HeaderProps,\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const ns = useNamespace(\"table-v2\");\n    const headerRef = ref();\n    const headerStyle = computed(() => enforceUnit({\n      width: props.width,\n      height: props.height\n    }));\n    const rowStyle = computed(() => enforceUnit({\n      width: props.rowWidth,\n      height: props.height\n    }));\n    const headerHeights = computed(() => castArray(unref(props.headerHeight)));\n    const scrollToLeft = left => {\n      const headerEl = unref(headerRef);\n      nextTick(() => {\n        (headerEl == null ? void 0 : headerEl.scroll) && headerEl.scroll({\n          left\n        });\n      });\n    };\n    const renderFixedRows = () => {\n      const fixedRowClassName = ns.e(\"fixed-header-row\");\n      const {\n        columns,\n        fixedHeaderData,\n        rowHeight\n      } = props;\n      return fixedHeaderData == null ? void 0 : fixedHeaderData.map((fixedRowData, fixedRowIndex) => {\n        var _a;\n        const style = enforceUnit({\n          height: rowHeight,\n          width: \"100%\"\n        });\n        return (_a = slots.fixed) == null ? void 0 : _a.call(slots, {\n          class: fixedRowClassName,\n          columns,\n          rowData: fixedRowData,\n          rowIndex: -(fixedRowIndex + 1),\n          style\n        });\n      });\n    };\n    const renderDynamicRows = () => {\n      const dynamicRowClassName = ns.e(\"dynamic-header-row\");\n      const {\n        columns\n      } = props;\n      return unref(headerHeights).map((rowHeight, rowIndex) => {\n        var _a;\n        const style = enforceUnit({\n          width: \"100%\",\n          height: rowHeight\n        });\n        return (_a = slots.dynamic) == null ? void 0 : _a.call(slots, {\n          class: dynamicRowClassName,\n          columns,\n          headerIndex: rowIndex,\n          style\n        });\n      });\n    };\n    expose({\n      scrollToLeft\n    });\n    return () => {\n      if (props.height <= 0) return;\n      return createVNode(\"div\", {\n        \"ref\": headerRef,\n        \"class\": props.class,\n        \"style\": unref(headerStyle)\n      }, [createVNode(\"div\", {\n        \"style\": unref(rowStyle),\n        \"class\": ns.e(\"header\")\n      }, [renderDynamicRows(), renderFixedRows()])]);\n    };\n  }\n});\nexport { TableV2Header as default };","map":{"version":3,"mappings":";;;;;;;AAUA,MAAMA,cAAc,GAAG,iBAAvB;AACMC,mBAAa,GAAGC,eAAe,CAAC;EACpCC,IAAI,EAAEH,cAD8B;EAEpCI,KAAK,EAAEC,kBAF6B;;IAG/BC;IAAUA;EAAOC;IAAU;IAC9B,MAAMC,SAAiB;IAEvB,MAAMC,WAAYC,WAAlB;MAEAC,kBAAoBC;MAEhBD,MAAK,EAAOP,KAACO,CADHE;MAEVA,CAAM;IAFI,MADdC;MAOAH,YAAc,CAAGC;MAEbD,MAAK,EAAOP,KAACW,CADHF;MAEVA,CAAM;IAFI,MADdG;IAOA,MAAMA,YAAa,GAAGJ,IAAQ,IAAC;;MAEzBK;QACJ,SAAc,QAAQ,oBAAtB;UACAC;QACEC;MAEIC;IADc;IAGnB,MALDC;MAFF;;QAUMA;QACJC;QAEMC;UAAAnB;aAAAkB;QAA4BC;QAA5B,MAANC;UAEOF;UACCE;QACJX;QACAF,OAAK,CAAEc;UAFTC;UAKOpB;UACLoB,OAAOC,EADYC;UAEnBC,QAFmB;UAGnBC;QACAC;MACAP;IALmB;IAOtB,MAbDQ;MALF;;QAqBMA;MACJ;MACA,OAAMC;QAAEJ;QAAF,MAANL;UAEOS,aAAMjB;UACLQ;QACJb;QACAE,QAAMY,EAAEF;UAFVG;UAKOpB;UACLoB,WADqB;UAErBG;QACAK;MACAV;IAJqB;IAMxBjB,MAZD;MAJFU;;IAmBAV,OAAO;MACL,uBACN;MACA;QACMU;QAJF;QAOA,OAAa;MACX,IAAIb,iBAAmB;QAEvB;QAAA,OACYK,EADZD;SAC8BJ,kBAD9B;;EAAA","names":["COMPONENT_NAME","TableV2Header","defineComponent","name","props","tableV2HeaderProps","slots","expose","ns","headerRef","ref","width","computed","height","rowStyle","rowWidth","headerHeights","scrollToLeft","nextTick","headerEl","left","renderFixedRows","fixedHeaderData","rowHeight","style","_a","class","fixedRowClassName","fixedRowData","columns","rowData","rowIndex","renderDynamicRows","unref","headerIndex"],"sources":["../../../../../../../packages/components/table-v2/src/components/header.tsx"],"sourcesContent":["import { computed, defineComponent, nextTick, ref, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { ensureArray } from '@element-plus/utils'\nimport { tableV2HeaderProps } from '../header'\nimport { enforceUnit } from '../utils'\n\nimport type { CSSProperties, UnwrapRef } from 'vue'\nimport type { TableV2HeaderProps } from '../header'\nimport type { UseColumnsReturn } from '../composables/use-columns'\n\nconst COMPONENT_NAME = 'ElTableV2Header'\nconst TableV2Header = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2HeaderProps,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const headerRef = ref<HTMLElement>()\n\n    const headerStyle = computed(() =>\n      enforceUnit({\n        width: props.width,\n        height: props.height,\n      })\n    )\n\n    const rowStyle = computed(() =>\n      enforceUnit({\n        width: props.rowWidth,\n        height: props.height,\n      })\n    )\n\n    const headerHeights = computed(() => ensureArray(unref(props.headerHeight)))\n\n    const scrollToLeft = (left?: number) => {\n      const headerEl = unref(headerRef)\n      nextTick(() => {\n        headerEl?.scroll &&\n          headerEl.scroll({\n            left,\n          })\n      })\n    }\n\n    const renderFixedRows = () => {\n      const fixedRowClassName = ns.e('fixed-header-row')\n\n      const { columns, fixedHeaderData, rowHeight } = props\n\n      return fixedHeaderData?.map((fixedRowData, fixedRowIndex) => {\n        const style: CSSProperties = enforceUnit({\n          height: rowHeight,\n          width: '100%',\n        })\n\n        return slots.fixed?.({\n          class: fixedRowClassName,\n          columns,\n          rowData: fixedRowData,\n          rowIndex: -(fixedRowIndex + 1),\n          style,\n        })\n      })\n    }\n\n    const renderDynamicRows = () => {\n      const dynamicRowClassName = ns.e('dynamic-header-row')\n      const { columns } = props\n\n      return unref(headerHeights).map((rowHeight, rowIndex) => {\n        const style: CSSProperties = enforceUnit({\n          width: '100%',\n          height: rowHeight,\n        })\n\n        return slots.dynamic?.({\n          class: dynamicRowClassName,\n          columns,\n          headerIndex: rowIndex,\n          style,\n        })\n      })\n    }\n\n    expose({\n      /**\n       * @description scroll to position based on the provided value\n       */\n      scrollToLeft,\n    })\n\n    return () => {\n      if (props.height <= 0) return\n\n      return (\n        <div ref={headerRef} class={props.class} style={unref(headerStyle)}>\n          <div style={unref(rowStyle)} class={ns.e('header')}>\n            {renderDynamicRows()}\n            {renderFixedRows()}\n          </div>\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Header\n\nexport type TableV2HeaderInstance = InstanceType<typeof TableV2Header> & {\n  /**\n   * @description scroll to position based on the provided value\n   */\n  scrollToLeft: (left?: number) => void\n}\n\nexport type TableV2HeaderRendererParams = {\n  class: string\n  columns: TableV2HeaderProps['columns']\n  columnsStyles: UnwrapRef<UseColumnsReturn['columnsStyles']>\n  headerIndex: number\n  style: CSSProperties\n}\n\nexport type TableV2HeaderRowRendererParams = {\n  rowData: any\n  rowIndex: number\n} & Omit<TableV2HeaderRendererParams, 'headerIndex'>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}