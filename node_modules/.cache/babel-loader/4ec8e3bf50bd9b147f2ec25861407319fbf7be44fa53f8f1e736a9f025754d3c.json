{"ast":null,"code":"import { defineComponent, inject, ref, computed, openBlock, createBlock, Transition, unref, withCtx, createElementBlock, normalizeClass, createElementVNode, createVNode, toDisplayString, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { panelTimePickerProps } from '../props/panel-time-picker.mjs';\nimport { useTimePanel } from '../composables/use-time-panel.mjs';\nimport { buildAvailableTimeSlotGetter, useOldValue } from '../composables/use-time-picker.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"panel-time-pick\",\n  props: panelTimePickerProps,\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    const {\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);\n    const ns = useNamespace(\"time\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectionRange = ref([0, 2]);\n    const oldValue = useOldValue(props);\n    const transitionName = computed(() => {\n      return isUndefined(props.actualVisible) ? `${ns.namespace.value}-zoom-in-top` : \"\";\n    });\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    const isValidValue = _date => {\n      const parsedDate = dayjs(_date).locale(lang.value);\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n    const handleCancel = () => {\n      emit(\"pick\", oldValue.value, false);\n    };\n    const handleConfirm = (visible = false, first = false) => {\n      if (first) return;\n      emit(\"pick\", props.parsedValue, visible);\n    };\n    const handleChange = _date => {\n      if (!props.visible) {\n        return;\n      }\n      const result = getRangeAvailableTime(_date).millisecond(0);\n      emit(\"pick\", result, true);\n    };\n    const setSelectionRange = (start, end) => {\n      emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n    const changeSelectionRange = step => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : []);\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n    const handleKeydown = event => {\n      const code = event.code;\n      const {\n        left,\n        right,\n        up,\n        down\n      } = EVENT_CODE;\n      if ([left, right].includes(code)) {\n        const step = code === left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n      if ([up, down].includes(code)) {\n        const step = code === up ? -1 : 1;\n        timePickerOptions[\"start_scrollDown\"](step);\n        event.preventDefault();\n        return;\n      }\n    };\n    const {\n      timePickerOptions,\n      onSetOption,\n      getAvailableTime\n    } = useTimePanel({\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    });\n    const getRangeAvailableTime = date => {\n      return getAvailableTime(date, props.datetimeRole || \"\", true);\n    };\n    const parseUserInput = value => {\n      if (!value) return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n    const formatToString = value => {\n      if (!value) return null;\n      return value.format(props.format);\n    };\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n    emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    emit(\"set-picker-option\", [\"handleKeydownInput\", handleKeydown]);\n    emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Transition, {\n        name: unref(transitionName)\n      }, {\n        default: withCtx(() => [_ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(unref(ns).b(\"panel\"))\n        }, [createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).be(\"panel\", \"content\"), {\n            \"has-seconds\": unref(showSeconds)\n          }])\n        }, [createVNode(TimeSpinner, {\n          ref: \"spinner\",\n          role: _ctx.datetimeRole || \"start\",\n          \"arrow-control\": unref(arrowControl),\n          \"show-seconds\": unref(showSeconds),\n          \"am-pm-mode\": unref(amPmMode),\n          \"spinner-date\": _ctx.parsedValue,\n          \"disabled-hours\": unref(disabledHours),\n          \"disabled-minutes\": unref(disabledMinutes),\n          \"disabled-seconds\": unref(disabledSeconds),\n          onChange: handleChange,\n          onSetOption: unref(onSetOption),\n          onSelectRange: setSelectionRange\n        }, null, 8, [\"role\", \"arrow-control\", \"show-seconds\", \"am-pm-mode\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onSetOption\"])], 2), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"panel\", \"footer\"))\n        }, [createElementVNode(\"button\", {\n          type: \"button\",\n          class: normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"cancel\"]),\n          onClick: handleCancel\n        }, toDisplayString(unref(t)(\"el.datepicker.cancel\")), 3), createElementVNode(\"button\", {\n          type: \"button\",\n          class: normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"confirm\"]),\n          onClick: _cache[0] || (_cache[0] = $event => handleConfirm())\n        }, toDisplayString(unref(t)(\"el.datepicker.confirm\")), 3)], 2)], 2)) : createCommentVNode(\"v-if\", true)]),\n        _: 1\n      }, 8, [\"name\"]);\n    };\n  }\n});\nvar TimePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue\"]]);\nexport { TimePickPanel as default };","map":{"version":3,"mappings":"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","names":["inject","arrowControl","disabledHours","disabledMinutes","disabledSeconds","defaultValue","pickerBase","getAvailableHours","getAvailableMinutes","getAvailableSeconds","buildAvailableTimeSlotGetter","useNamespace","t","lang","useLocale","selectionRange","useOldValue","props","computed","isUndefined","namespace","value","format","_date","parsedDate","dayjs","getRangeAvailableTime","isSame","result","handleCancel","emit","oldValue","handleConfirm","visible","first","millisecond","start","end","step","list","showSeconds","mapping","index","indexOf","next","length","timePickerOptions","event","code","left","right","up","down","changeSelectionRange","preventDefault","onSetOption","getAvailableTime","useTimePanel","date","getDefaultValue"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"],"sourcesContent":["<template>\n  <transition :name=\"transitionName\">\n    <div v-if=\"actualVisible || visible\" :class=\"ns.b('panel')\">\n      <div :class=\"[ns.be('panel', 'content'), { 'has-seconds': showSeconds }]\">\n        <time-spinner\n          ref=\"spinner\"\n          :role=\"datetimeRole || 'start'\"\n          :arrow-control=\"arrowControl\"\n          :show-seconds=\"showSeconds\"\n          :am-pm-mode=\"amPmMode\"\n          :spinner-date=\"(parsedValue as any)\"\n          :disabled-hours=\"disabledHours\"\n          :disabled-minutes=\"disabledMinutes\"\n          :disabled-seconds=\"disabledSeconds\"\n          @change=\"handleChange\"\n          @set-option=\"onSetOption\"\n          @select-range=\"setSelectionRange\"\n        />\n      </div>\n      <div :class=\"ns.be('panel', 'footer')\">\n        <button\n          type=\"button\"\n          :class=\"[ns.be('panel', 'btn'), 'cancel']\"\n          @click=\"handleCancel\"\n        >\n          {{ t('el.datepicker.cancel') }}\n        </button>\n        <button\n          type=\"button\"\n          :class=\"[ns.be('panel', 'btn'), 'confirm']\"\n          @click=\"handleConfirm()\"\n        >\n          {{ t('el.datepicker.confirm') }}\n        </button>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { isUndefined } from '@element-plus/utils'\nimport { panelTimePickerProps } from '../props/panel-time-picker'\nimport { useTimePanel } from '../composables/use-time-panel'\nimport {\n  buildAvailableTimeSlotGetter,\n  useOldValue,\n} from '../composables/use-time-picker'\nimport TimeSpinner from './basic-time-spinner.vue'\n\nimport type { Dayjs } from 'dayjs'\n\nconst props = defineProps(panelTimePickerProps)\nconst emit = defineEmits(['pick', 'select-range', 'set-picker-option'])\n\n// Injections\nconst pickerBase = inject('EP_PICKER_BASE') as any\nconst {\n  arrowControl,\n  disabledHours,\n  disabledMinutes,\n  disabledSeconds,\n  defaultValue,\n} = pickerBase.props\nconst { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n  buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds)\n\nconst ns = useNamespace('time')\nconst { t, lang } = useLocale()\n// data\nconst selectionRange = ref([0, 2])\nconst oldValue = useOldValue(props)\n// computed\nconst transitionName = computed(() => {\n  return isUndefined(props.actualVisible)\n    ? `${ns.namespace.value}-zoom-in-top`\n    : ''\n})\nconst showSeconds = computed(() => {\n  return props.format.includes('ss')\n})\nconst amPmMode = computed(() => {\n  if (props.format.includes('A')) return 'A'\n  if (props.format.includes('a')) return 'a'\n  return ''\n})\n// method\nconst isValidValue = (_date: Dayjs) => {\n  const parsedDate = dayjs(_date).locale(lang.value)\n  const result = getRangeAvailableTime(parsedDate)\n  return parsedDate.isSame(result)\n}\nconst handleCancel = () => {\n  emit('pick', oldValue.value, false)\n}\nconst handleConfirm = (visible = false, first = false) => {\n  if (first) return\n  emit('pick', props.parsedValue, visible)\n}\nconst handleChange = (_date: Dayjs) => {\n  // visible avoids edge cases, when use scrolls during panel closing animation\n  if (!props.visible) {\n    return\n  }\n  const result = getRangeAvailableTime(_date).millisecond(0)\n  emit('pick', result, true)\n}\n\nconst setSelectionRange = (start: number, end: number) => {\n  emit('select-range', start, end)\n  selectionRange.value = [start, end]\n}\n\nconst changeSelectionRange = (step: number) => {\n  const list = [0, 3].concat(showSeconds.value ? [6] : [])\n  const mapping = ['hours', 'minutes'].concat(\n    showSeconds.value ? ['seconds'] : []\n  )\n  const index = list.indexOf(selectionRange.value[0])\n  const next = (index + step + list.length) % list.length\n  timePickerOptions['start_emitSelectRange'](mapping[next])\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n  const code = event.code\n\n  const { left, right, up, down } = EVENT_CODE\n\n  if ([left, right].includes(code)) {\n    const step = code === left ? -1 : 1\n    changeSelectionRange(step)\n    event.preventDefault()\n    return\n  }\n\n  if ([up, down].includes(code)) {\n    const step = code === up ? -1 : 1\n    timePickerOptions['start_scrollDown'](step)\n    event.preventDefault()\n    return\n  }\n}\n\nconst { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({\n  getAvailableHours,\n  getAvailableMinutes,\n  getAvailableSeconds,\n})\n\nconst getRangeAvailableTime = (date: Dayjs) => {\n  return getAvailableTime(date, props.datetimeRole || '', true)\n}\n\nconst parseUserInput = (value: Dayjs) => {\n  if (!value) return null\n  return dayjs(value, props.format).locale(lang.value)\n}\n\nconst formatToString = (value: Dayjs) => {\n  if (!value) return null\n  return value.format(props.format)\n}\n\nconst getDefaultValue = () => {\n  return dayjs(defaultValue).locale(lang.value)\n}\n\nemit('set-picker-option', ['isValidValue', isValidValue])\nemit('set-picker-option', ['formatToString', formatToString])\nemit('set-picker-option', ['parseUserInput', parseUserInput])\nemit('set-picker-option', ['handleKeydownInput', handleKeydown])\nemit('set-picker-option', ['getRangeAvailableTime', getRangeAvailableTime])\nemit('set-picker-option', ['getDefaultValue', getDefaultValue])\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}