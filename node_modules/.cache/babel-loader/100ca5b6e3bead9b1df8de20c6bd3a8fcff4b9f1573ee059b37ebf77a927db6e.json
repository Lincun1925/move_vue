{"ast":null,"code":"import { defineComponent, useAttrs, useSlots, computed, shallowRef, ref, nextTick, watch, onMounted, toRef, withDirectives, openBlock, createElementBlock, mergeProps, unref, createCommentVNode, Fragment, normalizeClass, renderSlot, createElementVNode, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { useResizeObserver, isClient } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { View, Hide, CircleClose } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { calcTextareaHeight } from './utils.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useCursor } from '../../../hooks/use-cursor/index.mjs';\nimport { isObject, NOOP } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _hoisted_1 = [\"role\"];\nconst _hoisted_2 = [\"id\", \"type\", \"disabled\", \"formatter\", \"parser\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\", \"form\"];\nconst _hoisted_3 = [\"id\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\", \"form\"];\nconst __default__ = defineComponent({\n  name: \"ElInput\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: inputProps,\n  emits: inputEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const rawAttrs = useAttrs();\n    const slots = useSlots();\n    const containerAttrs = computed(() => {\n      const comboBoxAttrs = {};\n      if (props.containerRole === \"combobox\") {\n        comboBoxAttrs[\"aria-haspopup\"] = rawAttrs[\"aria-haspopup\"];\n        comboBoxAttrs[\"aria-owns\"] = rawAttrs[\"aria-owns\"];\n        comboBoxAttrs[\"aria-expanded\"] = rawAttrs[\"aria-expanded\"];\n      }\n      return comboBoxAttrs;\n    });\n    const containerKls = computed(() => [props.type === \"textarea\" ? nsTextarea.b() : nsInput.b(), nsInput.m(inputSize.value), nsInput.is(\"disabled\", inputDisabled.value), nsInput.is(\"exceed\", inputExceed.value), {\n      [nsInput.b(\"group\")]: slots.prepend || slots.append,\n      [nsInput.bm(\"group\", \"append\")]: slots.append,\n      [nsInput.bm(\"group\", \"prepend\")]: slots.prepend,\n      [nsInput.m(\"prefix\")]: slots.prefix || props.prefixIcon,\n      [nsInput.m(\"suffix\")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n      [nsInput.bm(\"suffix\", \"password-clear\")]: showClear.value && showPwdVisible.value\n    }, rawAttrs.class]);\n    const wrapperKls = computed(() => [nsInput.e(\"wrapper\"), nsInput.is(\"focus\", focused.value)]);\n    const attrs = useAttrs$1({\n      excludeKeys: computed(() => {\n        return Object.keys(containerAttrs.value);\n      })\n    });\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const {\n      inputId\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const inputSize = useSize();\n    const inputDisabled = useDisabled();\n    const nsInput = useNamespace(\"input\");\n    const nsTextarea = useNamespace(\"textarea\");\n    const input = shallowRef();\n    const textarea = shallowRef();\n    const focused = ref(false);\n    const hovering = ref(false);\n    const isComposing = ref(false);\n    const passwordVisible = ref(false);\n    const countStyle = ref();\n    const textareaCalcStyle = shallowRef(props.inputStyle);\n    const _ref = computed(() => input.value || textarea.value);\n    const needStatusIcon = computed(() => {\n      var _a;\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);\n    const passwordIcon = computed(() => passwordVisible.value ? View : Hide);\n    const containerStyle = computed(() => [rawAttrs.style, props.inputStyle]);\n    const textareaStyle = computed(() => [props.inputStyle, textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = computed(() => isNil(props.modelValue) ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => Array.from(nativeInputValue.value).length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    const [recordCursor, setCursor] = useCursor(input);\n    useResizeObserver(textarea, entries => {\n      if (!isWordLimitVisible.value || props.resize !== \"both\") return;\n      const entry = entries[0];\n      const {\n        width\n      } = entry.contentRect;\n      countStyle.value = {\n        right: `calc(100% - ${width + 15 + 6}px)`\n      };\n    });\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (!isClient || type !== \"textarea\") return;\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value, minRows, maxRows)\n        };\n      } else {\n        textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    const setNativeInputValue = () => {\n      const input2 = _ref.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n    const handleInput = async event => {\n      recordCursor();\n      let {\n        value\n      } = event.target;\n      if (props.formatter) {\n        value = props.parser ? props.parser(value) : value;\n        value = props.formatter(value);\n      }\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) {\n        setNativeInputValue();\n        return;\n      }\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      await nextTick();\n      setNativeInputValue();\n      setCursor();\n    };\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n    const handleCompositionUpdate = event => {\n      var _a;\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n    const focus = async () => {\n      var _a;\n      await nextTick();\n      (_a = _ref.value) == null ? void 0 : _a.focus();\n    };\n    const blur = () => {\n      var _a;\n      return (_a = _ref.value) == null ? void 0 : _a.blur();\n    };\n    const handleFocus = event => {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a;\n      focused.value = false;\n      emit(\"blur\", event);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n      }\n    };\n    const handleMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n    const handleMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n    const select = () => {\n      var _a;\n      (_a = _ref.value) == null ? void 0 : _a.select();\n    };\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n    watch(() => props.modelValue, () => {\n      var _a;\n      nextTick(() => resizeTextarea());\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, async () => {\n      await nextTick();\n      setNativeInputValue();\n      resizeTextarea();\n    });\n    onMounted(() => {\n      if (!props.formatter && props.parser) {\n        debugWarn(\"ElInput\", \"If you set the parser, you also need to set the formatter.\");\n      }\n      setNativeInputValue();\n      nextTick(resizeTextarea);\n    });\n    expose({\n      input,\n      textarea,\n      ref: _ref,\n      textareaStyle,\n      autosize: toRef(props, \"autosize\"),\n      focus,\n      blur,\n      select,\n      clear,\n      resizeTextarea\n    });\n    return (_ctx, _cache) => {\n      return withDirectives((openBlock(), createElementBlock(\"div\", mergeProps(unref(containerAttrs), {\n        class: unref(containerKls),\n        style: unref(containerStyle),\n        role: _ctx.containerRole,\n        onMouseenter: handleMouseEnter,\n        onMouseleave: handleMouseLeave\n      }), [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(nsInput).be(\"group\", \"prepend\"))\n      }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(wrapperKls))\n      }, [createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"prefix\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"prefix-inner\")),\n        onClick: focus\n      }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"input\",\n        ref: input,\n        class: unref(nsInput).e(\"inner\")\n      }, unref(attrs), {\n        type: _ctx.showPassword ? passwordVisible.value ? \"text\" : \"password\" : _ctx.type,\n        disabled: unref(inputDisabled),\n        formatter: _ctx.formatter,\n        parser: _ctx.parser,\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        tabindex: _ctx.tabindex,\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        style: _ctx.inputStyle,\n        form: props.form,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_2), createCommentVNode(\" suffix slot \"), unref(suffixVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        class: normalizeClass(unref(nsInput).e(\"suffix\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"suffix-inner\")),\n        onClick: focus\n      }, [!unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"clear\")]),\n        onMousedown: withModifiers(unref(NOOP), [\"prevent\"]),\n        onClick: clear\n      }, {\n        default: withCtx(() => [createVNode(unref(CircleClose))]),\n        _: 1\n      }, 8, [\"class\", \"onMousedown\"])) : createCommentVNode(\"v-if\", true), unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 2,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"password\")]),\n        onClick: handlePasswordVisible\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 3,\n        class: normalizeClass(unref(nsInput).e(\"count\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"count-inner\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(unref(attrs).maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true), unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 4,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"validateIcon\"), unref(nsInput).is(\"loading\", unref(validateState) === \"validating\")])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true)], 2), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(nsInput).be(\"group\", \"append\"))\n      }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"textarea\",\n        ref: textarea,\n        class: unref(nsTextarea).e(\"inner\")\n      }, unref(attrs), {\n        tabindex: _ctx.tabindex,\n        disabled: unref(inputDisabled),\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        style: unref(textareaStyle),\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        form: props.form,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_3), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        style: normalizeStyle(countStyle.value),\n        class: normalizeClass(unref(nsInput).e(\"count\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(unref(attrs).maxlength), 7)) : createCommentVNode(\"v-if\", true)], 64))], 16, _hoisted_1)), [[vShow, _ctx.type !== \"hidden\"]]);\n    };\n  }\n});\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue\"]]);\nexport { Input as default };","map":{"version":3,"mappings":"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","names":["name","inheritAttrs","rawAttrs","useRawAttrs","slots","useSlots","computed","comboBoxAttrs","containerRole","props","type","nsTextarea","b","nsInput","m","value","prepend","prefix","bm","showPwdVisible","e","attrs","useAttrs","excludeKeys","keys","form","formItem","useFormItem","inputId","formItemContext","inputSize","useSize","inputDisabled","useDisabled","useNamespace","input","shallowRef","textarea","ref","countStyle","inputStyle","_ref","needStatusIcon","_a","validateIcon","passwordIcon","containerStyle","textareaStyle","textareaCalcStyle","resize","readonly","textLength","nativeInputValue","suffixVisible","useResizeObserver","width","right","autosize","minRows","minHeight","input2","handleInput","recordCursor","event","setNativeInputValue","emit","setCursor","isComposing","handlePasswordVisible","passwordVisible","focus","focused","validateEvent","hovering","evt","watch","nextTick","resizeTextarea","onMounted","formatter","debugWarn","expose"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    v-bind=\"containerAttrs\"\n    :class=\"containerKls\"\n    :style=\"containerStyle\"\n    :role=\"containerRole\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <div :class=\"wrapperKls\">\n        <!-- prefix slot -->\n        <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n          <span :class=\"nsInput.e('prefix-inner')\" @click=\"focus\">\n            <slot name=\"prefix\" />\n            <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"prefixIcon\" />\n            </el-icon>\n          </span>\n        </span>\n\n        <input\n          :id=\"inputId\"\n          ref=\"input\"\n          :class=\"nsInput.e('inner')\"\n          v-bind=\"attrs\"\n          :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n          :disabled=\"inputDisabled\"\n          :formatter=\"formatter\"\n          :parser=\"parser\"\n          :readonly=\"readonly\"\n          :autocomplete=\"autocomplete\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"label\"\n          :placeholder=\"placeholder\"\n          :style=\"inputStyle\"\n          :form=\"props.form\"\n          @compositionstart=\"handleCompositionStart\"\n          @compositionupdate=\"handleCompositionUpdate\"\n          @compositionend=\"handleCompositionEnd\"\n          @input=\"handleInput\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @change=\"handleChange\"\n          @keydown=\"handleKeydown\"\n        />\n\n        <!-- suffix slot -->\n        <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n          <span :class=\"nsInput.e('suffix-inner')\" @click=\"focus\">\n            <template\n              v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\"\n            >\n              <slot name=\"suffix\" />\n              <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n                <component :is=\"suffixIcon\" />\n              </el-icon>\n            </template>\n            <el-icon\n              v-if=\"showClear\"\n              :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n              @mousedown.prevent=\"NOOP\"\n              @click=\"clear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-if=\"showPwdVisible\"\n              :class=\"[nsInput.e('icon'), nsInput.e('password')]\"\n              @click=\"handlePasswordVisible\"\n            >\n              <component :is=\"passwordIcon\" />\n            </el-icon>\n            <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n              <span :class=\"nsInput.e('count-inner')\">\n                {{ textLength }} / {{ attrs.maxlength }}\n              </span>\n            </span>\n            <el-icon\n              v-if=\"validateState && validateIcon && needStatusIcon\"\n              :class=\"[\n                nsInput.e('icon'),\n                nsInput.e('validateIcon'),\n                nsInput.is('loading', validateState === 'validating'),\n              ]\"\n            >\n              <component :is=\"validateIcon\" />\n            </el-icon>\n          </span>\n        </span>\n      </div>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        :id=\"inputId\"\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"textareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :form=\"props.form\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span\n        v-if=\"isWordLimitVisible\"\n        :style=\"countStyle\"\n        :class=\"nsInput.e('count')\"\n      >\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  shallowRef,\n  toRef,\n  useAttrs as useRawAttrs,\n  useSlots,\n  watch,\n} from 'vue'\nimport { isClient, useResizeObserver } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  CircleClose,\n  Hide as IconHide,\n  View as IconView,\n} from '@element-plus/icons-vue'\nimport {\n  NOOP,\n  ValidateComponentsMap,\n  debugWarn,\n  isKorean,\n  isObject,\n} from '@element-plus/utils'\nimport {\n  useAttrs,\n  useCursor,\n  useDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './utils'\nimport { inputEmits, inputProps } from './input'\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\ndefineOptions({\n  name: 'ElInput',\n  inheritAttrs: false,\n})\nconst props = defineProps(inputProps)\nconst emit = defineEmits(inputEmits)\n\nconst rawAttrs = useRawAttrs()\nconst slots = useSlots()\n\nconst containerAttrs = computed(() => {\n  const comboBoxAttrs: Record<string, unknown> = {}\n  if (props.containerRole === 'combobox') {\n    comboBoxAttrs['aria-haspopup'] = rawAttrs['aria-haspopup']\n    comboBoxAttrs['aria-owns'] = rawAttrs['aria-owns']\n    comboBoxAttrs['aria-expanded'] = rawAttrs['aria-expanded']\n  }\n  return comboBoxAttrs\n})\n\nconst containerKls = computed(() => [\n  props.type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n  nsInput.m(inputSize.value),\n  nsInput.is('disabled', inputDisabled.value),\n  nsInput.is('exceed', inputExceed.value),\n  {\n    [nsInput.b('group')]: slots.prepend || slots.append,\n    [nsInput.bm('group', 'append')]: slots.append,\n    [nsInput.bm('group', 'prepend')]: slots.prepend,\n    [nsInput.m('prefix')]: slots.prefix || props.prefixIcon,\n    [nsInput.m('suffix')]:\n      slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n    [nsInput.bm('suffix', 'password-clear')]:\n      showClear.value && showPwdVisible.value,\n  },\n  rawAttrs.class,\n])\n\nconst wrapperKls = computed(() => [\n  nsInput.e('wrapper'),\n  nsInput.is('focus', focused.value),\n])\n\nconst attrs = useAttrs({\n  excludeKeys: computed<string[]>(() => {\n    return Object.keys(containerAttrs.value)\n  }),\n})\nconst { form, formItem } = useFormItem()\nconst { inputId } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\nconst inputSize = useSize()\nconst inputDisabled = useDisabled()\nconst nsInput = useNamespace('input')\nconst nsTextarea = useNamespace('textarea')\n\nconst input = shallowRef<HTMLInputElement>()\nconst textarea = shallowRef<HTMLTextAreaElement>()\n\nconst focused = ref(false)\nconst hovering = ref(false)\nconst isComposing = ref(false)\nconst passwordVisible = ref(false)\nconst countStyle = ref<StyleValue>()\nconst textareaCalcStyle = shallowRef(props.inputStyle)\n\nconst _ref = computed(() => input.value || textarea.value)\n\nconst needStatusIcon = computed(() => form?.statusIcon ?? false)\nconst validateState = computed(() => formItem?.validateState || '')\nconst validateIcon = computed(\n  () => validateState.value && ValidateComponentsMap[validateState.value]\n)\nconst passwordIcon = computed(() =>\n  passwordVisible.value ? IconView : IconHide\n)\nconst containerStyle = computed<StyleValue>(() => [\n  rawAttrs.style as StyleValue,\n  props.inputStyle,\n])\nconst textareaStyle = computed<StyleValue>(() => [\n  props.inputStyle,\n  textareaCalcStyle.value,\n  { resize: props.resize },\n])\nconst nativeInputValue = computed(() =>\n  isNil(props.modelValue) ? '' : String(props.modelValue)\n)\nconst showClear = computed(\n  () =>\n    props.clearable &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (focused.value || hovering.value)\n)\nconst showPwdVisible = computed(\n  () =>\n    props.showPassword &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (!!nativeInputValue.value || focused.value)\n)\nconst isWordLimitVisible = computed(\n  () =>\n    props.showWordLimit &&\n    !!attrs.value.maxlength &&\n    (props.type === 'text' || props.type === 'textarea') &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !props.showPassword\n)\nconst textLength = computed(() => Array.from(nativeInputValue.value).length)\nconst inputExceed = computed(\n  () =>\n    // show exceed style if length of initial value greater then maxlength\n    !!isWordLimitVisible.value &&\n    textLength.value > Number(attrs.value.maxlength)\n)\nconst suffixVisible = computed(\n  () =>\n    !!slots.suffix ||\n    !!props.suffixIcon ||\n    showClear.value ||\n    props.showPassword ||\n    isWordLimitVisible.value ||\n    (!!validateState.value && needStatusIcon.value)\n)\n\nconst [recordCursor, setCursor] = useCursor(input)\n\nuseResizeObserver(textarea, (entries) => {\n  if (!isWordLimitVisible.value || props.resize !== 'both') return\n  const entry = entries[0]\n  const { width } = entry.contentRect\n  countStyle.value = {\n    /** right: 100% - width + padding(15) + right(6) */\n    right: `calc(100% - ${width + 15 + 6}px)`,\n  }\n})\n\nconst resizeTextarea = () => {\n  const { type, autosize } = props\n\n  if (!isClient || type !== 'textarea') return\n\n  if (autosize) {\n    const minRows = isObject(autosize) ? autosize.minRows : undefined\n    const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n    textareaCalcStyle.value = {\n      ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n    }\n  } else {\n    textareaCalcStyle.value = {\n      minHeight: calcTextareaHeight(textarea.value!).minHeight,\n    }\n  }\n}\n\nconst setNativeInputValue = () => {\n  const input = _ref.value\n  if (!input || input.value === nativeInputValue.value) return\n  input.value = nativeInputValue.value\n}\n\nconst handleInput = async (event: Event) => {\n  recordCursor()\n\n  let { value } = event.target as TargetElement\n\n  if (props.formatter) {\n    value = props.parser ? props.parser(value) : value\n    value = props.formatter(value)\n  }\n\n  // should not emit input during composition\n  // see: https://github.com/ElemeFE/element/issues/10516\n  if (isComposing.value) return\n\n  // hack for https://github.com/ElemeFE/element/issues/8548\n  // should remove the following line when we don't support IE\n  if (value === nativeInputValue.value) {\n    setNativeInputValue()\n    return\n  }\n\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('input', value)\n\n  // ensure native input value is controlled\n  // see: https://github.com/ElemeFE/element/issues/12850\n  await nextTick()\n  setNativeInputValue()\n  setCursor()\n}\n\nconst handleChange = (event: Event) => {\n  emit('change', (event.target as TargetElement).value)\n}\n\nconst handleCompositionStart = (event: CompositionEvent) => {\n  emit('compositionstart', event)\n  isComposing.value = true\n}\n\nconst handleCompositionUpdate = (event: CompositionEvent) => {\n  emit('compositionupdate', event)\n  const text = (event.target as HTMLInputElement)?.value\n  const lastCharacter = text[text.length - 1] || ''\n  isComposing.value = !isKorean(lastCharacter)\n}\n\nconst handleCompositionEnd = (event: CompositionEvent) => {\n  emit('compositionend', event)\n  if (isComposing.value) {\n    isComposing.value = false\n    handleInput(event)\n  }\n}\n\nconst handlePasswordVisible = () => {\n  passwordVisible.value = !passwordVisible.value\n  focus()\n}\n\nconst focus = async () => {\n  // see: https://github.com/ElemeFE/element/issues/18573\n  await nextTick()\n  _ref.value?.focus()\n}\n\nconst blur = () => _ref.value?.blur()\n\nconst handleFocus = (event: FocusEvent) => {\n  focused.value = true\n  emit('focus', event)\n}\n\nconst handleBlur = (event: FocusEvent) => {\n  focused.value = false\n  emit('blur', event)\n  if (props.validateEvent) {\n    formItem?.validate?.('blur').catch((err) => debugWarn(err))\n  }\n}\n\nconst handleMouseLeave = (evt: MouseEvent) => {\n  hovering.value = false\n  emit('mouseleave', evt)\n}\n\nconst handleMouseEnter = (evt: MouseEvent) => {\n  hovering.value = true\n  emit('mouseenter', evt)\n}\n\nconst handleKeydown = (evt: KeyboardEvent) => {\n  emit('keydown', evt)\n}\n\nconst select = () => {\n  _ref.value?.select()\n}\n\nconst clear = () => {\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('change', '')\n  emit('clear')\n  emit('input', '')\n}\n\nwatch(\n  () => props.modelValue,\n  () => {\n    nextTick(() => resizeTextarea())\n    if (props.validateEvent) {\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n\n// native input value is set explicitly\n// do not use v-model / :value in template\n// see: https://github.com/ElemeFE/element/issues/14521\nwatch(nativeInputValue, () => setNativeInputValue())\n\n// when change between <input> and <textarea>,\n// update DOM dependent value and styles\n// https://github.com/ElemeFE/element/issues/14857\nwatch(\n  () => props.type,\n  async () => {\n    await nextTick()\n    setNativeInputValue()\n    resizeTextarea()\n  }\n)\n\nonMounted(() => {\n  if (!props.formatter && props.parser) {\n    debugWarn(\n      'ElInput',\n      'If you set the parser, you also need to set the formatter.'\n    )\n  }\n  setNativeInputValue()\n  nextTick(resizeTextarea)\n})\n\ndefineExpose({\n  /** @description HTML input element */\n  input,\n  /** @description HTML textarea element */\n  textarea,\n  /** @description HTML element, input or textarea */\n  ref: _ref,\n  /** @description style of textarea. */\n  textareaStyle,\n\n  /** @description from props (used on unit test) */\n  autosize: toRef(props, 'autosize'),\n\n  /** @description HTML input element native method */\n  focus,\n  /** @description HTML input element native method */\n  blur,\n  /** @description HTML input element native method */\n  select,\n  /** @description clear input value */\n  clear,\n  /** @description resize textarea. */\n  resizeTextarea,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}